var searchIndex = {};
searchIndex["alloc"] = {"doc":"The Rust core allocation and collections library","items":[[4,"Bound","alloc","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",0,null],[13,"Excluded","","An exclusive bound.",0,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",0,null],[0,"allocator","","",null,null],[3,"Excess","alloc::allocator","Represents the combination of a starting address and a total capacity of the returned block.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[3,"Layout","","Layout of a block of memory.",null,null],[3,"CannotReallocInPlace","","The `CannotReallocInPlace` error is used when `grow_in_place` or `shrink_in_place` were unable to reuse the given memory block for a requested layout.",null,null],[4,"AllocErr","","The `AllocErr` error specifies whether an allocation failure is specifically due to resource exhaustion or if it is due to something wrong when combining the given input arguments with this allocator.",null,null],[13,"Exhausted","","Error due to hitting some resource limit or otherwise running out of memory. This condition strongly implies that some series of deallocations would allow a subsequent reissuing of the original allocation request to succeed.",2,null],[12,"request","alloc::allocator::AllocErr","",2,null],[13,"Unsupported","alloc::allocator","Error due to allocator being fundamentally incapable of satisfying the original request. This condition implies that such an allocation request will never succeed on the given allocator, regardless of environment, memory pressure, or other contextual conditions.",2,null],[12,"details","alloc::allocator::AllocErr","",2,null],[8,"Alloc","alloc::allocator","An implementation of `Alloc` can allocate, reallocate, and deallocate arbitrary blocks of data described via `Layout`.",null,null],[10,"alloc","","Returns a pointer meeting the size and alignment guarantees of `layout`.",3,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["allocerr"],"name":"result"}}],[10,"dealloc","","Deallocate the memory referenced by `ptr`.",3,null],[11,"oom","","Allocator-specific method for signaling an out-of-memory condition.",3,null],[11,"usable_size","","Returns bounds on the guaranteed usable size of a successful allocation created with the specified `layout`.",3,null],[11,"realloc","","Returns a pointer suitable for holding data described by `new_layout`, meeting its size and alignment guarantees. To accomplish this, this may extend or shrink the allocation referenced by `ptr` to fit `new_layout`.",3,null],[11,"alloc_zeroed","","Behaves like `alloc`, but also ensures that the contents are set to zero before being returned.",3,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["allocerr"],"name":"result"}}],[11,"alloc_excess","","Behaves like `alloc`, but also returns the whole size of the returned block. For some `layout` inputs, like arrays, this may include extra storage usable for additional data.",3,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["excess","allocerr"],"name":"result"}}],[11,"realloc_excess","","Behaves like `realloc`, but also returns the whole size of the returned block. For some `layout` inputs, like arrays, this may include extra storage usable for additional data.",3,null],[11,"grow_in_place","","Attempts to extend the allocation referenced by `ptr` to fit `new_layout`.",3,null],[11,"shrink_in_place","","Attempts to shrink the allocation referenced by `ptr` to fit `new_layout`.",3,null],[11,"alloc_one","","Allocates a block suitable for holding an instance of `T`.",3,{"inputs":[{"name":"self"}],"output":{"generics":["nonnull","allocerr"],"name":"result"}}],[11,"dealloc_one","","Deallocates a block suitable for holding an instance of `T`.",3,{"inputs":[{"name":"self"},{"name":"nonnull"}],"output":null}],[11,"alloc_array","","Allocates a block suitable for holding `n` instances of `T`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["nonnull","allocerr"],"name":"result"}}],[11,"realloc_array","","Reallocates a block previously suitable for holding `n_old` instances of `T`, returning a block suitable for holding `n_new` instances of `T`.",3,{"inputs":[{"name":"self"},{"name":"nonnull"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["nonnull","allocerr"],"name":"result"}}],[11,"dealloc_array","","Deallocates a block suitable for holding `n` instances of `T`.",3,{"inputs":[{"name":"self"},{"name":"nonnull"},{"name":"usize"}],"output":{"generics":["allocerr"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"layout"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"from_size_align","","Constructs a `Layout` from a given `size` and `align`, or returns `None` if any of the following conditions are not met:",4,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["layout"],"name":"option"}}],[11,"from_size_align_unchecked","","Creates a layout, bypassing all checks.",4,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"layout"}}],[11,"size","","The minimum size in bytes for a memory block of this layout.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"align","","The minimum byte alignment for a memory block of this layout.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Constructs a `Layout` suitable for holding a value of type `T`.",4,{"inputs":[],"output":{"name":"self"}}],[11,"for_value","","Produces layout describing a record that could be used to allocate backing structure for `T` (which could be a trait or other unsized type like a slice).",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"align_to","","Creates a layout describing the record that can hold a value of the same layout as `self`, but that also is aligned to alignment `align` (measured in bytes).",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"padding_needed_for","","Returns the amount of padding we must insert after `self` to ensure that the following address will satisfy `align` (measured in bytes).",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"repeat","","Creates a layout describing the record for `n` instances of `self`, with a suitable amount of padding between each to ensure that each instance is given its requested size and alignment. On success, returns `(k, offs)` where `k` is the layout of the array and `offs` is the distance between the start of each element in the array.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"extend","","Creates a layout describing the record for `self` followed by `next`, including any necessary padding to ensure that `next` will be properly aligned. Note that the result layout will satisfy the alignment properties of both `self` and `next`.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"repeat_packed","","Creates a layout describing the record for `n` instances of `self`, with no padding between each instance.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"extend_packed","","Creates a layout describing the record for `self` followed by `next` with no additional padding between the two. Since no padding is inserted, the alignment of `next` is irrelevant, and is not incorporated at all into the resulting layout.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"array","","Creates a layout describing the record for a `[T; n]`.",4,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"allocerr"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"allocerr"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"allocerr"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"invalid_input","","",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"is_memory_exhausted","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_request_unsupported","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"cannotreallocinplace"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"cannotreallocinplace"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"heap","alloc","",null,null],[3,"Heap","alloc::heap","",null,null],[17,"EMPTY","","An arbitrary non-null address to represent zero-size allocations.",null,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"heap"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"heap"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"alloc","","",6,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["allocerr"],"name":"result"}}],[11,"oom","","",6,null],[11,"dealloc","","",6,null],[11,"usable_size","","",6,null],[11,"realloc","","",6,null],[11,"alloc_zeroed","","",6,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["allocerr"],"name":"result"}}],[11,"alloc_excess","","",6,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["excess","allocerr"],"name":"result"}}],[11,"realloc_excess","","",6,null],[11,"grow_in_place","","",6,null],[11,"shrink_in_place","","",6,null],[0,"boxed","alloc","A pointer type for heap allocation.",null,null],[3,"ExchangeHeapSingleton","alloc::boxed","This the singleton type used solely for `boxed::HEAP`.",null,null],[3,"Box","","A pointer type for heap allocation.",null,null],[3,"IntermediateBox","","`IntermediateBox` represents uninitialized backing storage for `Box`.",null,null],[17,"HEAP","","A value that represents the heap. This is the default place that the `box` keyword allocates into when no place is supplied.",null,null],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed closure objects. The idea is that where one would normally store a `Box<FnOnce()>` in a data structure, you should use `Box<FnBox()>`. The two traits behave essentially the same, except that a `FnBox` closure can only be called if it is boxed. (Note that `FnBox` may be deprecated in the future if `Box<FnOnce()>` closures become directly usable.)",null,null],[16,"Output","","",7,null],[10,"call_box","","",7,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",9,null],[11,"make_place","","",9,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",9,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"finalize","","",10,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",8,{"inputs":[{"name":"self"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Allocates memory on the heap and then places `x` into it.",10,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",10,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",10,null],[11,"into_raw_non_null","","Consumes the `Box`, returning the wrapped pointer as `NonNull<T>`.",10,{"inputs":[{"name":"box"}],"output":{"name":"nonnull"}}],[11,"into_unique","","",10,{"inputs":[{"name":"box"}],"output":{"name":"unique"}}],[11,"leak","","Consumes and leaks the `Box`, returning a mutable reference, `&'a mut T`. Here, the lifetime `'a` may be chosen to be `'static`.",10,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"drop","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","Creates a `Box<T>`, with the `Default` value for T.",10,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",10,{"inputs":[],"output":{"generics":["str"],"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",10,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",10,{"inputs":[{"name":"self"},{"name":"box"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",10,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"finish","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",10,null],[11,"write_u8","","",10,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"write_u16","","",10,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"write_u32","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"write_u64","","",10,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"write_u128","","",10,{"inputs":[{"name":"self"},{"name":"u128"}],"output":null}],[11,"write_usize","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write_i8","","",10,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"write_i16","","",10,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"write_i32","","",10,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"write_i64","","",10,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"write_i128","","",10,{"inputs":[{"name":"self"},{"name":"i128"}],"output":null}],[11,"write_isize","","",10,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[11,"from","","",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",10,null],[11,"from","","",10,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"box"}}],[11,"from","","",10,{"inputs":[{"generics":["str"],"name":"box"}],"output":{"name":"self"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",10,{"inputs":[{"name":"self"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",10,{"inputs":[{"name":"self"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"nth","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"call_once","","",10,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",10,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"borrow","","",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow_mut","","",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"resume","","",10,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[0,"arc","alloc","Thread-safe reference-counting pointers.",null,null],[3,"Arc","alloc::arc","A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically Reference Counted'.",null,null],[3,"Weak","","`Weak` is a version of [`Arc`] that holds a non-owning reference to the managed value. The value is accessed by calling [`upgrade`] on the `Weak` pointer, which returns an [`Option`]`<`[`Arc`]`<T>>`.",null,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Arc<T>`.",12,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Returns the contained value, if the `Arc` has exactly one strong reference.",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_raw","","Consumes the `Arc`, returning the wrapped pointer.",12,null],[11,"from_raw","","Constructs an `Arc` from a raw pointer.",12,null],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this value.",12,{"inputs":[{"name":"self"}],"output":{"name":"weak"}}],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this value.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"strong_count","","Gets the number of strong (`Arc`) pointers to this value.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ptr_eq","","Returns true if the two `Arc`s point to the same value (not just values that compare as equal).",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","Makes a clone of the `Arc` pointer.",12,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"deref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"make_mut","","Makes a mutable reference into the given `Arc`.",12,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the inner value, if there are no other `Arc` or [`Weak`][weak] pointers to the same value.",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Arc`.",12,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Constructs a new `Weak<T>`, allocating memory for `T` without initializing it. Calling [`upgrade`] on the return value always gives [`None`].",11,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Attempts to upgrade the `Weak` pointer to an [`Arc`], extending the lifetime of the value if successful.",11,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"clone","","Makes a clone of the `Weak` pointer that points to the same value.",11,{"inputs":[{"name":"self"}],"output":{"name":"weak"}}],[11,"default","","Constructs a new `Weak<T>`, allocating memory for `T` without initializing it. Calling [`upgrade`] on the return value always gives [`None`].",11,{"inputs":[],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak` pointer.",11,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","Equality for two `Arc`s.",12,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Arc`s.",12,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Arc`s.",12,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","Less-than comparison for two `Arc`s.",12,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","'Less than or equal to' comparison for two `Arc`s.",12,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Arc`s.",12,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater than or equal to' comparison for two `Arc`s.",12,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Arc`s.",12,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates a new `Arc<T>`, with the `Default` value for `T`.",12,{"inputs":[],"output":{"name":"arc"}}],[11,"hash","","",12,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"from","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",12,null],[11,"from","","",12,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"arc"}}],[11,"from","","",12,{"inputs":[{"name":"string"}],"output":{"generics":["str"],"name":"arc"}}],[11,"from","","",12,{"inputs":[{"name":"box"}],"output":{"name":"arc"}}],[11,"from","","",12,{"inputs":[{"name":"vec"}],"output":{"name":"arc"}}],[11,"borrow","","",12,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"rc","alloc","Single-threaded reference-counting pointers. 'Rc' stands for 'Reference Counted'.",null,null],[3,"Rc","alloc::rc","A single-threaded reference-counting pointer. 'Rc' stands for 'Reference Counted'.",null,null],[3,"Weak","","`Weak` is a version of [`Rc`] that holds a non-owning reference to the managed value. The value is accessed by calling [`upgrade`] on the `Weak` pointer, which returns an [`Option`]`<`[`Rc`]`<T>>`.",null,null],[11,"new","","Constructs a new `Rc<T>`.",13,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Returns the contained value, if the `Rc` has exactly one strong reference.",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_raw","","Consumes the `Rc`, returning the wrapped pointer.",13,null],[11,"from_raw","","Constructs an `Rc` from a raw pointer.",13,null],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this value.",13,{"inputs":[{"name":"self"}],"output":{"name":"weak"}}],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this value.",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"strong_count","","Gets the number of strong (`Rc`) pointers to this value.",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_mut","","Returns a mutable reference to the inner value, if there are no other `Rc` or [`Weak`][weak] pointers to the same value.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ptr_eq","","Returns true if the two `Rc`s point to the same value (not just values that compare as equal).",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"make_mut","","Makes a mutable reference into the given `Rc`.",13,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast","","Attempt to downcast the `Rc<Any>` to a concrete type.",13,{"inputs":[{"name":"self"}],"output":{"generics":["rc","rc"],"name":"result"}}],[11,"deref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc`.",13,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","Makes a clone of the `Rc` pointer.",13,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",13,{"inputs":[],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc`s.",13,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc`s.",13,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc`s.",13,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc`s.",13,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less than or equal to' comparison for two `Rc`s.",13,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc`s.",13,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater than or equal to' comparison for two `Rc`s.",13,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc`s.",13,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",13,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",13,null],[11,"from","","",13,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"rc"}}],[11,"from","","",13,{"inputs":[{"name":"string"}],"output":{"generics":["str"],"name":"rc"}}],[11,"from","","",13,{"inputs":[{"name":"box"}],"output":{"name":"rc"}}],[11,"from","","",13,{"inputs":[{"name":"vec"}],"output":{"name":"rc"}}],[11,"new","","Constructs a new `Weak<T>`, allocating memory for `T` without initializing it. Calling [`upgrade`] on the return value always gives [`None`].",14,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Attempts to upgrade the `Weak` pointer to an [`Rc`], extending the lifetime of the value if successful.",14,{"inputs":[{"name":"self"}],"output":{"generics":["rc"],"name":"option"}}],[11,"drop","","Drops the `Weak` pointer.",14,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","Makes a clone of the `Weak` pointer that points to the same value.",14,{"inputs":[{"name":"self"}],"output":{"name":"weak"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Constructs a new `Weak<T>`, allocating memory for `T` without initializing it. Calling [`upgrade`] on the return value always gives [`None`].",14,{"inputs":[],"output":{"name":"weak"}}],[11,"borrow","","",13,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"raw_vec","alloc","",null,null],[3,"RawVec","alloc::raw_vec","A low-level utility for more ergonomically allocating, reallocating, and deallocating a buffer of memory on the heap without having to worry about all the corner cases involved. This type is excellent for building your own data structures like Vec and VecDeque. In particular:",null,null],[11,"new_in","","Like `new` but parameterized over the choice of allocator for the returned RawVec.",15,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"with_capacity_in","","Like `with_capacity` but parameterized over the choice of allocator for the returned RawVec.",15,{"inputs":[{"name":"usize"},{"name":"a"}],"output":{"name":"self"}}],[11,"with_capacity_zeroed_in","","Like `with_capacity_zeroed` but parameterized over the choice of allocator for the returned RawVec.",15,{"inputs":[{"name":"usize"},{"name":"a"}],"output":{"name":"self"}}],[11,"new","","Creates the biggest possible RawVec (on the system heap) without allocating. If T has positive size, then this makes a RawVec with capacity 0. If T has 0 size, then it makes a RawVec with capacity `usize::MAX`. Useful for implementing delayed allocation.",15,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates a RawVec (on the system heap) with exactly the capacity and alignment requirements for a `[T; cap]`. This is equivalent to calling RawVec::new when `cap` is 0 or T is zero-sized. Note that if `T` is zero-sized this means you will not get a RawVec with the requested capacity!",15,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_capacity_zeroed","","Like `with_capacity` but guarantees the buffer is zeroed.",15,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_raw_parts_in","","Reconstitutes a RawVec from a pointer, capacity, and allocator.",15,null],[11,"from_raw_parts","","Reconstitutes a RawVec from a pointer, capacity.",15,null],[11,"from_box","","Converts a `Box<[T]>` into a `RawVec<T>`.",15,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"ptr","","Gets a raw pointer to the start of the allocation. Note that this is Unique::empty() if `cap = 0` or T is zero-sized. In the former case, you must be careful.",15,null],[11,"cap","","Gets the capacity of the allocation.",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"alloc","","Returns a shared reference to the allocator backing this RawVec.",15,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"alloc_mut","","Returns a mutable reference to the allocator backing this RawVec.",15,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"double","","Doubles the size of the type's backing allocation. This is common enough to want to do that it's easiest to just have a dedicated method. Slightly more efficient logic can be provided for this than the general case.",15,{"inputs":[{"name":"self"}],"output":null}],[11,"double_in_place","","Attempts to double the size of the type's backing allocation in place. This is common enough to want to do that it's easiest to just have a dedicated method. Slightly more efficient logic can be provided for this than the general case.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reserve_exact","","Ensures that the buffer contains at least enough space to hold `used_cap + needed_extra_cap` elements. If it doesn't already, will reallocate the minimum possible amount of memory necessary. Generally this will be exactly the amount of memory necessary, but in principle the allocator is free to give back more than we asked for.",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"reserve","","Ensures that the buffer contains at least enough space to hold `used_cap + needed_extra_cap` elements. If it doesn't already have enough capacity, will reallocate enough space plus comfortable slack space to get amortized `O(1)` behavior. Will limit this behavior if it would needlessly cause itself to panic.",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"reserve_in_place","","Attempts to ensure that the buffer contains at least enough space to hold `used_cap + needed_extra_cap` elements. If it doesn't already have enough capacity, will reallocate in place enough space plus comfortable slack space to get amortized `O(1)` behavior. Will limit this behaviour if it would needlessly cause itself to panic.",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"shrink_to_fit","","Shrinks the allocation down to the specified amount. If the given amount is 0, actually completely deallocates.",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"into_box","","Converts the entire buffer into `Box<[T]>`.",15,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"dealloc_buffer","","Frees the memory owned by the RawVec without trying to Drop its contents.",15,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","Frees the memory owned by the RawVec without trying to Drop its contents.",15,{"inputs":[{"name":"self"}],"output":null}],[0,"binary_heap","alloc","A priority queue implemented with a binary heap.",null,null],[3,"BinaryHeap","alloc::binary_heap","A priority queue implemented with a binary heap.",null,null],[3,"PeekMut","","Structure wrapping a mutable reference to the greatest item on a `BinaryHeap`.",null,null],[3,"Iter","","An iterator over the elements of a `BinaryHeap`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `BinaryHeap`.",null,null],[3,"Drain","","A draining iterator over the elements of a `BinaryHeap`.",null,null],[3,"BinaryHeapPlace","","",null,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"pop","","Removes the peeked value from the heap and returns it.",16,{"inputs":[{"name":"peekmut"}],"output":{"name":"t"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"default","","Creates an empty `BinaryHeap<T>`.",17,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",17,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity. This preallocates enough memory for `capacity` elements, so that the `BinaryHeap` does not have to be reallocated until it contains at least that many values.",17,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in arbitrary order.",17,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or `None` if it is empty.",17,{"inputs":[{"name":"self"}],"output":{"generics":["peekmut"],"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `BinaryHeap`. Does nothing if the capacity is already sufficient.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",17,{"inputs":[{"name":"self"}],"output":null}],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it is empty.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",17,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector in arbitrary order.",17,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted (ascending) order.",17,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",17,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",17,{"inputs":[{"name":"self"}],"output":null}],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"next_back","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"next_back","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"next_back","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",17,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from_iter","","",17,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the binary heap in arbitrary order. The binary heap cannot be used after calling this.",17,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",17,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",17,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pointer","","",21,null],[11,"finalize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"borrow","alloc","A module for working with borrowed data.",null,null],[8,"Borrow","alloc::borrow","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",22,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",23,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[4,"Cow","","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",24,null],[13,"Owned","","Owned data.",24,null],[8,"ToOwned","","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",25,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",25,null],[11,"clone_into","","Uses borrowed data to replace owned data, usually by cloning.",25,null],[11,"borrow","","",24,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"clone_from","","",24,{"inputs":[{"name":"self"},{"name":"cow"}],"output":null}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",24,null],[11,"into_owned","","Extracts the owned data.",24,null],[11,"deref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"cmp","","",24,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates an owned Cow<'a, B> with the default value for the contained owned value.",24,{"inputs":[],"output":{"name":"cow"}}],[11,"hash","","",24,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"as_ref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"add","","",24,null],[11,"add","","",24,null],[11,"add_assign","","",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"add_assign","","",24,{"inputs":[{"name":"self"},{"generics":["str"],"name":"cow"}],"output":null}],[0,"fmt","alloc","Utilities for formatting and printing `String`s.",null,null],[3,"Formatter","alloc::fmt","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",null,null],[6,"Result","","The type returned by formatter methods.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write succeeded.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","Writes a [`char`] into this writer, returning whether the write succeeded.",26,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors of this trait.",26,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[8,"Octal","","`o` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Binary","","`b` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Debug","","`?` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"LowerHex","","`x` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"UpperHex","","`X` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Pointer","","`p` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"LowerExp","","`e` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"UpperExp","","`E` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification.",null,null],[5,"write","","The `write` function takes an output stream, and an `Arguments` struct that can be precompiled with the `format_args!` macro.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[5,"format","","The `format` function takes an [`Arguments`] struct and returns the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[0,"linked_list","alloc","A doubly-linked list with owned nodes.",null,null],[3,"LinkedList","alloc::linked_list","A doubly-linked list with owned nodes.",null,null],[3,"Iter","","An iterator over the elements of a `LinkedList`.",null,null],[3,"IterMut","","A mutable iterator over the elements of a `LinkedList`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `LinkedList`.",null,null],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on LinkedList.",null,null],[3,"FrontPlace","","A place for insertion at the front of a `LinkedList`.",null,null],[3,"BackPlace","","A place for insertion at the back of a `LinkedList`.",null,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates an empty `LinkedList<T>`.",39,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates an empty `LinkedList`.",39,{"inputs":[],"output":{"name":"self"}}],[11,"append","","Moves all elements from `other` to the end of the list.",39,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"iter","","Provides a forward iterator.",39,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",39,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",39,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",39,{"inputs":[{"name":"self"}],"output":null}],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the given value.",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the list is empty.",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list is empty.",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is empty.",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list is empty.",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is empty.",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if it is empty.",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index, including the index.",39,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",39,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"drainfilter"}}],[11,"front_place","","Returns a place for insertion at the front of the list.",39,{"inputs":[{"name":"self"}],"output":{"name":"frontplace"}}],[11,"back_place","","Returns a place for insertion at the back of the list.",39,{"inputs":[{"name":"self"}],"output":{"name":"backplace"}}],[11,"drop","","",39,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"next_back","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"next_back","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts the given element just after the element most recently returned by `.next()`. The inserted element does not appear in the iteration.",37,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"drop","","",40,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"next_back","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_iter","","",39,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",39,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",39,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",39,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",39,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",39,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",39,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"make_place","","",41,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pointer","","",41,null],[11,"finalize","","",41,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"make_place","","",42,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pointer","","",42,null],[11,"finalize","","",42,{"inputs":[{"name":"self"}],"output":null}],[0,"range","alloc","Range syntax.",null,null],[8,"RangeArgument","alloc::range","`RangeArgument` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[10,"start","","Start index bound.",43,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[10,"end","","End index bound.",43,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[0,"slice","alloc","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[3,"Chunks","alloc::slice","An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time).",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"Iter","","Immutable slice iterator",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`.",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time). When the slice len is not evenly divided by the chunk size, the last slice of the iteration will be the remainder.",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate function.",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[3,"RSplit","","An iterator over subslices separated by elements that match a predicate function, starting from the end of the slice.",null,null],[3,"RSplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`, starting from the end of the slice.",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable slice is returned.",null,null],[5,"from_ref","","Converts a reference to T into a slice of length 1 (without copying).",null,null],[5,"from_ref_mut","","Converts a reference to T into a slice of length 1 (without copying).",null,null],[8,"SliceIndex","","A helper trait used for indexing operations.",null,null],[16,"Output","","The output type returned by methods.",44,null],[10,"get","","Returns a shared reference to the output at this location, if in bounds.",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[10,"get_mut","","Returns a mutable reference to the output at this location, if in bounds.",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[10,"get_unchecked","","Returns a shared reference to the output at this location, without performing any bounds checking.",44,null],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this location, without performing any bounds checking.",44,null],[10,"index","","Returns a shared reference to the output at this location, panicking if out of bounds.",44,null],[10,"index_mut","","Returns a mutable reference to the output at this location, panicking if out of bounds.",44,null],[3,"ExactChunks","","An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time).",null,null],[3,"ExactChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time). When the slice len is not evenly divided by the chunk size, the last up to `chunk_size-1` elements will be omitted.",null,null],[8,"SliceConcatExt","","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",45,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",45,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a given separator between each.",45,null],[10,"connect","","",45,null],[0,"str","alloc","Unicode string slices.",null,null],[8,"FromStr","alloc::str","A trait to abstract the idea of creating a new instance of a type from a string.",null,null],[16,"Err","","The associated error which can be returned from parsing.",46,null],[10,"from_str","","Parses a string `s` to return a value of this type.",46,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of [`u8`] as a string.",null,null],[3,"Lines","","An iterator over the lines of a string, as string slices.",null,null],[3,"LinesAny","","Created with the method [`lines_any`].",null,null],[3,"Split","","Created with the method [`split`].",null,null],[3,"RSplit","","Created with the method [`rsplit`].",null,null],[3,"SplitN","","Created with the method [`splitn`].",null,null],[3,"RSplitN","","Created with the method [`rsplitn`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",null,null],[3,"Matches","","Created with the method [`matches`].",null,null],[3,"RMatches","","Created with the method [`rmatches`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string slice.",null,null],[3,"Chars","","An iterator over the [`char`]s of a string slice.",null,null],[3,"CharIndices","","An iterator over the [`char`]s of a string slice, and their positions.",null,null],[3,"Bytes","","An iterator over the bytes of a string slice.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8.",null,null],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8; mutable version.",null,null],[3,"ParseBoolError","","An error returned when parsing a `bool` using [`from_str`] fails",null,null],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.",null,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","alloc::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",47,null],[10,"into_searcher","","Constructs the associated searcher from `self` and the `haystack` to search in.",47,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",47,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",47,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",47,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at `haystack[a..b]`.",48,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match of the pattern.",48,null],[13,"Done","","Expresses that every byte of the haystack has been visited, ending the iteration.",48,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlying string to be searched in",49,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",49,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()` and `next_match()`",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",50,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[3,"EncodeUtf16","alloc::str","An iterator of [`u16`] over the string encoded as UTF-16.",null,null],[5,"from_boxed_utf8_unchecked","","Converts a boxed slice of bytes to a boxed string slice without checking that the string contains valid UTF-8.",null,{"inputs":[{"name":"box"}],"output":{"generics":["str"],"name":"box"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"encodeutf16"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",51,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"size_hint","","",51,null],[0,"string","alloc","A UTF-8 encoded, growable string.",null,null],[3,"String","alloc::string","A UTF-8 encoded, growable string.",null,null],[3,"FromUtf8Error","","A possible error value when converting a `String` from a UTF-8 byte vector.",null,null],[3,"FromUtf16Error","","A possible error value when converting a `String` from a UTF-16 byte slice.",null,null],[3,"Drain","","A draining iterator for `String`.",null,null],[4,"ParseError","","An error when parsing a `String`.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",52,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"partial_cmp","","",53,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",53,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",53,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",53,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",53,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"cmp","","",53,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new empty `String`.",53,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",53,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",53,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"generics":["string","fromutf8error"],"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",53,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning [`Err`] if `v` contains any invalid data.",53,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice `v` into a `String`, replacing invalid data with the replacement character (U+FFFD).",53,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",53,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the string contains valid UTF-8.",53,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",53,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",53,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_mut_str","","Converts a `String` into a mutable string slice.",53,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",53,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"capacity","","Returns this `String`'s capacity, in bytes.",53,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes larger than its length.",53,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes larger than its length.",53,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",53,{"inputs":[{"name":"self"}],"output":null}],[11,"push","","Appends the given [`char`] to the end of this `String`.",53,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",53,null],[11,"truncate","","Shortens this `String` to the specified length.",53,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"pop","","Removes the last character from the string buffer and returns it.",53,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"remove","","Removes a [`char`] from this `String` at a byte position and returns it.",53,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"char"}}],[11,"retain","","Retains only the characters specified by the predicate.",53,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"insert","","Inserts a character into this `String` at a byte position.",53,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"char"}],"output":null}],[11,"insert_str","","Inserts a string slice into this `String` at a byte position.",53,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"str"}],"output":null}],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",53,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",53,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the string into two at the given index.",53,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[11,"clear","","Truncates this `String`, removing all contents.",53,{"inputs":[{"name":"self"}],"output":null}],[11,"drain","","Creates a draining iterator that removes the specified range in the string and yields the removed chars.",53,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"splice","","Creates a splicing iterator that removes the specified range in the string, and replaces it with the given string. The given string doesn't need to be the same length as the range.",53,{"inputs":[{"name":"self"},{"name":"r"},{"name":"str"}],"output":null}],[11,"into_boxed_str","","Converts this `String` into a [`Box`]`<`[`str`]`>`.",53,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"box"}}],[11,"as_bytes","","Returns a slice of [`u8`]s bytes that were attempted to convert to a `String`.",54,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",54,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",54,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",53,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"from_iter","","",53,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",53,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",53,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",53,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",53,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",53,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",53,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",53,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",53,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",53,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","alloc::borrow","",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","alloc::string","",53,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"default","","Creates an empty `String`.",53,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",53,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",53,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"add_assign","","",53,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"index","","",53,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"str"}}],[11,"index","","",53,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",53,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",53,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",53,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index","","",53,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",53,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",53,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",53,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",53,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",53,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",53,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"deref","","",53,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","","",53,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_str","","",53,{"inputs":[{"name":"str"}],"output":{"generics":["string","parseerror"],"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"to_string","alloc::borrow","",24,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_string","alloc::string","",53,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"as_ref","","",53,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",53,null],[11,"from","","",53,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","","",53,{"inputs":[{"generics":["str"],"name":"box"}],"output":{"name":"string"}}],[11,"from","alloc::boxed","",10,{"inputs":[{"name":"string"}],"output":{"generics":["str"],"name":"box"}}],[11,"from","alloc::string","",53,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"string"}}],[11,"from","alloc::borrow","",24,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"cow"}}],[11,"from","","",24,{"inputs":[{"name":"string"}],"output":{"generics":["str"],"name":"cow"}}],[11,"from_iter","","",24,{"inputs":[{"name":"i"}],"output":{"generics":["str"],"name":"cow"}}],[11,"from_iter","","",24,{"inputs":[{"name":"i"}],"output":{"generics":["str"],"name":"cow"}}],[11,"from_iter","","",24,{"inputs":[{"name":"i"}],"output":{"generics":["str"],"name":"cow"}}],[11,"write_str","alloc::string","",53,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",53,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",57,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"size_hint","","",57,null],[11,"next_back","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[0,"vec","alloc","A contiguous growable array type with heap-allocated contents, written `Vec<T>`.",null,null],[3,"Vec","alloc::vec","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.",null,null],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[3,"Drain","","A draining iterator for `Vec<T>`.",null,null],[3,"PlaceBack","","A place for insertion at the back of a `Vec`.",null,null],[3,"Splice","","A splicing iterator for `Vec`.",null,null],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on Vec.",null,null],[11,"new","","Constructs a new, empty `Vec<T>`.",58,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",58,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",58,null],[11,"capacity","","Returns the number of elements the vector can hold without reallocating.",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Vec<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",58,{"inputs":[{"name":"self"}],"output":null}],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",58,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"as_slice","","Extracts a slice containing the entire vector.",58,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",58,null],[11,"set_len","","Sets the length of a vector.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"swap_remove","","Removes an element from the vector and returns it.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all elements after it to the right.",58,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"remove","","Removes and returns the element at position `index` within the vector, shifting all elements after it to the left.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",58,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the vector that resolve to the same key.",58,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"dedup_by","","Removes all but the first of consecutive elements in the vector satisfying a given equality relation.",58,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"push","","Appends an element to the back of a collection.",58,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"place_back","","Returns a place for insertion at the back of the `Vec`.",58,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"pop","","Removes the last element from a vector and returns it, or [`None`] if it is empty.",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",58,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"drain","","Creates a draining iterator that removes the specified range in the vector and yields the removed items.",58,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",58,{"inputs":[{"name":"self"}],"output":null}],[11,"len","","Returns the number of elements in the vector, also referred to as its 'length'.",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"resize","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",58,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",58,null],[11,"resize_default","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"dedup","","Removes consecutive repeated elements in the vector.",58,{"inputs":[{"name":"self"}],"output":null}],[11,"remove_item","","Removes the first instance of `item` from the vector if the item exists.",58,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone_from","","",58,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"hash","","",58,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",58,null],[11,"index","","",58,null],[11,"index","","",58,null],[11,"index","","",58,null],[11,"index","","",58,null],[11,"index","","",58,null],[11,"index_mut","","",58,null],[11,"index_mut","","",58,null],[11,"index_mut","","",58,null],[11,"index_mut","","",58,null],[11,"index_mut","","",58,null],[11,"index_mut","","",58,null],[11,"deref","","",58,null],[11,"deref_mut","","",58,null],[11,"from_iter","","",58,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the vector (from start to end). The vector cannot be used after calling this.",58,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",58,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"splice","","Creates a splicing iterator that replaces the specified range in the vector with the given `replace_with` iterator and yields the removed items. `replace_with` does not need to be the same length as `range`.",58,{"inputs":[{"name":"self"},{"name":"r"},{"name":"i"}],"output":{"name":"splice"}}],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",58,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"drainfilter"}}],[11,"extend","","",58,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","alloc::borrow","",24,null],[11,"ne","","",24,null],[11,"eq","","",24,null],[11,"ne","","",24,null],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","alloc::vec","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"partial_cmp","","",58,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",58,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",58,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","Creates an empty `Vec<T>`.",58,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",58,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_mut","","",58,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_ref","","",58,null],[11,"as_mut","","",58,null],[11,"from","","",58,null],[11,"from","","",58,null],[11,"from","","",58,{"inputs":[{"name":"cow"}],"output":{"name":"vec"}}],[11,"from","","",58,{"inputs":[{"name":"box"}],"output":{"name":"vec"}}],[11,"from","alloc::boxed","",10,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"from","alloc::vec","",58,{"inputs":[{"name":"str"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from","alloc::borrow","",24,null],[11,"from","","",24,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",24,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"fmt","alloc::vec","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",59,null],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable slice.",59,null],[11,"next","","",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"count","","",59,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next_back","","",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drop","","",59,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"next_back","","",60,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",60,{"inputs":[{"name":"self"}],"output":null}],[11,"is_empty","","",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"make_place","","",61,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pointer","","",61,null],[11,"finalize","","",61,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",62,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"next_back","","",62,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",62,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"drop","","",63,{"inputs":[{"name":"self"}],"output":null}],[0,"vec_deque","alloc","A double-ended queue implemented with a growable ring buffer.",null,null],[3,"VecDeque","alloc::vec_deque","A double-ended queue implemented with a growable ring buffer.",null,null],[3,"Iter","","An iterator over the elements of a `VecDeque`.",null,null],[3,"IterMut","","A mutable iterator over the elements of a `VecDeque`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `VecDeque`.",null,null],[3,"Drain","","A draining iterator over the elements of a `VecDeque`.",null,null],[3,"PlaceBack","","A place for insertion at the back of a `VecDeque`.",null,null],[3,"PlaceFront","","A place for insertion at the front of a `VecDeque`.",null,null],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"vecdeque"}}],[11,"drop","","",64,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","Creates an empty `VecDeque<T>`.",64,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",64,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",64,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",64,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",64,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",64,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without reallocating.",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `VecDeque`. Does nothing if the capacity is already sufficient.",64,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `VecDeque`. The collection may reserve more space to avoid frequent reallocations.",64,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",64,{"inputs":[{"name":"self"}],"output":null}],[11,"truncate","","Shortens the `VecDeque`, dropping excess elements from the back.",64,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"iter","","Returns a front-to-back iterator.",64,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",64,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",64,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",64,null],[11,"len","","Returns the number of elements in the `VecDeque`.",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the `VecDeque` is empty.",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the `VecDeque` and yields the removed items.",64,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the `VecDeque`, removing all values.",64,{"inputs":[{"name":"self"}],"output":null}],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the given value.",64,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the `VecDeque` is empty.",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the `VecDeque` is empty.",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the `VecDeque` is empty.",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the `VecDeque` is empty.",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the `VecDeque` is empty.",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Prepends an element to the `VecDeque`.",64,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"push_back","","Appends an element to the back of the `VecDeque`.",64,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop_back","","Removes the last element from the `VecDeque` and returns it, or `None` if it is empty.",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the last element.",64,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the first element.",64,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`, shifting all elements with indices greater than or equal to `index` towards the back.",64,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`. Whichever end is closer to the removal point will be moved to make room, and all the affected elements will be moved to new positions. Returns `None` if `index` is out of bounds.",64,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the `VecDeque` into two at the given index.",64,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",64,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"retain","","Retains only the elements specified by the predicate.",64,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"place_back","","Returns a place for insertion at the back of the `VecDeque`.",64,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"place_front","","Returns a place for insertion at the front of the `VecDeque`.",64,{"inputs":[{"name":"self"}],"output":{"name":"placefront"}}],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len, either by removing excess elements from the back or by appending clones of `value` to the back.",64,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",65,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"fold","","",65,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","","",65,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",65,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"is_empty","","",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"fold","","",66,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",66,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"is_empty","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",67,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"next_back","","",67,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",68,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"eq","","",64,null],[11,"partial_cmp","","",64,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",64,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",64,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",64,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",64,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",64,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the `VecDeque` into a front-to-back iterator yielding elements by value.",64,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",64,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"extend","","",64,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",64,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","alloc::vec","",58,{"inputs":[{"name":"vecdeque"}],"output":{"name":"self"}}],[11,"fmt","alloc::vec_deque","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"make_place","","",69,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pointer","","",69,null],[11,"finalize","","",69,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"make_place","","",70,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pointer","","",70,null],[11,"finalize","","",70,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"btree_map","alloc","A map based on a B-Tree.",null,null],[3,"BTreeMap","alloc::btree_map","A map based on a B-Tree.",null,null],[3,"Iter","","An iterator over the entries of a `BTreeMap`.",null,null],[3,"IterMut","","A mutable iterator over the entries of a `BTreeMap`.",null,null],[3,"IntoIter","","An owning iterator over the entries of a `BTreeMap`.",null,null],[3,"Keys","","An iterator over the keys of a `BTreeMap`.",null,null],[3,"Values","","An iterator over the values of a `BTreeMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values of a `BTreeMap`.",null,null],[3,"Range","","An iterator over a sub-range of entries in a `BTreeMap`.",null,null],[3,"RangeMut","","A mutable iterator over a sub-range of entries in a `BTreeMap`.",null,null],[3,"VacantEntry","","A view into a vacant entry in a `BTreeMap`. It is part of the [`Entry`] enum.",null,null],[3,"OccupiedEntry","","A view into an occupied entry in a `BTreeMap`. It is part of the [`Entry`] enum.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant entry.",71,null],[13,"Occupied","","An occupied entry.",71,null],[0,"btree_set","alloc","A set based on a B-Tree.",null,null],[3,"BTreeSet","alloc::btree_set","A set based on a B-Tree.",null,null],[3,"Iter","","An iterator over the items of a `BTreeSet`.",null,null],[3,"IntoIter","","An owning iterator over the items of a `BTreeSet`.",null,null],[3,"Range","","An iterator over a sub-range of items in a `BTreeSet`.",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of `BTreeSet`s.",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric difference of `BTreeSet`s.",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of `BTreeSet`s.",null,null],[3,"Union","","A lazy iterator producing elements in the union of `BTreeSet`s.",null,null],[11,"clone","alloc","",0,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"bool"}}],[14,"vec","","Creates a [`Vec`] containing the arguments.",null,null],[14,"format","","Creates a `String` using interpolation of runtime expressions.",null,null],[11,"from","alloc::vec","",58,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"drop","alloc::btree_map","",72,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"btreemap"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",72,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",72,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",72,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns `true` if the map contains a value for the specified key.",72,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",72,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",72,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",72,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",72,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",72,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",72,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",72,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",72,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"self"}}],[11,"next","","",73,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next_back","","",73,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",73,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",74,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"next_back","","",74,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",74,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_iter","","",72,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drop","","",75,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",75,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"next_back","","",75,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",75,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"next_back","","",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",76,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"next","","",77,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"next_back","","",77,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",77,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",79,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",78,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"next_back","","",78,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",78,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next_back","","",79,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",80,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",80,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_iter","","",72,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",72,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"extend","","",72,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"hash","","",72,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"default","","Creates an empty `BTreeMap<K, V>`.",72,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",72,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",72,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",72,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",72,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",72,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",72,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",72,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",72,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"len","","Returns the number of elements in the map.",72,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the map contains no elements.",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",71,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Returns a reference to this entry's key.",71,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"and_modify","","Provides in-place mutable access to an occupied entry before any potential inserts into the map.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"or_default","","Ensures a value is in the entry by inserting the default value if empty, and returns a mutable reference to the value in the entry.",71,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",81,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"into_key","","Take ownership of the key.",81,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the `VacantEntry`'s key, and returns a mutable reference to it.",81,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the key in the entry.",82,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"remove_entry","","Take ownership of the key and value from the map.",82,null],[11,"get","","Gets a reference to the value in the entry.",82,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",82,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",82,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",82,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",82,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"clone","alloc::btree_set","",83,{"inputs":[{"name":"self"}],"output":{"name":"btreeset"}}],[11,"hash","","",83,null],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",83,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",83,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",83,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",83,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",83,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",83,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new `BTreeSet` with a reasonable choice of B.",83,{"inputs":[],"output":{"name":"btreeset"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",83,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, i.e. the values that are in `self` but not in `other`, in ascending order.",83,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, i.e. the values that are in `self` or in `other` but not in both, in ascending order.",83,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, i.e. the values that are both in `self` and `other`, in ascending order.",83,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, i.e. all the values in `self` or `other`, without duplicates, in ascending order.",83,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"clear","","Clears the set, removing all values.",83,{"inputs":[{"name":"self"}],"output":null}],[11,"contains","","Returns `true` if the set contains a value.",83,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",83,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.",83,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e. `other` contains at least all the values in `self`.",83,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e. `self` contains at least all the values in `other`.",83,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",83,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",83,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",83,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",83,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",83,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",83,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"self"}}],[11,"iter","","Gets an iterator that visits the values in the `BTreeSet` in ascending order.",83,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"len","","Returns the number of elements in the set.",83,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no elements.",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_iter","","",83,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the `BTreeSet`'s contents.",83,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",83,{"inputs":[{"name":"self"},{"name":"iter"}],"output":null}],[11,"extend","","",83,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"default","","Makes an empty `BTreeSet<T>` with a reasonable choice of B.",83,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",84,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next_back","","",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",85,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"difference"}}],[11,"next","","",87,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",88,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"intersection"}}],[11,"next","","",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"next","","",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"cmp","alloc::fmt","",91,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"eq","alloc::str::pattern","",48,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"eq","alloc::str","",92,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"eq","alloc::fmt","",91,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"eq","alloc::str","",93,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"fmt","alloc::slice","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","alloc::str","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","alloc::slice","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","alloc::str","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","alloc::slice","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","alloc::str","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","alloc::fmt","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","alloc::str::pattern","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","alloc::str","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","alloc::str::pattern","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","alloc::str","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","alloc::slice","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","alloc::str","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","alloc::str::pattern","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","alloc::str","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","alloc::slice","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","alloc::str::pattern","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","alloc::slice","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","alloc::fmt","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","alloc::str","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","alloc::str::pattern","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"next_back","alloc::slice","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",104,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",104,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",101,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","alloc::str","",113,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","alloc::slice","",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",98,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",98,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","alloc::str","",117,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",126,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",127,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",99,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next_back","","",106,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",110,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","alloc::slice","",94,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","alloc::str","",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",108,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"rfind","","",108,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"next_back","alloc::slice","",124,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","alloc::str","",97,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",96,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","alloc::slice","",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","alloc::str","",109,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"as_ref","alloc::slice","",98,null],[11,"write_str","alloc::fmt","",129,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","",129,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","",129,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"next","alloc::str","",97,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","alloc::slice","",101,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"count","","",101,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",101,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",101,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","alloc::str","",113,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",96,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",96,null],[11,"next","alloc::slice","",121,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"next","alloc::str","",106,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",99,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"count","","",99,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",99,null],[11,"last","","",99,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next","","",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","alloc::slice","",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"next","alloc::str","",110,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",107,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","alloc::slice","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"count","","",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",98,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_fold","","",98,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",98,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"position","","",98,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","",98,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","","",120,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",120,null],[11,"next","","",123,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",123,null],[11,"next","alloc::str","",108,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"size_hint","","",108,null],[11,"count","","",108,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",108,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"all","","",108,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",108,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",108,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","",108,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","",108,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","alloc::slice","",94,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"next","","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"count","","",104,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",104,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_fold","","",104,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",104,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"position","","",104,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","",104,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","","",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",112,null],[11,"count","","",112,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",112,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",122,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"next","alloc::str","",127,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",109,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","alloc::slice","",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next","","",124,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"next","alloc::str","",117,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",111,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",126,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",126,null],[11,"next","alloc::slice","",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",118,null],[11,"count","","",118,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",118,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","alloc::str","",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",114,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",114,null],[11,"last","","",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","alloc::slice","",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"count","","",102,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",102,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"count","","",100,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",100,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","alloc::str","",108,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","alloc::slice","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","alloc::fmt","",91,null],[11,"next_back","alloc::str::pattern","",128,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",128,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",128,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",119,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",119,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",115,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",105,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","alloc::fmt","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","alloc::str","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","alloc::fmt","",91,{"inputs":[],"output":{"name":"error"}}],[11,"haystack","alloc::str::pattern","",105,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",105,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",128,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",128,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",128,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",128,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",119,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",119,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",119,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",115,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",115,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","alloc::slice","",95,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"clone","alloc::fmt","",91,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","alloc::str","",93,{"inputs":[{"name":"self"}],"output":{"name":"parseboolerror"}}],[11,"clone","alloc::str::pattern","",115,{"inputs":[{"name":"self"}],"output":{"name":"charslicesearcher"}}],[11,"clone","alloc::str","",127,{"inputs":[{"name":"self"}],"output":{"name":"matches"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"rsplitn"}}],[11,"clone","alloc::slice","",112,{"inputs":[{"name":"self"}],"output":{"name":"windows"}}],[11,"clone","alloc::str","",107,{"inputs":[{"name":"self"}],"output":{"name":"splitn"}}],[11,"clone","alloc::slice","",103,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"chunks"}}],[11,"clone","alloc::str","",117,{"inputs":[{"name":"self"}],"output":{"name":"matchindices"}}],[11,"clone","alloc::str::pattern","",128,{"inputs":[{"name":"self"}],"output":{"name":"charpredicatesearcher"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"strsearcher"}}],[11,"clone","alloc::str","",106,{"inputs":[{"name":"self"}],"output":{"name":"rsplitterminator"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone","alloc::slice","",98,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","alloc::str","",110,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"clone","alloc::fmt","",125,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"clone","alloc::str","",113,{"inputs":[{"name":"self"}],"output":{"name":"splitterminator"}}],[11,"clone","alloc::slice","",118,{"inputs":[{"name":"self"}],"output":{"name":"exactchunks"}}],[11,"clone","alloc::str::pattern","",105,{"inputs":[{"name":"self"}],"output":{"name":"charsearcher"}}],[11,"clone","alloc::str","",109,{"inputs":[{"name":"self"}],"output":{"name":"rmatches"}}],[11,"clone","alloc::str::pattern","",48,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"clone","alloc::str","",114,{"inputs":[{"name":"self"}],"output":{"name":"charindices"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"rmatchindices"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"linesany"}}],[11,"partial_cmp","alloc::fmt","",91,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"next_back","alloc::str","",130,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"next","","",130,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"pad_integral","alloc::fmt","Performs the correct padding for an integer which has already been emitted into a str. The str should not contain the sign for the integer, that will be added by this method.",129,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:",129,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this formatter.",129,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",129,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"flags","","Flags for formatting",129,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",129,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",129,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",129,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",129,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a [`DebugStruct`] builder designed to assist with creation of [`fmt::Debug`] implementations for structs.",129,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of `fmt::Debug` implementations for tuple structs.",129,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of `fmt::Debug` implementations for list-like structures.",129,{"inputs":[{"name":"self"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of `fmt::Debug` implementations for set-like structures.",129,{"inputs":[{"name":"self"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of `fmt::Debug` implementations for map-like structures.",129,{"inputs":[{"name":"self"}],"output":{"name":"debugmap"}}],[11,"entry","","Adds a new entry to the list output.",131,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",131,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",131,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",132,{"inputs":[{"name":"self"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",132,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",132,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"entry","","Adds a new entry to the set output.",133,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",133,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",133,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",134,{"inputs":[{"name":"self"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",134,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",135,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",135,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"as_slice","alloc::slice","View the underlying data as a subslice of the original data.",98,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",104,null],[11,"borrow","alloc::vec","",58,null],[11,"borrow_mut","","",58,null],[11,"valid_up_to","alloc::str","Returns the index in the given string up to which valid UTF-8 was verified.",92,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"error_len","","Provide more information about the failure:",92,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",99,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",114,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"borrow","alloc::string","",53,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","alloc::vec","",58,{"inputs":[{"name":"string"}],"output":{"generics":["u8"],"name":"vec"}}]],"paths":[[4,"Bound"],[3,"Excess"],[4,"AllocErr"],[8,"Alloc"],[3,"Layout"],[3,"CannotReallocInPlace"],[3,"Heap"],[8,"FnBox"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"Weak"],[3,"Arc"],[3,"Rc"],[3,"Weak"],[3,"RawVec"],[3,"PeekMut"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BinaryHeapPlace"],[8,"Borrow"],[8,"BorrowMut"],[4,"Cow"],[8,"ToOwned"],[8,"Write"],[8,"Octal"],[8,"Binary"],[8,"Display"],[8,"Debug"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"LinkedList"],[3,"DrainFilter"],[3,"FrontPlace"],[3,"BackPlace"],[8,"RangeArgument"],[8,"SliceIndex"],[8,"SliceConcatExt"],[8,"FromStr"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"EncodeUtf16"],[8,"ToString"],[3,"String"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"Vec"],[3,"IntoIter"],[3,"Drain"],[3,"PlaceBack"],[3,"Splice"],[3,"DrainFilter"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"PlaceBack"],[3,"PlaceFront"],[4,"Entry"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Range"],[3,"RangeMut"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"Error"],[3,"Utf8Error"],[3,"ParseBoolError"],[3,"SplitMut"],[3,"RSplit"],[3,"Lines"],[3,"Split"],[3,"Iter"],[3,"Chars"],[3,"ExactChunksMut"],[3,"Chunks"],[3,"ChunksMut"],[3,"Split"],[3,"IterMut"],[3,"CharSearcher"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"Bytes"],[3,"RMatches"],[3,"RSplit"],[3,"RSplitN"],[3,"Windows"],[3,"SplitTerminator"],[3,"CharIndices"],[3,"CharSliceSearcher"],[3,"RMatchIndices"],[3,"MatchIndices"],[3,"ExactChunks"],[3,"StrSearcher"],[3,"SplitNMut"],[3,"SplitN"],[3,"RSplitN"],[3,"RSplitNMut"],[3,"RSplitMut"],[3,"Arguments"],[3,"LinesAny"],[3,"Matches"],[3,"CharPredicateSearcher"],[3,"Formatter"],[3,"SplitWhitespace"],[3,"DebugList"],[3,"DebugMap"],[3,"DebugSet"],[3,"DebugStruct"],[3,"DebugTuple"]]};
searchIndex["core"] = {"doc":"The Rust Core Library","items":[[0,"isize","core","The pointer-sized signed integer type.",null,null],[17,"MIN","core::isize","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i8","core","The 8-bit signed integer type.",null,null],[17,"MIN","core::i8","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i16","core","The 16-bit signed integer type.",null,null],[17,"MIN","core::i16","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i32","core","The 32-bit signed integer type.",null,null],[17,"MIN","core::i32","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i64","core","The 64-bit signed integer type.",null,null],[17,"MIN","core::i64","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i128","core","The 128-bit signed integer type.",null,null],[17,"MIN","core::i128","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"usize","core","The pointer-sized unsigned integer type.",null,null],[17,"MIN","core::usize","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u8","core","The 8-bit unsigned integer type.",null,null],[17,"MIN","core::u8","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u16","core","The 16-bit unsigned integer type.",null,null],[17,"MIN","core::u16","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u32","core","The 32-bit unsigned integer type.",null,null],[17,"MIN","core::u32","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u64","core","The 64-bit unsigned integer type.",null,null],[17,"MIN","core::u64","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u128","core","The 128-bit unsigned integer type.",null,null],[17,"MIN","core::u128","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"f32","core","This module provides constants which are specific to the implementation of the `f32` floating point data type.",null,null],[0,"consts","core::f32","Basic mathematical constants.",null,null],[17,"PI","core::f32::consts","Archimedes' constant (π)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler's number (e)",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[17,"RADIX","core::f32","The radix or base of the internal representation of `f32`.",null,null],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2.",null,null],[17,"DIGITS","","Approximate number of significant digits in base 10.",null,null],[17,"EPSILON","","Difference between `1.0` and the next largest representable number.",null,null],[17,"MIN","","Smallest finite `f32` value.",null,null],[17,"MIN_POSITIVE","","Smallest positive normal `f32` value.",null,null],[17,"MAX","","Largest finite `f32` value.",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 exponent.",null,null],[17,"MAX_EXP","","Maximum possible power of 2 exponent.",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",null,null],[17,"NAN","","Not a Number (NaN).",null,null],[17,"INFINITY","","Infinity (∞).",null,null],[17,"NEG_INFINITY","","Negative infinity (-∞).",null,null],[0,"f64","core","This module provides constants which are specific to the implementation of the `f64` floating point data type.",null,null],[0,"consts","core::f64","Basic mathematical constants.",null,null],[17,"PI","core::f64::consts","Archimedes' constant (π)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler's number (e)",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[17,"RADIX","core::f64","The radix or base of the internal representation of `f64`.",null,null],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2.",null,null],[17,"DIGITS","","Approximate number of significant digits in base 10.",null,null],[17,"EPSILON","","Difference between `1.0` and the next largest representable number.",null,null],[17,"MIN","","Smallest finite `f64` value.",null,null],[17,"MIN_POSITIVE","","Smallest positive normal `f64` value.",null,null],[17,"MAX","","Largest finite `f64` value.",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 exponent.",null,null],[17,"MAX_EXP","","Maximum possible power of 2 exponent.",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",null,null],[17,"NAN","","Not a Number (NaN).",null,null],[17,"INFINITY","","Infinity (∞).",null,null],[17,"NEG_INFINITY","","Negative infinity (-∞).",null,null],[0,"num","core","Numeric traits and functions for the built-in numeric types.",null,null],[3,"Wrapping","core::num","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",0,null],[3,"TryFromIntError","","The error type returned when a checked integral type conversion fails.",null,null],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[4,"FpCategory","","A classification of floating point numbers.",null,null],[13,"Nan","","\"Not a Number\", often obtained by dividing by zero.",1,null],[13,"Infinite","","Positive or negative infinity.",1,null],[13,"Zero","","Positive or negative zero.",1,null],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`).",1,null],[13,"Normal","","A regular floating point number.",1,null],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shl_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr_assign","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"add","","",0,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":null}],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":null}],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":null}],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":null}],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":null}],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":null}],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":null}],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":null}],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":null}],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":null}],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":null}],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":null}],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":null}],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":null}],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":null}],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":null}],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":null}],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":null}],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":null}],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":null}],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":null}],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":null}],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":null}],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":null}],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":null}],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":null}],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":null}],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":null}],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":null}],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":null}],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":null}],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":null}],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":null}],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"rem","","",0,null],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"not","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":null}],[11,"bitxor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitor","","",0,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":null}],[11,"bitor_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"bitand","","",0,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":null}],[11,"bitand_assign","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parsefloaterror"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"tryfrominterror"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"infallible"}],"output":{"name":"tryfrominterror"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"parseinterror"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"prelude","core","The libcore prelude",null,null],[0,"v1","core::prelude","The core prelude",null,null],[0,"intrinsics","core","rustc compiler intrinsics.",null,null],[5,"atomic_cxchg","core::intrinsics","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_acq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Acquire` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_rel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Release` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_acqrel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_relaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Relaxed` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_failacq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_acq_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Acquire` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_acqrel_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchgweak","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_acq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Acquire` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_rel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Release` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_acqrel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_relaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Relaxed` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_failacq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_acq_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Acquire` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_acqrel_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_load","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_acq","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_relaxed","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_rel","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_relaxed","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_acq","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_rel","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_acqrel","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_relaxed","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xadd","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_acq","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_rel","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Release` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_acqrel","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_relaxed","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xsub","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_acq","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_rel","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Release` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_acqrel","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_relaxed","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_and","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_acq","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_rel","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_acqrel","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_relaxed","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_nand","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_acq","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_rel","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_acqrel","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_relaxed","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_or","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_acq","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_rel","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_acqrel","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_relaxed","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_xor","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_acq","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_rel","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_acqrel","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_relaxed","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"prefetch_read_data","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",null,null],[5,"prefetch_write_data","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",null,null],[5,"prefetch_read_instruction","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",null,null],[5,"prefetch_write_instruction","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"rustc_peek","","Magic intrinsic that derives its meaning from attributes attached to the function.",null,null],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable, enabling further optimizations.",null,null],[5,"assume","","Informs the optimizer that a condition is always true. If the condition is false, the behavior is undefined.",null,null],[5,"likely","","Hints to the compiler that branch condition is likely to be true. Returns the value passed to it.",null,null],[5,"unlikely","","Hints to the compiler that branch condition is likely to be false. Returns the value passed to it.",null,null],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,null],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,null],[5,"pref_align_of","","",null,null],[5,"size_of_val","","The size of the referenced value in bytes.",null,null],[5,"min_align_of_val","","",null,null],[5,"type_name","","Gets a static string slice containing the name of a type.",null,null],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This function will return the same value for a type regardless of whichever crate it is invoked in.",null,null],[5,"init","","Creates a value initialized to zero.",null,null],[5,"uninit","","Creates an uninitialized value.",null,null],[5,"transmute","","Reinterprets the bits of a value of one type as another type.",null,null],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop glue; returns `false` if the actual type provided for `T` implements `Copy`.",null,null],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may not overlap.",null,null],[5,"copy","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::<T>()` bytes of memory starting at `dst` to `val`.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`.",null,null],[5,"volatile_load","","Perform a volatile load from the `src` pointer. The stabilized version of this intrinsic is `std::ptr::read_volatile`.",null,null],[5,"volatile_store","","Perform a volatile store to the `dst` pointer. The stabilized version of this intrinsic is `std::ptr::write_volatile`.",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,null],[5,"sqrtf64","","Returns the square root of an `f64`",null,null],[5,"powif32","","Raises an `f32` to an integer power.",null,null],[5,"powif64","","Raises an `f64` to an integer power.",null,null],[5,"sinf32","","Returns the sine of an `f32`.",null,null],[5,"sinf64","","Returns the sine of an `f64`.",null,null],[5,"cosf32","","Returns the cosine of an `f32`.",null,null],[5,"cosf64","","Returns the cosine of an `f64`.",null,null],[5,"powf32","","Raises an `f32` to an `f32` power.",null,null],[5,"powf64","","Raises an `f64` to an `f64` power.",null,null],[5,"expf32","","Returns the exponential of an `f32`.",null,null],[5,"expf64","","Returns the exponential of an `f64`.",null,null],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,null],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,null],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,null],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,null],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,null],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,null],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,null],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,null],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,null],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,null],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,null],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,null],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,null],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,null],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,null],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,null],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",null,null],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",null,null],[5,"truncf32","","Returns the integer part of an `f32`.",null,null],[5,"truncf64","","Returns the integer part of an `f64`.",null,null],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception if the argument is not an integer.",null,null],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception if the argument is not an integer.",null,null],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,null],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,null],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",null,null],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",null,null],[5,"fadd_fast","","Float addition that allows optimizations based on algebraic rules. May assume inputs are finite.",null,null],[5,"fsub_fast","","Float subtraction that allows optimizations based on algebraic rules. May assume inputs are finite.",null,null],[5,"fmul_fast","","Float multiplication that allows optimizations based on algebraic rules. May assume inputs are finite.",null,null],[5,"fdiv_fast","","Float division that allows optimizations based on algebraic rules. May assume inputs are finite.",null,null],[5,"frem_fast","","Float remainder that allows optimizations based on algebraic rules. May assume inputs are finite.",null,null],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,null],[5,"ctlz","","Returns the number of leading unset bits (zeroes) in an integer type `T`.",null,null],[5,"ctlz_nonzero","","Like `ctlz`, but extra-unsafe as it returns `undef` when given an `x` with value `0`.",null,null],[5,"cttz","","Returns the number of trailing unset bits (zeroes) in an integer type `T`.",null,null],[5,"cttz_nonzero","","Like `cttz`, but extra-unsafe as it returns `undef` when given an `x` with value `0`.",null,null],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,null],[5,"add_with_overflow","","Performs checked integer addition. The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_add` method. For example, `std::u32::overflowing_add`",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_sub` method. For example, `std::u32::overflowing_sub`",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_mul` method. For example, `std::u32::overflowing_mul`",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,null],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in undefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,null],[5,"unchecked_shl","","Performs an unchecked left shift, resulting in undefined behavior when y < 0 or y >= N, where N is the width of T in bits.",null,null],[5,"unchecked_shr","","Performs an unchecked right shift, resulting in undefined behavior when y < 0 or y >= N, where N is the width of T in bits.",null,null],[5,"overflowing_add","","Returns (a + b) mod 2N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_add` method. For example, `std::u32::wrapping_add`",null,null],[5,"overflowing_sub","","Returns (a - b) mod 2N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_sub` method. For example, `std::u32::wrapping_sub`",null,null],[5,"overflowing_mul","","Returns (a * b) mod 2N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_mul` method. For example, `std::u32::wrapping_mul`",null,null],[5,"discriminant_value","","Returns the value of the discriminant for the variant in 'v', cast to a `u64`; if `T` has no discriminant, returns 0.",null,null],[5,"try","","Rust's \"try catch\" construct which invokes the function pointer `f` with the data pointer `data`.",null,null],[5,"align_offset","","Computes the byte offset that needs to be applied to `ptr` in order to make it aligned to `align`. If it is not possible to align `ptr`, the implementation returns `usize::max_value()`.",null,null],[5,"nontemporal_store","","Emits a `!nontemporal` store according to LLVM (see their docs). Probably will never become stable.",null,null],[0,"mem","core","Basic functions for dealing with memory.",null,null],[3,"Discriminant","core::mem","Opaque type representing the discriminant of an enum.",null,null],[19,"ManuallyDrop","","A wrapper to inhibit compiler from automatically calling `T`’s destructor.",null,null],[5,"forget","","Leaks a value: takes ownership and \"forgets\" about the value without running its destructor.",null,{"inputs":[{"name":"t"}],"output":null}],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the pointed-to value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"needs_drop","","Returns whether dropping values of type `T` matters.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"zeroed","","Creates a value whose bytes are all zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by pretending to produce a value of type `T`, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swaps the values at two mutable locations, without deinitializing either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":null}],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without deinitializing either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,{"inputs":[{"name":"t"}],"output":null}],[5,"transmute_copy","","Interprets `src` as having type `&U`, and then reads `src` without moving the contained value.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"discriminant","","Returns a value uniquely identifying the enum variant in `v`.",null,{"inputs":[{"name":"t"}],"output":{"name":"discriminant"}}],[5,"unreachable","","Tells LLVM that this point in the code is not reachable, enabling further optimizations.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",5,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Wrap a value to be manually dropped.",6,{"inputs":[{"name":"t"}],"output":{"name":"manuallydrop"}}],[11,"into_inner","","Extract the value from the ManuallyDrop container.",6,{"inputs":[{"name":"manuallydrop"}],"output":{"name":"t"}}],[11,"drop","","Manually drops the contained value.",6,{"inputs":[{"name":"manuallydrop"}],"output":null}],[11,"deref","","",6,null],[11,"deref_mut","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",6,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[0,"nonzero","core","Exposes the NonZero lang item which provides optimization hints.",null,null],[3,"NonZero","core::nonzero","A wrapper type for raw pointers and integers that will never be NULL or 0 that might allow certain optimizations.",null,null],[8,"Zeroable","","Unsafe trait to indicate what types are usable with the NonZero struct",null,null],[10,"is_zero","","Whether this value is zero",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"nonzero"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"nonzero"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"new_unchecked","","Creates an instance of NonZero with the provided value. You must indeed ensure that the value is actually \"non-zero\".",8,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new","","Creates an instance of NonZero with the provided value.",8,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"get","","Gets the inner value.",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",8,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",8,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",8,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"ptr","core","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[3,"Unique","core::ptr","A wrapper around a raw non-null `*mut T` that indicates that the possessor of this wrapper owns the referent. Useful for building abstractions like `Box<T>`, `Vec<T>`, `String`, and `HashMap<K, V>`.",null,null],[3,"NonNull","","`*mut T` but non-zero and covariant.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"null","","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without deinitializing either.",null,null],[5,"swap_nonoverlapping","","Swaps a sequence of values at two mutable locations of the same type.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old value, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"read_unaligned","","Reads the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"write","","Overwrites a memory location with the given value without reading or dropping the old value.",null,null],[5,"write_unaligned","","Overwrites a memory location with the given value without reading or dropping the old value.",null,null],[5,"read_volatile","","Performs a volatile read of the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"write_volatile","","Performs a volatile write of a memory location with the given value without reading or dropping the old value.",null,null],[5,"eq","","Compare raw pointers for equality.",null,null],[6,"Shared","","Previous name of `NonNull`.",null,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Creates a new `Unique` that is dangling, but well-aligned.",9,{"inputs":[],"output":{"name":"self"}}],[11,"new_unchecked","","Creates a new `Unique`.",9,null],[11,"new","","Creates a new `Unique` if `ptr` is non-null.",9,null],[11,"as_ptr","","Acquires the underlying `*mut` pointer.",9,null],[11,"as_ref","","Dereferences the content.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","Mutably dereferences the content.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",9,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"nonnull"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"dangling","","Creates a new `NonNull` that is dangling, but well-aligned.",10,{"inputs":[],"output":{"name":"self"}}],[11,"new_unchecked","","Creates a new `NonNull`.",10,null],[11,"new","","Creates a new `NonNull` if `ptr` is non-null.",10,null],[11,"as_ptr","","Acquires the underlying `*mut` pointer.",10,null],[11,"as_ref","","Dereferences the content.",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","Mutably dereferences the content.",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",10,{"inputs":[{"name":"unique"}],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"marker","core","Primitive traits and types representing basic properties of types.",null,null],[3,"PhantomData","core::marker","Zero-sized type used to mark things that \"act like\" they own a `T`.",null,null],[8,"Send","","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile time.",null,null],[8,"Unsize","","Types that can be \"unsized\" to a dynamically-sized type.",null,null],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",null,null],[8,"Sync","","Types for which it is safe to share references between threads.",null,null],[11,"hash","","",11,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"phantomdata"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"phantomdata"}}],[0,"ops","core","Overloadable operators.",null,null],[3,"Range","core::ops","A (half-open) range bounded inclusively below and exclusively above (`start..end`).",null,null],[12,"start","","The lower bound of the range (inclusive).",12,null],[12,"end","","The upper bound of the range (exclusive).",12,null],[3,"RangeFrom","","A range only bounded inclusively below (`start..`).",null,null],[12,"start","","The lower bound of the range (inclusive).",13,null],[3,"RangeFull","","An unbounded range (`..`).",null,null],[3,"RangeTo","","A range only bounded exclusively above (`..end`).",null,null],[12,"end","","The upper bound of the range (exclusive).",14,null],[3,"RangeInclusive","","An range bounded inclusively below and above (`start..=end`).",null,null],[12,"start","","The lower bound of the range (inclusive).",15,null],[12,"end","","The upper bound of the range (inclusive).",15,null],[3,"RangeToInclusive","","A range only bounded inclusively above (`..=end`).",null,null],[12,"end","","The upper bound of the range (inclusive)",16,null],[4,"GeneratorState","","The result of a generator resumption.",null,null],[13,"Yielded","","The generator suspended with a value.",17,null],[13,"Complete","","The generator completed with a return value.",17,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"ordering"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",17,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"rangefull"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",12,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"rangefrom"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",13,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"rangeto"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",14,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",15,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"rangetoinclusive"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",16,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[8,"Add","","The addition operator `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator.",19,null],[10,"add","","Performs the `+` operation.",19,null],[8,"Sub","","The subtraction operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",20,null],[10,"sub","","Performs the `-` operation.",20,null],[8,"Mul","","The multiplication operator `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator.",21,null],[10,"mul","","Performs the `*` operation.",21,null],[8,"Div","","The division operator `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator.",22,null],[10,"div","","Performs the `/` operation.",22,null],[8,"Rem","","The remainder operator `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator.",23,null],[10,"rem","","Performs the `%` operation.",23,null],[8,"Neg","","The unary negation operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",24,null],[10,"neg","","Performs the unary `-` operation.",24,null],[8,"AddAssign","","The addition assignment operator `+=`.",null,null],[10,"add_assign","","Performs the `+=` operation.",25,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"SubAssign","","The subtraction assignment operator `-=`.",null,null],[10,"sub_assign","","Performs the `-=` operation.",26,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"MulAssign","","The multiplication assignment operator `*=`.",null,null],[10,"mul_assign","","Performs the `*=` operation.",27,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"DivAssign","","The division assignment operator `/=`.",null,null],[10,"div_assign","","Performs the `/=` operation.",28,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"RemAssign","","The remainder assignment operator `%=`.",null,null],[10,"rem_assign","","Performs the `%=` operation.",29,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"Not","","The unary logical negation operator `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator.",30,null],[10,"not","","Performs the unary `!` operation.",30,null],[8,"BitAnd","","The bitwise AND operator `&`.",null,null],[16,"Output","","The resulting type after applying the `&` operator.",31,null],[10,"bitand","","Performs the `&` operation.",31,null],[8,"BitOr","","The bitwise OR operator `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator.",32,null],[10,"bitor","","Performs the `|` operation.",32,null],[8,"BitXor","","The bitwise XOR operator `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator.",33,null],[10,"bitxor","","Performs the `^` operation.",33,null],[8,"Shl","","The left shift operator `<<`.",null,null],[16,"Output","","The resulting type after applying the `<<` operator.",34,null],[10,"shl","","Performs the `<<` operation.",34,null],[8,"Shr","","The right shift operator `>>`.",null,null],[16,"Output","","The resulting type after applying the `>>` operator.",35,null],[10,"shr","","Performs the `>>` operation.",35,null],[8,"BitAndAssign","","The bitwise AND assignment operator `&=`.",null,null],[10,"bitand_assign","","Performs the `&=` operation.",36,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"BitOrAssign","","The bitwise OR assignment operator `|=`.",null,null],[10,"bitor_assign","","Performs the `|=` operation.",37,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"BitXorAssign","","The bitwise XOR assignment operator `^=`.",null,null],[10,"bitxor_assign","","Performs the `^=` operation.",38,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"ShlAssign","","The left shift assignment operator `<<=`.",null,null],[10,"shl_assign","","Performs the `<<=` operation.",39,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"ShrAssign","","The right shift assignment operator `>>=`.",null,null],[10,"shr_assign","","Performs the `>>=` operation.",40,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"Deref","","Used for immutable dereferencing operations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing.",41,null],[10,"deref","","Dereferences the value.",41,null],[8,"DerefMut","","Used for mutable dereferencing operations, like in `*v = 1;`.",null,null],[10,"deref_mut","","Mutably dereferences the value.",42,null],[8,"Drop","","Used to run some code when a value goes out of scope. This is sometimes called a 'destructor'.",null,null],[10,"drop","","Executes the destructor for this type.",43,{"inputs":[{"name":"self"}],"output":null}],[8,"Fn","","The version of the call operator that takes an immutable receiver.",null,null],[10,"call","","Performs the call operation.",44,null],[8,"FnMut","","The version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","Performs the call operation.",45,null],[8,"FnOnce","","The version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",46,null],[10,"call_once","","Performs the call operation.",46,null],[8,"Index","","Used for indexing operations (`container[index]`) in immutable contexts.",null,null],[16,"Output","","The returned type after indexing.",47,null],[10,"index","","Performs the indexing (`container[index]`) operation.",47,null],[8,"IndexMut","","Used for indexing operations (`container[index]`) in mutable contexts.",null,null],[10,"index_mut","","Performs the mutable indexing (`container[index]`) operation.",48,null],[8,"Try","","A trait for customizing the behavior of the `?` operator.",null,null],[16,"Ok","","The type of this value when viewed as successful.",49,null],[16,"Error","","The type of this value when viewed as failed.",49,null],[10,"into_result","","Applies the \"?\" operator. A return of `Ok(t)` means that the execution should continue normally, and the result of `?` is the value `t`. A return of `Err(e)` means that execution should branch to the innermost enclosing `catch`, or return from the function.",49,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"from_error","","Wrap an error value to construct the composite result. For example, `Result::Err(x)` and `Result::from_error(x)` are equivalent.",49,null],[10,"from_ok","","Wrap an OK value to construct the composite result. For example, `Result::Ok(x)` and `Result::from_ok(x)` are equivalent.",49,null],[8,"Generator","","The trait implemented by builtin generator types.",null,null],[16,"Yield","","The type of value this generator yields.",50,null],[16,"Return","","The type of value this generator returns.",50,null],[10,"resume","","Resumes the execution of this generator.",50,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[8,"Place","","Both `PLACE <- EXPR` and `box EXPR` desugar into expressions that allocate an intermediate \"place\" that holds uninitialized state.  The desugaring evaluates EXPR, and writes the result at the address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written. Note that the data at this address is generally uninitialized, and thus one should use `ptr::write` for initializing it.",51,null],[8,"Placer","","Interface to implementations of  `PLACE <- EXPR`.",null,null],[16,"Place","","`Place` is the intermediate agent guarding the uninitialized state for `Data`.",52,null],[10,"make_place","","Creates a fresh place from `self`.",52,null],[8,"InPlace","","Specialization of `Place` trait supporting `PLACE <- EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `PLACE <- EXPR`",53,null],[10,"finalize","","Converts self into the final value, shifting deallocation/cleanup responsibilities (if any remain), over to the returned instance of `Owner` and forgetting self.",53,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",54,null],[16,"Place","","The place that will negotiate the storage of the data.",54,null],[10,"finalize","","Converts filled place into final owning value, shifting deallocation/cleanup responsibilities (if any remain), over to returned instance of `Self` and forgetting `filled`.",54,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",55,{"inputs":[],"output":{"name":"self"}}],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one, where unsizing can be performed on the pointee.",null,null],[0,"cmp","core","Functionality for ordering and comparison.",null,null],[3,"Reverse","core::cmp","A helper struct for reverse ordering.",null,null],[12,"0","","",56,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",57,null],[13,"Equal","","An ordering where a compared value is equal [to another].",57,null],[13,"Greater","","An ordering where a compared value is greater [than another].",57,null],[5,"min","","Compares and returns the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compares and returns the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"PartialEq","","Trait for equality comparisons which are partial equivalence relations.",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",58,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",58,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are equivalence relations.",null,null],[8,"Ord","","Trait for types that form a total order.",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",59,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"max","","Compares and returns the maximum of two values.",59,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"min","","Compares and returns the minimum of two values.",59,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",60,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",60,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator.",60,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",60,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator.",60,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",57,null],[11,"reverse","","Reverses the `Ordering`.",57,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"then","","Chains two orderings.",57,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"then_with","","Chains the ordering with the given function.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"ordering"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",56,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",56,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",56,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",56,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",56,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"ordering"}}],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"generics":["ordering"],"name":"option"}}],[0,"clone","core","The `Clone` trait for types that cannot be 'implicitly copied'.",null,null],[8,"Clone","core::clone","A common trait for the ability to explicitly duplicate an object.",null,null],[10,"clone","","Returns a copy of the value.",61,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",61,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[0,"default","core","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","core::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",62,{"inputs":[],"output":{"name":"self"}}],[0,"convert","core","Traits for conversions between types.",null,null],[4,"Infallible","core::convert","A type used as the error type for implementations of fallible conversion traits in cases where conversions cannot actually fail.",null,null],[8,"AsRef","","A cheap reference-to-reference conversion. Used to convert a value to a reference value within generic code.",null,null],[10,"as_ref","","Performs the conversion.",63,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",64,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive. The reciprocal of [`From`][From].",null,null],[10,"into","","Performs the conversion.",65,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"From","","Simple and safe type conversions in to `Self`. It is the reciprocal of `Into`.",null,null],[10,"from","","Performs the conversion.",66,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"TryInto","","An attempted conversion that consumes `self`, which may or may not be expensive.",null,null],[16,"Error","","The type returned in the event of a conversion error.",67,null],[10,"try_into","","Performs the conversion.",67,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",null,null],[16,"Error","","The type returned in the event of a conversion error.",68,null],[10,"try_from","","Performs the conversion.",68,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"infallible"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",69,null],[11,"cmp","","",69,{"inputs":[{"name":"self"},{"name":"infallible"}],"output":{"name":"ordering"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"infallible"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",69,{"inputs":[{"name":"self"},{"name":"infallible"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"borrow","core","A module for working with borrowed data.",null,null],[8,"Borrow","core::borrow","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",70,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",71,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[0,"any","core","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection.",null,null],[3,"TypeId","core::any","A `TypeId` represents a globally unique identifier for a type.",null,null],[8,"Any","","A type to emulate dynamic typing.",null,null],[10,"get_type_id","","Gets the `TypeId` of `self`.",72,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns `true` if the boxed type is the same as `T`.",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",72,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",72,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",72,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",72,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",73,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",73,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"le","","",73,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"gt","","",73,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ge","","",73,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"cmp","","",73,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"ordering"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",73,null],[11,"of","","Returns the `TypeId` of the type this generic function has been instantiated with.",73,{"inputs":[],"output":{"name":"typeid"}}],[0,"array","core","Implementations of things like `Eq` for fixed-length arrays up to a certain length. Eventually we should able to generalize to all lengths.",null,null],[3,"TryFromSliceError","core::array","The error type returned when a conversion from a slice to an array fails.",null,null],[8,"FixedSizeArray","","Utility trait implemented only on arrays of fixed size",null,null],[10,"as_slice","","Converts the array to immutable slice",74,null],[10,"as_mut_slice","","Converts the array to mutable slice",74,null],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"tryfromsliceerror"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"sync","core","Synchronization primitives",null,null],[0,"atomic","core::sync","Atomic types",null,null],[3,"AtomicBool","core::sync::atomic","A boolean type which can be safely shared between threads.",null,null],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads.",null,null],[3,"AtomicI8","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicU8","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicI16","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicU16","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicI32","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicU32","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicI64","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicU64","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicIsize","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicUsize","","An integer type which can be safely shared between threads.",null,null],[4,"Ordering","","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations.",76,null],[13,"Release","","When coupled with a store, all previous writes become visible to the other threads that perform a load with [`Acquire`] ordering on the same value.",76,null],[13,"Acquire","","When coupled with a load, all subsequent loads will see data written before a store with [`Release`] ordering on the same value in other threads.",76,null],[13,"AcqRel","","When coupled with a load, uses [`Acquire`] ordering, and with a store [`Release`] ordering.",76,null],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all sequentially consistent operations in the same order.",76,null],[5,"spin_loop_hint","","Save power or switch hyperthreads in a busy-wait spin-loop.",null,{"inputs":[],"output":null}],[5,"fence","","An atomic fence.",null,{"inputs":[{"name":"ordering"}],"output":null}],[5,"compiler_fence","","A compiler memory fence.",null,{"inputs":[{"name":"ordering"}],"output":null}],[17,"ATOMIC_BOOL_INIT","","An [`AtomicBool`] initialized to `false`.",null,null],[17,"ATOMIC_I8_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_U8_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_I16_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_U16_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_I32_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_U32_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_I64_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_U64_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_ISIZE_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_USIZE_INIT","","An atomic integer initialized to `0`.",null,null],[11,"default","","Creates an `AtomicBool` initialized to `false`.",77,{"inputs":[],"output":{"name":"self"}}],[11,"default","","Creates a null `AtomicPtr<T>`.",78,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `AtomicBool`.",77,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"get_mut","","Returns a mutable reference to the underlying [`bool`].",77,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",77,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"load","","Loads a value from the bool.",77,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",77,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the bool, returning the previous value.",77,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the [`bool`] if the current value is the same as the `current` value.",77,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the [`bool`] if the current value is the same as the `current` value.",77,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["bool","bool"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the [`bool`] if the current value is the same as the `current` value.",77,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["bool","bool"],"name":"result"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",77,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",77,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",77,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",77,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicPtr`.",78,null],[11,"get_mut","","Returns a mutable reference to the underlying pointer.",78,null],[11,"into_inner","","Consumes the atomic and returns the contained value.",78,null],[11,"load","","Loads a value from the pointer.",78,null],[11,"store","","Stores a value into the pointer.",78,null],[11,"swap","","Stores a value into the pointer, returning the previous value.",78,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",78,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",78,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",78,null],[11,"from","","",77,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"from","","",78,null],[11,"default","","",79,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",79,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",79,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",79,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",79,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"load","","Loads a value from the atomic integer.",79,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"store","","Stores a value into the atomic integer.",79,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",79,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",79,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",79,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["i8","i8"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",79,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["i8","i8"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",79,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",79,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",79,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",79,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",79,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"default","","",80,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",80,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",80,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",80,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",80,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"load","","Loads a value from the atomic integer.",80,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"store","","Stores a value into the atomic integer.",80,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",80,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",80,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",80,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["u8","u8"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",80,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["u8","u8"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",80,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",80,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",80,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",80,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",80,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"default","","",81,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",81,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",81,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",81,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",81,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"load","","Loads a value from the atomic integer.",81,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"store","","Stores a value into the atomic integer.",81,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",81,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",81,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",81,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["i16","i16"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",81,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["i16","i16"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",81,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",81,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",81,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",81,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",81,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"default","","",82,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",82,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",82,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",82,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",82,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"load","","Loads a value from the atomic integer.",82,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"store","","Stores a value into the atomic integer.",82,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",82,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",82,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",82,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["u16","u16"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",82,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["u16","u16"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",82,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",82,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",82,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",82,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",82,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"default","","",83,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",83,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",83,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",83,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",83,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"load","","Loads a value from the atomic integer.",83,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"store","","Stores a value into the atomic integer.",83,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",83,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",83,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",83,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["i32","i32"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",83,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["i32","i32"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",83,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",83,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",83,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",83,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",83,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"default","","",84,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",84,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",84,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",84,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",84,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"load","","Loads a value from the atomic integer.",84,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"store","","Stores a value into the atomic integer.",84,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",84,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",84,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",84,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["u32","u32"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",84,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["u32","u32"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",84,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",84,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",84,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",84,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",84,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"default","","",85,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",85,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",85,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",85,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",85,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"load","","Loads a value from the atomic integer.",85,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"store","","Stores a value into the atomic integer.",85,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",85,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",85,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",85,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["i64","i64"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",85,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["i64","i64"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",85,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",85,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",85,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",85,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",85,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"default","","",86,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",86,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",86,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",86,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",86,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"load","","Loads a value from the atomic integer.",86,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"store","","Stores a value into the atomic integer.",86,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",86,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",86,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",86,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["u64","u64"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",86,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["u64","u64"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",86,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",86,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",86,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",86,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",86,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"default","","",87,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",87,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",87,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",87,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",87,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"load","","Loads a value from the atomic integer.",87,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the atomic integer.",87,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",87,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",87,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",87,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["isize","isize"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",87,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["isize","isize"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",87,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",87,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",87,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",87,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",87,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"default","","",88,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",88,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",88,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",88,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",88,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"load","","Loads a value from the atomic integer.",88,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the atomic integer.",88,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",88,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",88,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",88,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["usize","usize"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",88,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["usize","usize"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",88,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",88,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",88,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",88,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",88,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"cell","core","Shareable mutable containers.",null,null],[3,"Cell","core::cell","A mutable memory location.",null,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules",null,null],[3,"BorrowError","","An error returned by `RefCell::try_borrow`.",null,null],[3,"BorrowMutError","","An error returned by `RefCell::try_borrow_mut`.",null,null],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box. A wrapper type for an immutably borrowed value from a `RefCell<T>`.",null,null],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell<T>`.",null,null],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",null,null],[11,"get","","Returns a copy of the contained value.",89,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"cell"}}],[11,"default","","Creates a `Cell<T>`, with the `Default` value for T.",89,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",89,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",89,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"le","","",89,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"gt","","",89,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"ge","","",89,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"cmp","","",89,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"ordering"}}],[11,"from","","",89,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"new","","Creates a new `Cell` containing the given value.",89,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",89,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",89,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",89,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"swap","","Swaps the values of two Cells. Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.",89,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"replace","","Replaces the contained value, and returns it.",89,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"into_inner","","Unwraps the value.",89,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"take","","Takes the value of the cell, leaving `Default::default()` in its place.",89,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `RefCell` containing `value`.",92,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",92,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"replace","","Replaces the wrapped value with a new one, returning the old value, without deinitializing either one.",92,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace_with","","Replaces the wrapped value with a new one computed from `f`, returning the old value, without deinitializing either one.",92,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"swap","","Swaps the wrapped value of `self` with the wrapped value of `other`, without deinitializing either one.",92,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"borrow","","Immutably borrows the wrapped value.",92,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"try_borrow","","Immutably borrows the wrapped value, returning an error if the value is currently mutably borrowed.",92,{"inputs":[{"name":"self"}],"output":{"generics":["ref","borrowerror"],"name":"result"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",92,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[11,"try_borrow_mut","","Mutably borrows the wrapped value, returning an error if the value is currently borrowed.",92,{"inputs":[{"name":"self"}],"output":{"generics":["refmut","borrowmuterror"],"name":"result"}}],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",92,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",92,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"refcell"}}],[11,"default","","Creates a `RefCell<T>`, with the `Default` value for T.",92,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",92,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",92,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"le","","",92,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"gt","","",92,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"ge","","",92,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"cmp","","",92,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"ordering"}}],[11,"from","","",92,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"deref","","",93,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",93,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",93,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum variant.",94,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"deref","","",94,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",94,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified value.",95,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",95,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",95,null],[11,"default","","Creates an `UnsafeCell`, with the `Default` value for T.",95,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"from","","",95,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[0,"char","core","Character manipulation.",null,null],[3,"ParseCharError","core::char","An error which can be returned when parsing a char.",null,null],[3,"CharTryFromError","","The error type returned when a conversion from u32 to char fails.",null,null],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode escape of a character, as `char`s.",null,null],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"EscapeDebug","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"DecodeUtf8","","An iterator over an iterator of bytes of the characters the bytes represent as UTF-8",null,null],[3,"InvalidSequence","","`<DecodeUtf8 as Iterator>::next` returns this for an invalid input sequence.",null,null],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"generics":["char"],"name":"option"}}],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"generics":["char"],"name":"option"}}],[5,"decode_utf8","","Decodes an `Iterator` of bytes as UTF-8.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf8"}}],[17,"MAX","","The highest valid code point a `char` can have.",null,null],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"parsecharerror"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"chartryfromerror"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"chartryfromerror"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"self"},{"name":"chartryfromerror"}],"output":{"name":"bool"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"escapeunicode"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",98,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"size_hint","","",98,null],[11,"count","","",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",98,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"len","","",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"escapedefault"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",99,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"size_hint","","",99,null],[11,"count","","",99,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",99,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["char"],"name":"option"}}],[11,"last","","",99,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"len","","",99,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"escapedebug"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",100,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"size_hint","","",100,null],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf8"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"invalidsequence"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"invalidsequence"}],"output":{"name":"bool"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",101,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[0,"panicking","core","Panic support for libcore",null,null],[5,"panic","core::panicking","",null,null],[5,"panic_fmt","","",null,null],[0,"iter","core","Composable external iteration.",null,null],[3,"Repeat","core::iter","An iterator that repeats an element endlessly.",null,null],[3,"Empty","","An iterator that yields nothing.",null,null],[3,"Once","","An iterator that yields an element exactly once.",null,null],[3,"Rev","","A double-ended iterator with the direction inverted.",null,null],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",null,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[3,"StepBy","","An iterator for stepping iterators by a custom amount.",null,null],[3,"Chain","","An iterator that strings two iterators together.",null,null],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",null,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",null,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",null,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next element.",null,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",null,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",null,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[3,"Scan","","An iterator to maintain state while iterating another iterator.",null,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements of the produced iterators.",null,null],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator yields `None` once.",null,null],[3,"Inspect","","An iterator that calls a function with a reference to each element before yielding it.",null,null],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[11,"next","core::ops","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"nth","","",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"nth","","",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"nth","","",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","core::iter","",103,{"inputs":[{"name":"self"}],"output":{"name":"repeat"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next_back","","",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next_back","","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",104,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"empty"}}],[11,"default","","",104,{"inputs":[],"output":{"name":"empty"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"once"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"next_back","","",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",105,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"sum","core::num","",0,{"inputs":[{"name":"i"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"sum","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"product","","",0,{"inputs":[{"name":"i"}],"output":{"generics":["usize"],"name":"wrapping"}}],[8,"Iterator","core::iter","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",106,null],[10,"next","","Advances the iterator and returns the next value.",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",106,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",106,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","Returns the `n`th element of the iterator.",106,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"step_by","","Creates an iterator starting at the same point, but stepping by the given amount at each iteration.",106,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stepby"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",106,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",106,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each element.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"for_each","","Calls a closure on each element of an iterator.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"filter","","Creates an iterator which uses a closure to determine if an element should be yielded.",106,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as the next value.",106,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of the iterator without consuming it.",106,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a predicate.",106,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",106,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",106,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",106,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold`] that holds internal state and produces a new iterator.",106,{"inputs":[{"name":"self"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first [`None`].",106,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",106,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",106,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",106,null],[11,"try_fold","","An iterator method that applies a function as long as it returns successfully, producing a single, final value.",106,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","An iterator method that applies a function, producing a single, final value.",106,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",106,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",106,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its index.",106,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the specified function.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by","","Returns the element that gives the maximum value with respect to the specified comparison function.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the specified function.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by","","Returns the element that gives the minimum value with respect to the specified comparison function.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator's direction.",106,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",106,null],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",106,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",106,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",106,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",106,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",106,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",106,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of another.",106,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of another.",106,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically less than those of another.",106,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically less or equal to those of another.",106,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically greater than those of another.",106,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically greater than or equal to those of another.",106,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"steps_between","","Returns the number of steps between two step objects. The count is inclusive of `start` and exclusive of `end`.",107,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[10,"replace_one","","Replaces this step with `1`, returning itself",107,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"replace_zero","","Replaces this step with `0`, returning itself",107,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"add_one","","Adds one to this step, returning the result",107,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sub_one","","Subtracts one to this step, returning the result",107,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"add_usize","","Add an usize, returning None on overflow",107,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",108,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",109,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",109,null],[10,"into_iter","","Creates an iterator from a value.",109,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","Removes and returns an element from the end of the iterator.",110,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","This is the reverse version of [`try_fold()`]: it takes elements starting from the back of the iterator.",110,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","An iterator method that reduces the iterator's elements to a single, final value, starting from the back.",110,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"rfind","","Searches for an element of an iterator from the right that satisfies a predicate.",110,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",111,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",112,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the iterator is empty.",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Sum","","Trait to represent types that can be created by summing up an iterator.",null,null],[10,"sum","","Method which takes an iterator and generates `Self` from the elements by \"summing up\" the items.",113,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[8,"Product","","Trait to represent types that can be created by multiplying elements of an iterator.",null,null],[10,"product","","Method which takes an iterator and generates `Self` from the elements by multiplying the items.",114,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[8,"FusedIterator","","An iterator that always continues to yield `None` when exhausted.",null,null],[8,"TrustedLen","","An iterator that reports an accurate length using size_hint.",null,null],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"try_fold","","",115,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",115,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"find","","",115,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","",115,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",115,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",115,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"rfind","","",115,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"len","","",115,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",116,null],[11,"try_fold","","",116,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",116,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","","",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",116,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",116,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"len","","",116,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",116,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",117,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",117,null],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"stepby"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",118,null],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"chain"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",119,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",119,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"try_fold","","",119,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",119,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"nth","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"find","","",119,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"last","","",119,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",119,null],[11,"next_back","","",119,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",119,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",119,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",120,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",120,null],[11,"next_back","","",120,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",121,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"try_fold","","",121,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"r"}}],[11,"fold","","",121,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next_back","","",121,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",121,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"r"}}],[11,"rfold","","",121,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"len","","",121,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",121,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",122,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"count","","",122,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"try_fold","","",122,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",122,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",122,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",122,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",122,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"filtermap"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",123,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",123,null],[11,"try_fold","","",123,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",123,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",123,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",123,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",123,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","Overflow Behavior",124,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"nth","","",124,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",124,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"try_fold","","",124,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",124,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",124,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",124,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",124,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"len","","",124,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",124,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",125,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",125,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",125,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",125,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",125,null],[11,"try_fold","","",125,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",125,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",125,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"skipwhile"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",126,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",126,null],[11,"try_fold","","",126,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",126,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"takewhile"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",127,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",127,null],[11,"try_fold","","",127,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"skip"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",128,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",128,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",128,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",128,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",128,null],[11,"try_fold","","",128,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",128,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",128,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",128,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"take"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",129,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",129,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",129,null],[11,"try_fold","","",129,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"scan"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",130,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",130,null],[11,"try_fold","","",130,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"flatmap"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",131,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",131,null],[11,"try_fold","","",131,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",131,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",131,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",131,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",131,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",132,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",132,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",132,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",132,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",132,null],[11,"try_fold","","",132,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",132,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",132,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",132,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",132,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","","",132,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",132,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",132,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",132,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",132,null],[11,"try_fold","","",132,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",132,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",132,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",132,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",132,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"len","","",132,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"inspect"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",133,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",133,null],[11,"try_fold","","",133,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",133,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",133,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",133,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",133,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"len","","",133,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",133,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"option","core","Optional values.",null,null],[3,"Iter","core::option","An iterator over a reference to the [`Some`] variant of an [`Option`].",null,null],[3,"IterMut","","An iterator over a mutable reference to the [`Some`] variant of an [`Option`].",null,null],[3,"IntoIter","","An iterator over the value in [`Some`] variant of an [`Option`].",null,null],[3,"NoneError","","The error type that results from applying the try operator (`?`) to a `None` value. If you wish to allow `x?` (where `x` is an `Option<T>`) to be converted into your error type, you can implement `impl From<NoneError>` for `YourErrorType`. In that case, `x?` within a function that returns `Result<_, YourErrorType>` will translate a `None` value into an `Err` result.",null,null],[4,"Option","","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",134,null],[13,"Some","","Some value `T`",134,null],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",134,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",134,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",134,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",134,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",134,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"cmp","","",134,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",134,null],[11,"is_some","","Returns `true` if the option is a [`Some`] value.",134,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a [`None`] value.",134,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",134,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",134,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a [`Some`].",134,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is [`Some(v)`].",134,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",134,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",134,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",134,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any), or returns the provided default (if not).",134,{"inputs":[{"name":"self"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a default (if not).",134,{"inputs":[{"name":"self"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err)`].",134,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err())`].",134,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",134,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",134,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns [`None`] if the option is [`None`], otherwise returns `optb`.",134,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns [`None`] if the option is [`None`], otherwise calls `f` with the wrapped value and returns the result.",134,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"filter","","Returns `None` if the option is `None`, otherwise calls `predicate` with the wrapped value and returns:",134,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"self"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",134,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",134,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"get_or_insert","","Inserts `v` into the option if it is [`None`], then returns a mutable reference to the contained value.",134,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is [`None`], then returns a mutable reference to the contained value.",134,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"take","","Takes the value out of the option, leaving a [`None`] in its place.",134,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",134,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&mut T>` to an `Option<T>` by cloning the contents of the option.",134,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",134,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"transpose","","Transposes an `Option` of a `Result` into a `Result` of an `Option`.",134,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","Returns [`None`].",134,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",134,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"from","","",134,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",135,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",135,null],[11,"next_back","","",135,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",136,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",136,null],[11,"next_back","","",136,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",137,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",137,null],[11,"next_back","","",137,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the [`Iterator`]: if it is [`None`], no further elements are taken, and the [`None`] is returned. Should no [`None`] occur, a container with the values of each `Option` is returned.",134,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"noneerror"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"noneerror"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",138,{"inputs":[{"name":"self"},{"name":"noneerror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",138,{"inputs":[{"name":"self"},{"name":"noneerror"}],"output":{"name":"ordering"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",138,null],[11,"into_result","","",134,{"inputs":[{"name":"self"}],"output":{"generics":["noneerror"],"name":"result"}}],[11,"from_ok","","",134,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_error","","",134,{"inputs":[{"name":"noneerror"}],"output":{"name":"self"}}],[0,"raw","core","Contains struct definitions for the layout of compiler built-in types.",null,null],[3,"TraitObject","core::raw","The representation of a trait object like `&SomeTrait`.",null,null],[12,"data","","",139,null],[12,"vtable","","",139,null],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"traitobject"}}],[0,"result","core","Error handling with the `Result` type.",null,null],[3,"Iter","core::result","An iterator over a reference to the [`Ok`] variant of a [`Result`].",null,null],[3,"IterMut","","An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].",null,null],[3,"IntoIter","","An iterator over the value in a [`Ok`] variant of a [`Result`].",null,null],[4,"Result","","`Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).",null,null],[13,"Ok","","Contains the success value",140,null],[13,"Err","","Contains the error value",140,null],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",140,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",140,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",140,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",140,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",140,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"cmp","","",140,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",140,null],[11,"is_ok","","Returns `true` if the result is [`Ok`].",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_err","","Returns `true` if the result is [`Err`].",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to [`Option<T>`].",140,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to [`Option<E>`].",140,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`.",140,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`.",140,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a contained [`Ok`] value, leaving an [`Err`] value untouched.",140,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained [`Err`] value, leaving an [`Ok`] value untouched.",140,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",140,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",140,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",140,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",140,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",140,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",140,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an [`Ok`]. Else, it returns `optb`.",140,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an [`Ok`]. If the value is an [`Err`] then it calls `op` with its value.",140,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an [`Ok`].",140,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an [`Ok`].",140,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an [`Err`].",140,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"expect_err","","Unwraps a result, yielding the content of an [`Err`].",140,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"e"}}],[11,"unwrap_or_default","","Returns the contained value or a default",140,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"transpose","","Transposes a `Result` of an `Option` into an `Option` of a `Result`.",140,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",140,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",141,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",141,null],[11,"next_back","","",141,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",142,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",142,null],[11,"next_back","","",142,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",143,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",143,null],[11,"next_back","","",143,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, a container with the values of each `Result` is returned.",140,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"into_result","","",140,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_ok","","",140,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_error","","",140,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[0,"slice","core","Slice management and manipulation",null,null],[3,"Iter","core::slice","Immutable slice iterator",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate function.",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`.",null,null],[3,"RSplit","","An iterator over subslices separated by elements that match a predicate function, starting from the end of the slice.",null,null],[3,"RSplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`, starting from the end of the slice.",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time).",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time). When the slice len is not evenly divided by the chunk size, the last slice of the iteration will be the remainder.",null,null],[3,"ExactChunks","","An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time).",null,null],[3,"ExactChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time). When the slice len is not evenly divided by the chunk size, the last up to `chunk_size-1` elements will be omitted.",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable slice is returned.",null,null],[5,"from_ref","","Converts a reference to T into a slice of length 1 (without copying).",null,null],[5,"from_ref_mut","","Converts a reference to T into a slice of length 1 (without copying).",null,null],[0,"memchr","","Pure rust memchr implementation, taken from rust-memchr",null,null],[5,"memchr","core::slice::memchr","Return the first index matching the byte `x` in `text`.",null,null],[5,"memrchr","","Return the last index matching the byte `x` in `text`.",null,null],[8,"SliceExt","core::slice","Extension methods for slices.",null,null],[16,"Item","","",144,null],[10,"split_at","","",144,null],[10,"iter","","",144,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[10,"split","","",144,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"split"}}],[10,"rsplit","","",144,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"rsplit"}}],[10,"splitn","","",144,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitn"}}],[10,"rsplitn","","",144,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitn"}}],[10,"windows","","",144,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"windows"}}],[10,"chunks","","",144,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[10,"exact_chunks","","",144,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"exactchunks"}}],[10,"get","","",144,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[10,"first","","",144,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"split_first","","",144,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"split_last","","",144,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"last","","",144,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_unchecked","","",144,null],[10,"as_ptr","","",144,null],[10,"binary_search","","",144,null],[10,"binary_search_by","","",144,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["usize","usize"],"name":"result"}}],[10,"binary_search_by_key","","",144,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"generics":["usize","usize"],"name":"result"}}],[10,"len","","",144,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",144,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_mut","","",144,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[10,"iter_mut","","",144,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[10,"first_mut","","",144,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"split_first_mut","","",144,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"split_last_mut","","",144,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"last_mut","","",144,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"split_mut","","",144,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"splitmut"}}],[10,"rsplit_mut","","",144,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"rsplitmut"}}],[10,"splitn_mut","","",144,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitnmut"}}],[10,"rsplitn_mut","","",144,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitnmut"}}],[10,"chunks_mut","","",144,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[10,"exact_chunks_mut","","",144,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"exactchunksmut"}}],[10,"swap","","",144,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[10,"split_at_mut","","",144,null],[10,"reverse","","",144,{"inputs":[{"name":"self"}],"output":null}],[10,"get_unchecked_mut","","",144,null],[10,"as_mut_ptr","","",144,null],[10,"contains","","",144,null],[10,"starts_with","","",144,null],[10,"ends_with","","",144,null],[10,"rotate_left","","",144,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"rotate_right","","",144,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"clone_from_slice","","",144,null],[10,"copy_from_slice","","",144,null],[10,"swap_with_slice","","",144,null],[10,"sort_unstable","","",144,{"inputs":[{"name":"self"}],"output":null}],[10,"sort_unstable_by","","",144,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"sort_unstable_by_key","","",144,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[8,"SliceIndex","","A helper trait used for indexing operations.",null,null],[16,"Output","","The output type returned by methods.",145,null],[10,"get","","Returns a shared reference to the output at this location, if in bounds.",145,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[10,"get_mut","","Returns a mutable reference to the output at this location, if in bounds.",145,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[10,"get_unchecked","","Returns a shared reference to the output at this location, without performing any bounds checking.",145,null],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this location, without performing any bounds checking.",145,null],[10,"index","","Returns a shared reference to the output at this location, panicking if out of bounds.",145,null],[10,"index_mut","","Returns a mutable reference to the output at this location, panicking if out of bounds.",145,null],[11,"get","core::ops","",12,null],[11,"get_mut","","",12,null],[11,"get_unchecked","","",12,null],[11,"get_unchecked_mut","","",12,null],[11,"index","","",12,null],[11,"index_mut","","",12,null],[11,"get","","",14,null],[11,"get_mut","","",14,null],[11,"get_unchecked","","",14,null],[11,"get_unchecked_mut","","",14,null],[11,"index","","",14,null],[11,"index_mut","","",14,null],[11,"get","","",13,null],[11,"get_mut","","",13,null],[11,"get_unchecked","","",13,null],[11,"get_unchecked_mut","","",13,null],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"get","","",18,null],[11,"get_mut","","",18,null],[11,"get_unchecked","","",18,null],[11,"get_unchecked_mut","","",18,null],[11,"index","","",18,null],[11,"index_mut","","",18,null],[11,"get","","",15,null],[11,"get_mut","","",15,null],[11,"get_unchecked","","",15,null],[11,"get_unchecked_mut","","",15,null],[11,"index","","",15,null],[11,"index_mut","","",15,null],[11,"get","","",16,null],[11,"get_mut","","",16,null],[11,"get_unchecked","","",16,null],[11,"get_unchecked_mut","","",16,null],[11,"index","","",16,null],[11,"index_mut","","",16,null],[11,"fmt","core::slice","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","View the underlying data as a subslice of the original data.",146,null],[11,"next","","",146,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",146,null],[11,"count","","",146,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",146,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",146,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_fold","","",146,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",146,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"position","","",146,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","",146,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",146,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",146,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",146,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"is_empty","","",146,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"as_ref","","",146,null],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",147,null],[11,"next","","",147,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",147,null],[11,"count","","",147,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",147,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",147,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_fold","","",147,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",147,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"position","","",147,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","",147,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",147,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",147,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",147,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"is_empty","","",147,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"next","","",148,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",148,null],[11,"next_back","","",148,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",149,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",149,null],[11,"next_back","","",149,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",150,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",150,null],[11,"next_back","","",150,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",151,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",151,null],[11,"next_back","","",151,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",152,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",152,null],[11,"next","","",153,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",153,null],[11,"next","","",154,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",154,null],[11,"next","","",155,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",155,null],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"windows"}}],[11,"next","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",156,null],[11,"count","","",156,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",156,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",156,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"chunks"}}],[11,"next","","",157,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",157,null],[11,"count","","",157,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",157,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",157,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",157,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",158,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",158,null],[11,"count","","",158,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",158,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",158,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",158,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"exactchunks"}}],[11,"next","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",159,null],[11,"count","","",159,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",159,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",159,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","",159,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",160,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",160,null],[11,"count","","",160,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",160,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",160,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",160,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","",160,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"str","core","String manipulation",null,null],[3,"ParseBoolError","core::str","An error returned when parsing a `bool` using [`from_str`] fails",null,null],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of [`u8`] as a string.",null,null],[3,"Chars","","An iterator over the [`char`]s of a string slice.",null,null],[3,"CharIndices","","An iterator over the [`char`]s of a string slice, and their positions.",null,null],[3,"Bytes","","An iterator over the bytes of a string slice.",null,null],[3,"Split","","Created with the method [`split`].",null,null],[3,"RSplit","","Created with the method [`rsplit`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",null,null],[3,"SplitN","","Created with the method [`splitn`].",null,null],[3,"RSplitN","","Created with the method [`rsplitn`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",null,null],[3,"Matches","","Created with the method [`matches`].",null,null],[3,"RMatches","","Created with the method [`rmatches`].",null,null],[3,"Lines","","An iterator over the lines of a string, as string slices.",null,null],[3,"LinesAny","","Created with the method [`lines_any`].",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string slice.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8.",null,null],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8; mutable version.",null,null],[5,"next_code_point","","Reads the next code point out of a byte iterator (assuming a UTF-8-like encoding).",null,{"inputs":[{"name":"i"}],"output":{"generics":["u32"],"name":"option"}}],[5,"utf8_char_width","","Given a first byte, determines how many bytes are in this UTF-8 character.",null,{"inputs":[{"name":"u8"}],"output":{"name":"usize"}}],[0,"pattern","","The string Pattern API.",null,null],[3,"CharSearcher","core::str::pattern","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at `haystack[a..b]`.",161,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match of the pattern.",161,null],[13,"Done","","Expresses that every byte of the haystack has been visited, ending the iteration.",161,null],[8,"Pattern","","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",162,null],[10,"into_searcher","","Constructs the associated searcher from `self` and the `haystack` to search in.",162,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",162,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",162,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",162,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlying string to be searched in",163,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",163,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",163,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()` and `next_match()`",163,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",164,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",164,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",164,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.",null,null],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"eq","","",161,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"charsearcher"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"haystack","","",165,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",165,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",165,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"charslicesearcher"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"haystack","","",166,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",166,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",166,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",166,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",166,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",166,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",166,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"charpredicatesearcher"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"haystack","","",167,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",167,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",167,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",167,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",167,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",167,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",167,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"haystack","","",168,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",168,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",168,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get","core::ops","",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",18,null],[11,"get_unchecked_mut","","",18,null],[11,"index","","",18,null],[11,"index_mut","","",18,null],[11,"get","","",12,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",12,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",12,null],[11,"get_unchecked_mut","","",12,null],[11,"index","","",12,null],[11,"index_mut","","",12,null],[11,"get","","",14,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",14,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",14,null],[11,"get_unchecked_mut","","",14,null],[11,"index","","",14,null],[11,"index_mut","","",14,null],[11,"get","","",13,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",13,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",13,null],[11,"get_unchecked_mut","","",13,null],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"get","","",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",15,null],[11,"get_unchecked_mut","","",15,null],[11,"index","","",15,null],[11,"index_mut","","",15,null],[11,"get","","",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",16,null],[11,"get_unchecked_mut","","",16,null],[11,"index","","",16,null],[11,"index_mut","","",16,null],[8,"FromStr","core::str","A trait to abstract the idea of creating a new instance of a type from a string.",null,null],[16,"Err","","The associated error which can be returned from parsing.",169,null],[10,"from_str","","Parses a string `s` to return a value of this type.",169,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"parseboolerror"}}],[11,"eq","","",170,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was verified.",171,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"error_len","","Provide more information about the failure:",171,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",172,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"count","","",172,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",172,null],[11,"last","","",172,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next_back","","",172,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",172,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"charindices"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",173,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",173,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",173,null],[11,"last","","",173,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",173,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",173,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",174,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"size_hint","","",174,null],[11,"count","","",174,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",174,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",174,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"all","","",174,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",174,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",174,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","",174,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","",174,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",174,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"rfind","","",174,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"len","","",174,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",174,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",175,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",176,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next_back","","",175,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",176,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",177,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next_back","","",177,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",179,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",180,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",181,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",182,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",182,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next_back","","",181,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",182,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",183,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",184,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next_back","","",183,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",184,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"fmt","","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",185,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",185,null],[11,"next_back","","",185,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"linesany"}}],[11,"fmt","","",186,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",186,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",186,null],[11,"next_back","","",186,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[0,"hash","core","Generic hashing support.",null,null],[3,"SipHasher","core::hash","An implementation of SipHash 2-4.",null,null],[3,"SipHasher13","","An implementation of SipHash 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash 2-4.",null,null],[3,"BuildHasherDefault","","Used to create a default [`BuildHasher`] instance for types that implement [`Hasher`] and [`Default`].",null,null],[11,"fmt","","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"default","","",187,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"default","","",188,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"fmt","","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"default","","",189,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",189,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",189,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",187,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",187,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",188,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",188,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"write","","",189,null],[11,"finish","","",189,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",187,null],[11,"finish","","",187,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",188,null],[11,"finish","","",188,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[8,"Hash","","A hashable type.",null,null],[10,"hash","","Feeds this value into the given [`Hasher`].",190,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"hash_slice","","Feeds a slice of this type into the given [`Hasher`].",190,null],[8,"Hasher","","A trait for hashing an arbitrary stream of bytes.",null,null],[10,"finish","","Returns the hash value for the values written so far.",191,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"write","","Writes some data into this `Hasher`.",191,null],[11,"write_u8","","Writes a single `u8` into this hasher.",191,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"write_u16","","Writes a single `u16` into this hasher.",191,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"write_u32","","Writes a single `u32` into this hasher.",191,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"write_u64","","Writes a single `u64` into this hasher.",191,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"write_u128","","Writes a single `u128` into this hasher.",191,{"inputs":[{"name":"self"},{"name":"u128"}],"output":null}],[11,"write_usize","","Writes a single `usize` into this hasher.",191,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write_i8","","Writes a single `i8` into this hasher.",191,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"write_i16","","Writes a single `i16` into this hasher.",191,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"write_i32","","Writes a single `i32` into this hasher.",191,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"write_i64","","Writes a single `i64` into this hasher.",191,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"write_i128","","Writes a single `i128` into this hasher.",191,{"inputs":[{"name":"self"},{"name":"i128"}],"output":null}],[11,"write_isize","","Writes a single `isize` into this hasher.",191,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[8,"BuildHasher","","A trait for creating instances of [`Hasher`].",null,null],[16,"Hasher","","Type of the hasher that will be created.",192,null],[10,"build_hasher","","Creates a new hasher.",192,null],[11,"fmt","","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build_hasher","","",193,{"inputs":[{"name":"self"}],"output":{"name":"h"}}],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",193,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[0,"fmt","core","Utilities for formatting and printing strings.",null,null],[3,"DebugStruct","core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",null,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification.",null,null],[4,"Alignment","","Possible alignments returned by `Formatter::align`",null,null],[13,"Left","","Indication that contents should be left-aligned.",194,null],[13,"Right","","Indication that contents should be right-aligned.",194,null],[13,"Center","","Indication that contents should be center-aligned.",194,null],[13,"Unknown","","No alignment was requested.",194,null],[5,"write","","The `write` function takes an output stream, and an `Arguments` struct that can be precompiled with the `format_args!` macro.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",195,{"inputs":[{"name":"self"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",195,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",196,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",196,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the set output.",197,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",197,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",197,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",198,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",198,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",198,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",199,{"inputs":[{"name":"self"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",199,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",199,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[6,"Result","","The type returned by formatter methods.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write succeeded.",200,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a [`char`] into this writer, returning whether the write succeeded.",200,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors of this trait.",200,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[8,"Debug","","`?` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",201,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",202,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Octal","","`o` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Binary","","`b` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerHex","","`x` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperHex","","`X` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",206,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Pointer","","`p` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerExp","","`e` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperExp","","`E` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",210,{"inputs":[],"output":{"name":"error"}}],[11,"hash","","",210,null],[11,"cmp","","",210,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"eq","","",210,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",210,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",211,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"fmt","","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been emitted into a str. The str should not contain the sign for the integer, that will be added by this method.",212,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:",212,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this formatter.",212,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",212,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting",212,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",212,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",212,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",212,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",212,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",212,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",212,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",212,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",212,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a [`DebugStruct`] builder designed to assist with creation of [`fmt::Debug`] implementations for structs.",212,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of `fmt::Debug` implementations for tuple structs.",212,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of `fmt::Debug` implementations for list-like structures.",212,{"inputs":[{"name":"self"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of `fmt::Debug` implementations for set-like structures.",212,{"inputs":[{"name":"self"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of `fmt::Debug` implementations for map-like structures.",212,{"inputs":[{"name":"self"}],"output":{"name":"debugmap"}}],[11,"write_str","","",212,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",212,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",212,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"panic","core","Entry point of thread panic, for details, see std::macros",null,null],[14,"assert","","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"assert_eq","","Asserts that two expressions are equal to each other (using [`PartialEq`]).",null,null],[14,"assert_ne","","Asserts that two expressions are not equal to each other (using [`PartialEq`]).",null,null],[14,"debug_assert","","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"debug_assert_eq","","Asserts that two expressions are equal to each other.",null,null],[14,"debug_assert_ne","","Asserts that two expressions are not equal to each other.",null,null],[14,"try","","Helper macro for reducing boilerplate code for matching `Result` together with converting downstream errors.",null,null],[14,"write","","Write formatted data into a buffer.",null,null],[14,"writeln","","Write formatted data into a buffer, with a newline appended.",null,null],[14,"unreachable","","A utility macro for indicating unreachable code.",null,null],[14,"unimplemented","","A standardized placeholder for marking unfinished code.",null,null],[14,"compile_error","","Unconditionally causes compilation to fail with the given error message when encountered.",null,null],[14,"format_args","","The core macro for formatted string creation & output.",null,null],[14,"env","","Inspect an environment variable at compile time.",null,null],[14,"option_env","","Optionally inspect an environment variable at compile time.",null,null],[14,"concat_idents","","Concatenate identifiers into one identifier.",null,null],[14,"concat","","Concatenates literals into a static string slice.",null,null],[14,"line","","A macro which expands to the line number on which it was invoked.",null,null],[14,"column","","A macro which expands to the column number on which it was invoked.",null,null],[14,"file","","A macro which expands to the file name from which it was invoked.",null,null],[14,"stringify","","A macro which stringifies its arguments.",null,null],[14,"include_str","","Includes a utf8-encoded file as a string.",null,null],[14,"include_bytes","","Includes a file as a reference to a byte array.",null,null],[14,"module_path","","Expands to a string that represents the current module path.",null,null],[14,"cfg","","Boolean evaluation of configuration flags, at compile-time.",null,null],[14,"include","","Parse a file as an expression or an item according to the context.",null,null],[11,"size_hint","core::iter","Returns the bounds on the remaining length of the iterator.",106,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",106,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","Returns the `n`th element of the iterator.",106,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"step_by","","Creates an iterator starting at the same point, but stepping by the given amount at each iteration.",106,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stepby"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",106,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",106,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each element.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"for_each","","Calls a closure on each element of an iterator.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"filter","","Creates an iterator which uses a closure to determine if an element should be yielded.",106,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as the next value.",106,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of the iterator without consuming it.",106,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a predicate.",106,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",106,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",106,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",106,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold`] that holds internal state and produces a new iterator.",106,{"inputs":[{"name":"self"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first [`None`].",106,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",106,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",106,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",106,null],[11,"try_fold","","An iterator method that applies a function as long as it returns successfully, producing a single, final value.",106,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","An iterator method that applies a function, producing a single, final value.",106,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",106,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",106,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its index.",106,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the specified function.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by","","Returns the element that gives the maximum value with respect to the specified comparison function.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the specified function.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by","","Returns the element that gives the minimum value with respect to the specified comparison function.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator's direction.",106,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",106,null],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",106,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",106,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",106,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",106,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",106,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",106,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of another.",106,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of another.",106,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically less than those of another.",106,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically less or equal to those of another.",106,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically greater than those of another.",106,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically greater than or equal to those of another.",106,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"try_rfold","","This is the reverse version of [`try_fold()`]: it takes elements starting from the back of the iterator.",110,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","An iterator method that reduces the iterator's elements to a single, final value, starting from the back.",110,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"rfind","","Searches for an element of an iterator from the right that satisfies a predicate.",110,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"len","","Returns the exact number of times the iterator will iterate.",112,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the iterator is empty.",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sum","core::result","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the sum of all elements is returned.",140,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"product","","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the product of all elements is returned.",140,{"inputs":[{"name":"i"}],"output":{"name":"result"}}]],"paths":[[3,"Wrapping"],[4,"FpCategory"],[3,"ParseFloatError"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"Discriminant"],[19,"ManuallyDrop"],[8,"Zeroable"],[3,"NonZero"],[3,"Unique"],[3,"NonNull"],[3,"PhantomData"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[3,"RangeInclusive"],[3,"RangeToInclusive"],[4,"GeneratorState"],[3,"RangeFull"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Deref"],[8,"DerefMut"],[8,"Drop"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"Index"],[8,"IndexMut"],[8,"Try"],[8,"Generator"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"],[3,"Reverse"],[4,"Ordering"],[8,"PartialEq"],[8,"Ord"],[8,"PartialOrd"],[8,"Clone"],[8,"Default"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"TryInto"],[8,"TryFrom"],[4,"Infallible"],[8,"Borrow"],[8,"BorrowMut"],[8,"Any"],[3,"TypeId"],[8,"FixedSizeArray"],[3,"TryFromSliceError"],[4,"Ordering"],[3,"AtomicBool"],[3,"AtomicPtr"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[3,"BorrowError"],[3,"BorrowMutError"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"ParseCharError"],[3,"CharTryFromError"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EscapeDebug"],[3,"DecodeUtf8"],[3,"InvalidSequence"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[8,"Iterator"],[8,"Step"],[8,"FromIterator"],[8,"IntoIterator"],[8,"DoubleEndedIterator"],[8,"Extend"],[8,"ExactSizeIterator"],[8,"Sum"],[8,"Product"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"StepBy"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"NoneError"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[8,"SliceExt"],[8,"SliceIndex"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"RSplit"],[3,"RSplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"ExactChunks"],[3,"ExactChunksMut"],[4,"SearchStep"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[8,"FromStr"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[8,"Write"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[3,"Error"],[3,"Arguments"],[3,"Formatter"]]};
searchIndex["proc_macro"] = {"doc":"A support library for macro authors when defining new macros.","items":[[3,"Diagnostic","proc_macro","A structure representing a diagnostic message and associated children messages.",null,null],[3,"TokenStream","","The main type provided by this crate, representing an abstract stream of tokens.",null,null],[3,"LexError","","Error returned from `TokenStream::from_str`.",null,null],[3,"Span","","A region of source code, along with macro expansion information.",null,null],[3,"LineColumn","","A line-column pair representing the start or end of a `Span`.",null,null],[12,"line","","The 1-indexed line in the source file on which the span starts or ends (inclusive).",0,null],[12,"column","","The 0-indexed column (in UTF-8 characters) in the source file on which the span starts or ends (inclusive).",0,null],[3,"SourceFile","","The source file of a given `Span`.",null,null],[3,"TokenTree","","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).",null,null],[12,"span","","The `TokenTree`'s span",1,null],[12,"kind","","Description of the `TokenTree`",1,null],[3,"Term","","An interned string.",null,null],[3,"Literal","","A literal character (`'a'`), string (`\"hello\"`), or number (`2.3`).",null,null],[3,"TokenTreeIter","","An iterator over `TokenTree`s.",null,null],[4,"Level","","An enum representing a diagnostic level.",null,null],[13,"Error","","An error.",2,null],[13,"Warning","","A warning.",2,null],[13,"Note","","A note.",2,null],[13,"Help","","A help message.",2,null],[4,"TokenNode","","Description of a `TokenTree`",null,null],[13,"Group","","A delimited tokenstream.",3,null],[13,"Term","","A unicode identifier.",3,null],[13,"Op","","A punctuation character (`+`, `,`, `$`, etc.).",3,null],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), or number (`2.3`).",3,null],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",null,null],[13,"Parenthesis","","`( ... )`",4,null],[13,"Brace","","`{ ... }`",4,null],[13,"Bracket","","`[ ... ]`",4,null],[13,"None","","An implicit delimiter, e.g. `$var`, where $var is  `...`.",4,null],[4,"Spacing","","Whether an `Op` is either followed immediately by another `Op` or followed by whitespace.",null,null],[13,"Alone","","e.g. `+` is `Alone` in `+ =`.",5,null],[13,"Joint","","e.g. `+` is `Joint` in `+=`.",5,null],[5,"quote_span","","Quote a `Span` into a `TokenStream`. This is needed to implement a custom quoter.",null,{"inputs":[{"name":"span"}],"output":{"name":"tokenstream"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"diagnostic"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new diagnostic with the given `level` and `message`.",6,{"inputs":[{"name":"level"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"spanned","","Create a new diagnostic with the given `level` and `message` pointing to the given `span`.",6,{"inputs":[{"name":"span"},{"name":"level"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"span_error","","Add a new child diagnostic message to `self` with the level identified by this methods name with the given `span` and `message`.",6,{"inputs":[{"name":"self"},{"name":"span"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"error","","Add a new child diagnostic message to `self` with the level identified by this method's name with the given `message`.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"span_warning","","Add a new child diagnostic message to `self` with the level identified by this methods name with the given `span` and `message`.",6,{"inputs":[{"name":"self"},{"name":"span"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"warning","","Add a new child diagnostic message to `self` with the level identified by this method's name with the given `message`.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"span_note","","Add a new child diagnostic message to `self` with the level identified by this methods name with the given `span` and `message`.",6,{"inputs":[{"name":"self"},{"name":"span"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"note","","Add a new child diagnostic message to `self` with the level identified by this method's name with the given `message`.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"span_help","","Add a new child diagnostic message to `self` with the level identified by this methods name with the given `span` and `message`.",6,{"inputs":[{"name":"self"},{"name":"span"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"help","","Add a new child diagnostic message to `self` with the level identified by this method's name with the given `message`.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"level","","Returns the diagnostic `level` for `self`.",6,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"emit","","Emit the diagnostic.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"generics":["tokenstream","lexerror"],"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",7,{"inputs":[{"name":"tokentree"}],"output":{"name":"tokenstream"}}],[11,"from","","",7,{"inputs":[{"name":"tokennode"}],"output":{"name":"tokenstream"}}],[11,"from_iter","","",7,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","",7,{"inputs":[{"name":"self"}],"output":{"name":"tokentreeiter"}}],[11,"empty","","Returns an empty `TokenStream`.",7,{"inputs":[],"output":{"name":"tokenstream"}}],[11,"is_empty","","Checks if this `TokenStream` is empty.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"def_site","","A span that resolves at the macro definition site.",9,{"inputs":[],"output":{"name":"span"}}],[11,"call_site","","The span of the invocation of the current procedural macro.",9,{"inputs":[],"output":{"name":"span"}}],[11,"source_file","","The original source file into which this span points.",9,{"inputs":[{"name":"self"}],"output":{"name":"sourcefile"}}],[11,"parent","","The `Span` for the tokens in the previous macro expansion from which `self` was generated from, if any.",9,{"inputs":[{"name":"self"}],"output":{"generics":["span"],"name":"option"}}],[11,"source","","The span for the origin source code that `self` was generated from. If this `Span` wasn't generated from other macro expansions then the return value is the same as `*self`.",9,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"start","","Get the starting line/column in the source file for this span.",9,{"inputs":[{"name":"self"}],"output":{"name":"linecolumn"}}],[11,"end","","Get the ending line/column in the source file for this span.",9,{"inputs":[{"name":"self"}],"output":{"name":"linecolumn"}}],[11,"join","","Create a new span encompassing `self` and `other`.",9,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["span"],"name":"option"}}],[11,"resolved_at","","Creates a new span with the same line/column information as `self` but that resolves symbols as though it were at `other`.",9,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"located_at","","Creates a new span with the same name resolution behavior as `self` but with the line/column information of `other`.",9,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"error","","Create a new `Diagnostic` with the given `message` at the span `self`.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"warning","","Create a new `Diagnostic` with the given `message` at the span `self`.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"note","","Create a new `Diagnostic` with the given `message` at the span `self`.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"help","","Create a new `Diagnostic` with the given `message` at the span `self`.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"diagnostic"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"linecolumn"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"linecolumn"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"linecolumn"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sourcefile"}}],[11,"path","","Get the path to this source file.",10,{"inputs":[{"name":"self"}],"output":{"name":"filename"}}],[11,"is_real","","Returns `true` if this source file is a real source file, and not generated by an external macro's expansion.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"filename"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"filename"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"tokennode"}],"output":{"name":"tokentree"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"tokennode"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"delimiter"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"delimiter"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"term"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"intern","","Intern a string into a `Term`.",11,{"inputs":[{"name":"str"}],"output":{"name":"term"}}],[11,"as_str","","Get a reference to the interned string.",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"spacing"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"spacing"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"integer","","Integer literal",12,{"inputs":[{"name":"i128"}],"output":{"name":"literal"}}],[11,"u8","","Integer literal.",12,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"i8","","Integer literal.",12,{"inputs":[{"name":"i8"}],"output":{"name":"literal"}}],[11,"u16","","Integer literal.",12,{"inputs":[{"name":"u16"}],"output":{"name":"literal"}}],[11,"i16","","Integer literal.",12,{"inputs":[{"name":"i16"}],"output":{"name":"literal"}}],[11,"u32","","Integer literal.",12,{"inputs":[{"name":"u32"}],"output":{"name":"literal"}}],[11,"i32","","Integer literal.",12,{"inputs":[{"name":"i32"}],"output":{"name":"literal"}}],[11,"u64","","Integer literal.",12,{"inputs":[{"name":"u64"}],"output":{"name":"literal"}}],[11,"i64","","Integer literal.",12,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"usize","","Integer literal.",12,{"inputs":[{"name":"usize"}],"output":{"name":"literal"}}],[11,"isize","","Integer literal.",12,{"inputs":[{"name":"isize"}],"output":{"name":"literal"}}],[11,"float","","Floating point literal.",12,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f32","","Floating point literal.",12,{"inputs":[{"name":"f32"}],"output":{"name":"literal"}}],[11,"f64","","Floating point literal.",12,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"string","","String literal.",12,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"character","","Character literal.",12,{"inputs":[{"name":"char"}],"output":{"name":"literal"}}],[11,"byte_string","","Byte string literal.",12,null],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"tokentreeiter"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["tokentree"],"name":"option"}}],[14,"quote","","`quote!(..)` accepts arbitrary tokens and expands into a `TokenStream` describing the input. For example, `quote!(a + b)` will produce a expression, that, when evaluated, constructs the `TokenStream` `[Word(\"a\"), Op('+', Alone), Word(\"b\")]`.",null,null]],"paths":[[3,"LineColumn"],[3,"TokenTree"],[4,"Level"],[4,"TokenNode"],[4,"Delimiter"],[4,"Spacing"],[3,"Diagnostic"],[3,"TokenStream"],[3,"LexError"],[3,"Span"],[3,"SourceFile"],[3,"Term"],[3,"Literal"],[3,"TokenTreeIter"]]};
searchIndex["std"] = {"doc":"The Rust Standard Library","items":[[0,"any","std","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection.",null,null],[8,"Any","std::any","A type to emulate dynamic typing.",null,null],[10,"get_type_id","","Gets the `TypeId` of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[3,"TypeId","","A `TypeId` represents a globally unique identifier for a type.",null,null],[0,"cell","std","Shareable mutable containers.",null,null],[3,"Cell","std::cell","A mutable memory location.",null,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules",null,null],[3,"BorrowError","","An error returned by `RefCell::try_borrow`.",null,null],[3,"BorrowMutError","","An error returned by `RefCell::try_borrow_mut`.",null,null],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box. A wrapper type for an immutably borrowed value from a `RefCell<T>`.",null,null],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell<T>`.",null,null],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",null,null],[0,"clone","std","The `Clone` trait for types that cannot be 'implicitly copied'.",null,null],[8,"Clone","std::clone","A common trait for the ability to explicitly duplicate an object.",null,null],[10,"clone","","Returns a copy of the value.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",1,null],[0,"cmp","std","Functionality for ordering and comparison.",null,null],[8,"PartialEq","std::cmp","Trait for equality comparisons which are partial equivalence relations.",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",2,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",2,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are equivalence relations.",null,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",3,null],[13,"Equal","","An ordering where a compared value is equal [to another].",3,null],[13,"Greater","","An ordering where a compared value is greater [than another].",3,null],[3,"Reverse","","A helper struct for reverse ordering.",null,null],[12,"0","","",4,null],[8,"Ord","","Trait for types that form a total order.",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"max","","Compares and returns the maximum of two values.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"min","","Compares and returns the minimum of two values.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[5,"min","","Compares and returns the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compares and returns the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"convert","std","Traits for conversions between types.",null,null],[4,"Infallible","std::convert","A type used as the error type for implementations of fallible conversion traits in cases where conversions cannot actually fail.",null,null],[8,"AsRef","","A cheap reference-to-reference conversion. Used to convert a value to a reference value within generic code.",null,null],[10,"as_ref","","Performs the conversion.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive. The reciprocal of [`From`][From].",null,null],[10,"into","","Performs the conversion.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"From","","Simple and safe type conversions in to `Self`. It is the reciprocal of `Into`.",null,null],[10,"from","","Performs the conversion.",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"TryInto","","An attempted conversion that consumes `self`, which may or may not be expensive.",null,null],[16,"Error","","The type returned in the event of a conversion error.",11,null],[10,"try_into","","Performs the conversion.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",null,null],[16,"Error","","The type returned in the event of a conversion error.",12,null],[10,"try_from","","Performs the conversion.",12,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"default","std","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","std::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",13,{"inputs":[],"output":{"name":"self"}}],[0,"hash","std","Generic hashing support.",null,null],[8,"Hash","std::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the given [`Hasher`].",14,null],[11,"hash_slice","","Feeds a slice of this type into the given [`Hasher`].",14,null],[8,"Hasher","","A trait for hashing an arbitrary stream of bytes.",null,null],[10,"finish","","Returns the hash value for the values written so far.",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"write","","Writes some data into this `Hasher`.",15,null],[11,"write_u8","","Writes a single `u8` into this hasher.",15,null],[11,"write_u16","","Writes a single `u16` into this hasher.",15,null],[11,"write_u32","","Writes a single `u32` into this hasher.",15,null],[11,"write_u64","","Writes a single `u64` into this hasher.",15,null],[11,"write_u128","","Writes a single `u128` into this hasher.",15,null],[11,"write_usize","","Writes a single `usize` into this hasher.",15,null],[11,"write_i8","","Writes a single `i8` into this hasher.",15,null],[11,"write_i16","","Writes a single `i16` into this hasher.",15,null],[11,"write_i32","","Writes a single `i32` into this hasher.",15,null],[11,"write_i64","","Writes a single `i64` into this hasher.",15,null],[11,"write_i128","","Writes a single `i128` into this hasher.",15,null],[11,"write_isize","","Writes a single `isize` into this hasher.",15,null],[8,"BuildHasher","","A trait for creating instances of [`Hasher`].",null,null],[16,"Hasher","","Type of the hasher that will be created.",16,null],[10,"build_hasher","","Creates a new hasher.",16,null],[3,"BuildHasherDefault","","Used to create a default [`BuildHasher`] instance for types that implement [`Hasher`] and [`Default`].",null,null],[3,"SipHasher13","","An implementation of SipHash 1-3.",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[3,"SipHasher24","","An implementation of SipHash 2-4.",null,null],[0,"intrinsics","std","rustc compiler intrinsics.",null,null],[5,"atomic_cxchg","std::intrinsics","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_acq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Acquire` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_rel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Release` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_acqrel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_relaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Relaxed` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_failacq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_acq_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::Acquire` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchg_acqrel_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange`][compare_exchange].",null,null],[5,"atomic_cxchgweak","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_acq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Acquire` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_rel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Release` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_acqrel","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_relaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Relaxed` as both the `success` and `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_failacq","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::SeqCst` as the `success` and `Ordering::Acquire` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_acq_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::Acquire` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_cxchgweak_acqrel_failrelaxed","","Stores a value if the current value is the same as the `old` value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `compare_exchange_weak` method by passing `Ordering::AcqRel` as the `success` and `Ordering::Relaxed` as the `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`][cew].",null,null],[5,"atomic_load","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_acq","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_relaxed","","Loads the current value of the pointer. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `load` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::load`.",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_rel","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_relaxed","","Stores the value at the specified memory location. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `store` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::store`.",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_acq","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_rel","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_acqrel","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xchg_relaxed","","Stores the value at the specified memory location, returning the old value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `swap` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::swap`.",null,null],[5,"atomic_xadd","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_acq","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_rel","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Release` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_acqrel","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xadd_relaxed","","Add to the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_add` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicIsize::fetch_add`.",null,null],[5,"atomic_xsub","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_acq","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_rel","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Release` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_acqrel","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_xsub_relaxed","","Subtract from the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_sub` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicIsize::fetch_sub`.",null,null],[5,"atomic_and","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_acq","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_rel","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_acqrel","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_and_relaxed","","Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_and` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_and`.",null,null],[5,"atomic_nand","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_acq","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_rel","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_acqrel","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_nand_relaxed","","Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_nand`.",null,null],[5,"atomic_or","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_acq","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_rel","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_acqrel","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_or_relaxed","","Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_or` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_or`.",null,null],[5,"atomic_xor","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::SeqCst` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_acq","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Acquire` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_rel","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Release` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_acqrel","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::AcqRel` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_xor_relaxed","","Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the `std::sync::atomic` types via the `fetch_xor` method by passing `Ordering::Relaxed` as the `order`. For example, `AtomicBool::fetch_xor`.",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"prefetch_read_data","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",null,null],[5,"prefetch_write_data","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",null,null],[5,"prefetch_read_instruction","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",null,null],[5,"prefetch_write_instruction","","The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction if supported; otherwise, it is a noop. Prefetches have no effect on the behavior of the program but can change its performance characteristics.",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"rustc_peek","","Magic intrinsic that derives its meaning from attributes attached to the function.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable, enabling further optimizations.",null,null],[5,"assume","","Informs the optimizer that a condition is always true. If the condition is false, the behavior is undefined.",null,null],[5,"likely","","Hints to the compiler that branch condition is likely to be true. Returns the value passed to it.",null,{"inputs":[{"name":"bool"}],"output":{"name":"bool"}}],[5,"unlikely","","Hints to the compiler that branch condition is likely to be false. Returns the value passed to it.",null,{"inputs":[{"name":"bool"}],"output":{"name":"bool"}}],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"pref_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","The size of the referenced value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"type_name","","Gets a static string slice containing the name of a type.",null,{"inputs":[],"output":{"name":"str"}}],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This function will return the same value for a type regardless of whichever crate it is invoked in.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"init","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninit","","Creates an uninitialized value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"transmute","","Reinterprets the bits of a value of one type as another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop glue; returns `false` if the actual type provided for `T` implements `Copy`.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may not overlap.",null,null],[5,"copy","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::<T>()` bytes of memory starting at `dst` to `val`.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a size of `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`.",null,null],[5,"volatile_load","","Perform a volatile load from the `src` pointer. The stabilized version of this intrinsic is `std::ptr::read_volatile`.",null,null],[5,"volatile_store","","Perform a volatile store to the `dst` pointer. The stabilized version of this intrinsic is `std::ptr::write_volatile`.",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sqrtf64","","Returns the square root of an `f64`",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powif32","","Raises an `f32` to an integer power.",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"powif64","","Raises an `f64` to an integer power.",null,{"inputs":[{"name":"f64"},{"name":"i32"}],"output":{"name":"f64"}}],[5,"sinf32","","Returns the sine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sinf64","","Returns the sine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"cosf32","","Returns the cosine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"cosf64","","Returns the cosine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powf32","","Raises an `f32` to an `f32` power.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"powf64","","Raises an `f64` to an `f64` power.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"expf32","","Returns the exponential of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"expf64","","Returns the exponential of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"truncf32","","Returns the integer part of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"truncf64","","Returns the integer part of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception if the argument is not an integer.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception if the argument is not an integer.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fadd_fast","","Float addition that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fsub_fast","","Float subtraction that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fmul_fast","","Float multiplication that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fdiv_fast","","Float division that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"frem_fast","","Float remainder that allows optimizations based on algebraic rules. May assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"ctlz","","Returns the number of leading unset bits (zeroes) in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"ctlz_nonzero","","Like `ctlz`, but extra-unsafe as it returns `undef` when given an `x` with value `0`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"cttz","","Returns the number of trailing unset bits (zeroes) in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"cttz_nonzero","","Like `cttz`, but extra-unsafe as it returns `undef` when given an `x` with value `0`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"add_with_overflow","","Performs checked integer addition. The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_add` method. For example, `std::u32::overflowing_add`",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_sub` method. For example, `std::u32::overflowing_sub`",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication The stabilized versions of this intrinsic are available on the integer primitives via the `overflowing_mul` method. For example, `std::u32::overflowing_mul`",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in undefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_shl","","Performs an unchecked left shift, resulting in undefined behavior when y < 0 or y >= N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_shr","","Performs an unchecked right shift, resulting in undefined behavior when y < 0 or y >= N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_add","","Returns (a + b) mod 2N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_add` method. For example, `std::u32::wrapping_add`",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_sub","","Returns (a - b) mod 2N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_sub` method. For example, `std::u32::wrapping_sub`",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_mul","","Returns (a * b) mod 2N, where N is the width of T in bits. The stabilized versions of this intrinsic are available on the integer primitives via the `wrapping_mul` method. For example, `std::u32::wrapping_mul`",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"discriminant_value","","Returns the value of the discriminant for the variant in 'v', cast to a `u64`; if `T` has no discriminant, returns 0.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"try","","Rust's \"try catch\" construct which invokes the function pointer `f` with the data pointer `data`.",null,null],[5,"align_offset","","Computes the byte offset that needs to be applied to `ptr` in order to make it aligned to `align`. If it is not possible to align `ptr`, the implementation returns `usize::max_value()`.",null,null],[5,"nontemporal_store","","Emits a `!nontemporal` store according to LLVM (see their docs). Probably will never become stable.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[0,"iter","std","Composable external iteration.",null,null],[3,"Rev","std::iter","A double-ended iterator with the direction inverted.",null,null],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",null,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[3,"StepBy","","An iterator for stepping iterators by a custom amount.",null,null],[3,"Chain","","An iterator that strings two iterators together.",null,null],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",null,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",null,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",null,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next element.",null,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",null,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",null,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[3,"Scan","","An iterator to maintain state while iterating another iterator.",null,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements of the produced iterators.",null,null],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator yields `None` once.",null,null],[3,"Inspect","","An iterator that calls a function with a reference to each element before yielding it.",null,null],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",17,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"FusedIterator","","An iterator that always continues to yield `None` when exhausted.",null,null],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",18,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",18,null],[10,"into_iter","","Creates an iterator from a value.",18,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","Removes and returns an element from the end of the iterator.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","This is the reverse version of [`try_fold()`]: it takes elements starting from the back of the iterator.",19,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","An iterator method that reduces the iterator's elements to a single, final value, starting from the back.",19,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"rfind","","Searches for an element of an iterator from the right that satisfies a predicate.",19,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"steps_between","","Returns the number of steps between two step objects. The count is inclusive of `start` and exclusive of `end`.",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[10,"replace_one","","Replaces this step with `1`, returning itself",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"replace_zero","","Replaces this step with `0`, returning itself",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"add_one","","Adds one to this step, returning the result",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sub_one","","Subtracts one to this step, returning the result",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"add_usize","","Add an usize, returning None on overflow",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",21,null],[3,"Empty","","An iterator that yields nothing.",null,null],[8,"Product","","Trait to represent types that can be created by multiplying elements of an iterator.",null,null],[10,"product","","Method which takes an iterator and generates `Self` from the elements by multiplying the items.",22,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the iterator is empty.",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",24,null],[10,"next","","Advances the iterator and returns the next value.",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",24,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","Returns the `n`th element of the iterator.",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"step_by","","Creates an iterator starting at the same point, but stepping by the given amount at each iteration.",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stepby"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",24,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",24,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each element.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"for_each","","Calls a closure on each element of an iterator.",24,null],[11,"filter","","Creates an iterator which uses a closure to determine if an element should be yielded.",24,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as the next value.",24,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of the iterator without consuming it.",24,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a predicate.",24,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",24,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold`] that holds internal state and produces a new iterator.",24,{"inputs":[{"name":"self"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first [`None`].",24,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",24,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",24,null],[11,"try_fold","","An iterator method that applies a function as long as it returns successfully, producing a single, final value.",24,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","An iterator method that applies a function, producing a single, final value.",24,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",24,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",24,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its index.",24,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the specified function.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by","","Returns the element that gives the maximum value with respect to the specified comparison function.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the specified function.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by","","Returns the element that gives the minimum value with respect to the specified comparison function.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator's direction.",24,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",24,null],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",24,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",24,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",24,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",24,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",24,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",24,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of another.",24,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of another.",24,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically less than those of another.",24,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically less or equal to those of another.",24,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically greater than those of another.",24,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically greater than or equal to those of another.",24,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[3,"Once","","An iterator that yields an element exactly once.",null,null],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[8,"Sum","","Trait to represent types that can be created by summing up an iterator.",null,null],[10,"sum","","Method which takes an iterator and generates `Self` from the elements by \"summing up\" the items.",25,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[8,"TrustedLen","","An iterator that reports an accurate length using size_hint.",null,null],[0,"marker","std","Primitive traits and types representing basic properties of types.",null,null],[8,"Send","std::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile time.",null,null],[8,"Unsize","","Types that can be \"unsized\" to a dynamically-sized type.",null,null],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",null,null],[8,"Sync","","Types for which it is safe to share references between threads.",null,null],[3,"PhantomData","","Zero-sized type used to mark things that \"act like\" they own a `T`.",null,null],[0,"mem","std","Basic functions for dealing with memory.",null,null],[5,"forget","std::mem","Leaks a value: takes ownership and \"forgets\" about the value without running its destructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the pointed-to value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"needs_drop","","Returns whether dropping values of type `T` matters.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"zeroed","","Creates a value whose bytes are all zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by pretending to produce a value of type `T`, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swaps the values at two mutable locations, without deinitializing either one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without deinitializing either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[5,"transmute_copy","","Interprets `src` as having type `&U`, and then reads `src` without moving the contained value.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[3,"Discriminant","","Opaque type representing the discriminant of an enum.",null,null],[5,"discriminant","","Returns a value uniquely identifying the enum variant in `v`.",null,{"inputs":[{"name":"t"}],"output":{"name":"discriminant"}}],[19,"ManuallyDrop","","A wrapper to inhibit compiler from automatically calling `T`’s destructor.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable, enabling further optimizations.",null,null],[5,"transmute","","Reinterprets the bits of a value of one type as another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"ops","std","Overloadable operators.",null,null],[8,"Not","std::ops","The unary logical negation operator `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator.",26,null],[10,"not","","Performs the unary `!` operation.",26,null],[8,"Div","","The division operator `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator.",27,null],[10,"div","","Performs the `/` operation.",27,null],[3,"RangeFrom","","A range only bounded inclusively below (`start..`).",null,null],[12,"start","","The lower bound of the range (inclusive).",28,null],[8,"Sub","","The subtraction operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",29,null],[10,"sub","","Performs the `-` operation.",29,null],[8,"BitXor","","The bitwise XOR operator `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator.",30,null],[10,"bitxor","","Performs the `^` operation.",30,null],[8,"Deref","","Used for immutable dereferencing operations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing.",31,null],[10,"deref","","Dereferences the value.",31,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",32,null],[16,"Place","","The place that will negotiate the storage of the data.",32,null],[10,"finalize","","Converts filled place into final owning value, shifting deallocation/cleanup responsibilities (if any remain), over to returned instance of `Self` and forgetting `filled`.",32,null],[8,"Mul","","The multiplication operator `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator.",33,null],[10,"mul","","Performs the `*` operation.",33,null],[8,"Add","","The addition operator `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator.",34,null],[10,"add","","Performs the `+` operation.",34,null],[8,"BitOr","","The bitwise OR operator `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator.",35,null],[10,"bitor","","Performs the `|` operation.",35,null],[8,"RemAssign","","The remainder assignment operator `%=`.",null,null],[10,"rem_assign","","Performs the `%=` operation.",36,null],[8,"BitAnd","","The bitwise AND operator `&`.",null,null],[16,"Output","","The resulting type after applying the `&` operator.",37,null],[10,"bitand","","Performs the `&` operation.",37,null],[8,"InPlace","","Specialization of `Place` trait supporting `PLACE <- EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `PLACE <- EXPR`",38,null],[10,"finalize","","Converts self into the final value, shifting deallocation/cleanup responsibilities (if any remain), over to the returned instance of `Owner` and forgetting self.",38,null],[3,"Range","","A (half-open) range bounded inclusively below and exclusively above (`start..end`).",null,null],[12,"start","","The lower bound of the range (inclusive).",39,null],[12,"end","","The upper bound of the range (exclusive).",39,null],[8,"Neg","","The unary negation operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",40,null],[10,"neg","","Performs the unary `-` operation.",40,null],[8,"FnMut","","The version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","Performs the call operation.",41,null],[4,"GeneratorState","","The result of a generator resumption.",null,null],[13,"Yielded","","The generator suspended with a value.",42,null],[13,"Complete","","The generator completed with a return value.",42,null],[3,"RangeToInclusive","","A range only bounded inclusively above (`..=end`).",null,null],[12,"end","","The upper bound of the range (inclusive)",43,null],[8,"IndexMut","","Used for indexing operations (`container[index]`) in mutable contexts.",null,null],[10,"index_mut","","Performs the mutable indexing (`container[index]`) operation.",44,null],[8,"Placer","","Interface to implementations of  `PLACE <- EXPR`.",null,null],[16,"Place","","`Place` is the intermediate agent guarding the uninitialized state for `Data`.",45,null],[10,"make_place","","Creates a fresh place from `self`.",45,null],[8,"ShlAssign","","The left shift assignment operator `<<=`.",null,null],[10,"shl_assign","","Performs the `<<=` operation.",46,null],[8,"Shl","","The left shift operator `<<`.",null,null],[16,"Output","","The resulting type after applying the `<<` operator.",47,null],[10,"shl","","Performs the `<<` operation.",47,null],[8,"FnOnce","","The version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",48,null],[10,"call_once","","Performs the call operation.",48,null],[3,"RangeTo","","A range only bounded exclusively above (`..end`).",null,null],[12,"end","","The upper bound of the range (exclusive).",49,null],[8,"DivAssign","","The division assignment operator `/=`.",null,null],[10,"div_assign","","Performs the `/=` operation.",50,null],[8,"ShrAssign","","The right shift assignment operator `>>=`.",null,null],[10,"shr_assign","","Performs the `>>=` operation.",51,null],[8,"DerefMut","","Used for mutable dereferencing operations, like in `*v = 1;`.",null,null],[10,"deref_mut","","Mutably dereferences the value.",52,null],[3,"RangeInclusive","","An range bounded inclusively below and above (`start..=end`).",null,null],[12,"start","","The lower bound of the range (inclusive).",53,null],[12,"end","","The upper bound of the range (inclusive).",53,null],[8,"MulAssign","","The multiplication assignment operator `*=`.",null,null],[10,"mul_assign","","Performs the `*=` operation.",54,null],[8,"Index","","Used for indexing operations (`container[index]`) in immutable contexts.",null,null],[16,"Output","","The returned type after indexing.",55,null],[10,"index","","Performs the indexing (`container[index]`) operation.",55,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one, where unsizing can be performed on the pointee.",null,null],[8,"Fn","","The version of the call operator that takes an immutable receiver.",null,null],[10,"call","","Performs the call operation.",56,null],[3,"RangeFull","","An unbounded range (`..`).",null,null],[8,"BitXorAssign","","The bitwise XOR assignment operator `^=`.",null,null],[10,"bitxor_assign","","Performs the `^=` operation.",57,null],[8,"Generator","","The trait implemented by builtin generator types.",null,null],[16,"Yield","","The type of value this generator yields.",58,null],[16,"Return","","The type of value this generator returns.",58,null],[10,"resume","","Resumes the execution of this generator.",58,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[8,"Try","","A trait for customizing the behavior of the `?` operator.",null,null],[16,"Ok","","The type of this value when viewed as successful.",59,null],[16,"Error","","The type of this value when viewed as failed.",59,null],[10,"into_result","","Applies the \"?\" operator. A return of `Ok(t)` means that the execution should continue normally, and the result of `?` is the value `t`. A return of `Err(e)` means that execution should branch to the innermost enclosing `catch`, or return from the function.",59,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"from_error","","Wrap an error value to construct the composite result. For example, `Result::Err(x)` and `Result::from_error(x)` are equivalent.",59,null],[10,"from_ok","","Wrap an OK value to construct the composite result. For example, `Result::Ok(x)` and `Result::from_ok(x)` are equivalent.",59,null],[8,"Drop","","Used to run some code when a value goes out of scope. This is sometimes called a 'destructor'.",null,null],[10,"drop","","Executes the destructor for this type.",60,null],[8,"Place","","Both `PLACE <- EXPR` and `box EXPR` desugar into expressions that allocate an intermediate \"place\" that holds uninitialized state.  The desugaring evaluates EXPR, and writes the result at the address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written. Note that the data at this address is generally uninitialized, and thus one should use `ptr::write` for initializing it.",61,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",62,{"inputs":[],"output":{"name":"self"}}],[8,"BitOrAssign","","The bitwise OR assignment operator `|=`.",null,null],[10,"bitor_assign","","Performs the `|=` operation.",63,null],[8,"BitAndAssign","","The bitwise AND assignment operator `&=`.",null,null],[10,"bitand_assign","","Performs the `&=` operation.",64,null],[8,"AddAssign","","The addition assignment operator `+=`.",null,null],[10,"add_assign","","Performs the `+=` operation.",65,null],[8,"SubAssign","","The subtraction assignment operator `-=`.",null,null],[10,"sub_assign","","Performs the `-=` operation.",66,null],[8,"Rem","","The remainder operator `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator.",67,null],[10,"rem","","Performs the `%` operation.",67,null],[8,"Shr","","The right shift operator `>>`.",null,null],[16,"Output","","The resulting type after applying the `>>` operator.",68,null],[10,"shr","","Performs the `>>` operation.",68,null],[0,"ptr","std","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[5,"drop_in_place","std::ptr","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"null","","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without deinitializing either.",null,null],[5,"swap_nonoverlapping","","Swaps a sequence of values at two mutable locations of the same type.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old value, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"read_unaligned","","Reads the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"write","","Overwrites a memory location with the given value without reading or dropping the old value.",null,null],[5,"write_unaligned","","Overwrites a memory location with the given value without reading or dropping the old value.",null,null],[5,"read_volatile","","Performs a volatile read of the value from `src` without moving it. This leaves the memory in `src` unchanged.",null,null],[5,"write_volatile","","Performs a volatile write of a memory location with the given value without reading or dropping the old value.",null,null],[5,"eq","","Compare raw pointers for equality.",null,null],[3,"Unique","","A wrapper around a raw non-null `*mut T` that indicates that the possessor of this wrapper owns the referent. Useful for building abstractions like `Box<T>`, `Vec<T>`, `String`, and `HashMap<K, V>`.",null,null],[6,"Shared","","Previous name of `NonNull`.",null,null],[3,"NonNull","","`*mut T` but non-zero and covariant.",null,null],[5,"copy","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::<T>()` bytes of memory starting at `dst` to `val`.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source and destination may not overlap.",null,null],[0,"raw","std","Contains struct definitions for the layout of compiler built-in types.",null,null],[3,"TraitObject","std::raw","The representation of a trait object like `&SomeTrait`.",null,null],[12,"data","","",69,null],[12,"vtable","","",69,null],[0,"result","std","Error handling with the `Result` type.",null,null],[4,"Result","std::result","`Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).",null,null],[13,"Ok","","Contains the success value",70,null],[13,"Err","","Contains the error value",70,null],[3,"Iter","","An iterator over a reference to the [`Ok`] variant of a [`Result`].",null,null],[3,"IterMut","","An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].",null,null],[3,"IntoIter","","An iterator over the value in a [`Ok`] variant of a [`Result`].",null,null],[0,"option","std","Optional values.",null,null],[4,"Option","std::option","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",71,null],[13,"Some","","Some value `T`",71,null],[3,"Iter","","An iterator over a reference to the [`Some`] variant of an [`Option`].",null,null],[3,"IterMut","","An iterator over a mutable reference to the [`Some`] variant of an [`Option`].",null,null],[3,"IntoIter","","An iterator over the value in [`Some`] variant of an [`Option`].",null,null],[3,"NoneError","","The error type that results from applying the try operator (`?`) to a `None` value. If you wish to allow `x?` (where `x` is an `Option<T>`) to be converted into your error type, you can implement `impl From<NoneError>` for `YourErrorType`. In that case, `x?` within a function that returns `Result<_, YourErrorType>` will translate a `None` value into an `Err` result.",null,null],[0,"isize","std","The pointer-sized signed integer type.",null,null],[17,"MIN","std::isize","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i8","std","The 8-bit signed integer type.",null,null],[17,"MIN","std::i8","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i16","std","The 16-bit signed integer type.",null,null],[17,"MIN","std::i16","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i32","std","The 32-bit signed integer type.",null,null],[17,"MIN","std::i32","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i64","std","The 64-bit signed integer type.",null,null],[17,"MIN","std::i64","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i128","std","The 128-bit signed integer type.",null,null],[17,"MIN","std::i128","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"usize","std","The pointer-sized unsigned integer type.",null,null],[17,"MIN","std::usize","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u8","std","The 8-bit unsigned integer type.",null,null],[17,"MIN","std::u8","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u16","std","The 16-bit unsigned integer type.",null,null],[17,"MIN","std::u16","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u32","std","The 32-bit unsigned integer type.",null,null],[17,"MIN","std::u32","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u64","std","The 64-bit unsigned integer type.",null,null],[17,"MIN","std::u64","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"boxed","std","A pointer type for heap allocation.",null,null],[17,"HEAP","std::boxed","A value that represents the heap. This is the default place that the `box` keyword allocates into when no place is supplied.",null,null],[3,"ExchangeHeapSingleton","","This the singleton type used solely for `boxed::HEAP`.",null,null],[3,"Box","","A pointer type for heap allocation.",null,null],[3,"IntermediateBox","","`IntermediateBox` represents uninitialized backing storage for `Box`.",null,null],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed closure objects. The idea is that where one would normally store a `Box<FnOnce()>` in a data structure, you should use `Box<FnBox()>`. The two traits behave essentially the same, except that a `FnBox` closure can only be called if it is boxed. (Note that `FnBox` may be deprecated in the future if `Box<FnOnce()>` closures become directly usable.)",null,null],[16,"Output","","",72,null],[10,"call_box","","",72,null],[0,"rc","std","Single-threaded reference-counting pointers. 'Rc' stands for 'Reference Counted'.",null,null],[3,"Rc","std::rc","A single-threaded reference-counting pointer. 'Rc' stands for 'Reference Counted'.",null,null],[3,"Weak","","`Weak` is a version of [`Rc`] that holds a non-owning reference to the managed value. The value is accessed by calling [`upgrade`] on the `Weak` pointer, which returns an [`Option`]`<`[`Rc`]`<T>>`.",null,null],[0,"borrow","std","A module for working with borrowed data.",null,null],[8,"ToOwned","std::borrow","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",73,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",73,null],[11,"clone_into","","Uses borrowed data to replace owned data, usually by cloning.",73,null],[4,"Cow","","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",74,null],[13,"Owned","","Owned data.",74,null],[8,"Borrow","","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",75,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",76,{"inputs":[{"name":"self"}],"output":{"name":"borrowed"}}],[0,"fmt","std","Utilities for formatting and printing `String`s.",null,null],[5,"format","std::fmt","The `format` function takes an [`Arguments`] struct and returns the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",null,null],[8,"LowerExp","","`e` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"LowerHex","","`x` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write succeeded.",79,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","Writes a [`char`] into this writer, returning whether the write succeeded.",79,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors of this trait.",79,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[6,"Result","","The type returned by formatter methods.",null,null],[8,"Binary","","`b` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Debug","","`?` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"UpperHex","","`X` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Octal","","`o` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[5,"write","","The `write` function takes an output stream, and an `Arguments` struct that can be precompiled with the `format_args!` macro.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Pointer","","`p` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"UpperExp","","`E` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[0,"slice","std","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[8,"SliceConcatExt","std::slice","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",87,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",87,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a given separator between each.",87,null],[10,"connect","","",87,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable slice is returned.",null,null],[3,"RSplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`, starting from the end of the slice.",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[8,"SliceIndex","","A helper trait used for indexing operations.",null,null],[16,"Output","","The output type returned by methods.",88,null],[10,"get","","Returns a shared reference to the output at this location, if in bounds.",88,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[10,"get_mut","","Returns a mutable reference to the output at this location, if in bounds.",88,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[10,"get_unchecked","","Returns a shared reference to the output at this location, without performing any bounds checking.",88,null],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this location, without performing any bounds checking.",88,null],[10,"index","","Returns a shared reference to the output at this location, panicking if out of bounds.",88,null],[10,"index_mut","","Returns a mutable reference to the output at this location, panicking if out of bounds.",88,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`.",null,null],[3,"RSplit","","An iterator over subslices separated by elements that match a predicate function, starting from the end of the slice.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[5,"from_ref","","Converts a reference to T into a slice of length 1 (without copying).",null,null],[5,"from_ref_mut","","Converts a reference to T into a slice of length 1 (without copying).",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[3,"ExactChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time). When the slice len is not evenly divided by the chunk size, the last up to `chunk_size-1` elements will be omitted.",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[3,"ExactChunks","","An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time).",null,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time).",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"Iter","","Immutable slice iterator",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate function.",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time). When the slice len is not evenly divided by the chunk size, the last slice of the iteration will be the remainder.",null,null],[0,"str","std","Unicode string slices.",null,null],[3,"EncodeUtf16","std::str","An iterator of [`u16`] over the string encoded as UTF-16.",null,null],[5,"from_boxed_utf8_unchecked","","Converts a boxed slice of bytes to a boxed string slice without checking that the string contains valid UTF-8.",null,{"inputs":[{"name":"box"}],"output":{"generics":["str"],"name":"box"}}],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","std::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",89,null],[10,"into_searcher","","Constructs the associated searcher from `self` and the `haystack` to search in.",89,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",89,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",89,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",89,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at `haystack[a..b]`.",90,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match of the pattern.",90,null],[13,"Done","","Expresses that every byte of the haystack has been visited, ending the iteration.",90,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlying string to be searched in",91,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",91,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()` and `next_match()`",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",92,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[3,"Utf8Error","std::str","Errors which can occur when attempting to interpret a sequence of [`u8`] as a string.",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",null,null],[3,"ParseBoolError","","An error returned when parsing a `bool` using [`from_str`] fails",null,null],[3,"RSplit","","Created with the method [`rsplit`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",null,null],[3,"CharIndices","","An iterator over the [`char`]s of a string slice, and their positions.",null,null],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a string.",null,null],[16,"Err","","The associated error which can be returned from parsing.",93,null],[10,"from_str","","Parses a string `s` to return a value of this type.",93,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"RSplitN","","Created with the method [`rsplitn`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices`].",null,null],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8; mutable version.",null,null],[3,"Chars","","An iterator over the [`char`]s of a string slice.",null,null],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string slice.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8.",null,null],[3,"LinesAny","","Created with the method [`lines_any`].",null,null],[3,"Bytes","","An iterator over the bytes of a string slice.",null,null],[3,"SplitN","","Created with the method [`splitn`].",null,null],[3,"RMatches","","Created with the method [`rmatches`].",null,null],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.",null,null],[3,"Split","","Created with the method [`split`].",null,null],[3,"Lines","","An iterator over the lines of a string, as string slices.",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[3,"Matches","","Created with the method [`matches`].",null,null],[0,"string","std","A UTF-8 encoded, growable string.",null,null],[3,"String","std::string","A UTF-8 encoded, growable string.",null,null],[3,"FromUtf8Error","","A possible error value when converting a `String` from a UTF-8 byte vector.",null,null],[3,"FromUtf16Error","","A possible error value when converting a `String` from a UTF-16 byte slice.",null,null],[4,"ParseError","","An error when parsing a `String`.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",94,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[3,"Drain","","A draining iterator for `String`.",null,null],[0,"vec","std","A contiguous growable array type with heap-allocated contents, written `Vec<T>`.",null,null],[3,"Vec","std::vec","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.",null,null],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[3,"Drain","","A draining iterator for `Vec<T>`.",null,null],[3,"PlaceBack","","A place for insertion at the back of a `Vec`.",null,null],[3,"Splice","","A splicing iterator for `Vec`.",null,null],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on Vec.",null,null],[0,"char","std","A character type.",null,null],[3,"ToLowercase","std::char","Returns an iterator that yields the lowercase equivalent of a `char`.",null,null],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent of a `char`.",null,null],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[3,"DecodeUtf16Error","","An error that can be returned when decoding UTF-16 code points.",null,null],[5,"decode_utf16","","Create an iterator over the UTF-16 encoded code points in `iter`, returning unpaired surrogates as `Err`s.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf16"}}],[17,"REPLACEMENT_CHARACTER","","`U+FFFD REPLACEMENT CHARACTER` (�) is used in Unicode to represent a decoding error.",null,null],[3,"DecodeUtf8","","An iterator over an iterator of bytes of the characters the bytes represent as UTF-8",null,null],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"generics":["char"],"name":"option"}}],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[17,"UNICODE_VERSION","","The version of Unicode that the Unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.",null,null],[3,"ParseCharError","","An error which can be returned when parsing a char.",null,null],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"generics":["char"],"name":"option"}}],[3,"EscapeDebug","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"CharTryFromError","","The error type returned when a conversion from u32 to char fails.",null,null],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode escape of a character, as `char`s.",null,null],[3,"UnicodeVersion","","Represents a Unicode Version.",null,null],[12,"major","","Major version.",95,null],[12,"minor","","Minor version.",95,null],[12,"micro","","Micro (or Update) version.",95,null],[5,"decode_utf8","","Decodes an `Iterator` of bytes as UTF-8.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf8"}}],[17,"MAX","","The highest valid code point a `char` can have.",null,null],[0,"u128","std","The 128-bit unsigned integer type.",null,null],[17,"MIN","std::u128","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"prelude","std","The Rust Prelude.",null,null],[0,"v1","std::prelude","The first version of the prelude of The Rust Standard Library.",null,null],[0,"f32","std","This module provides constants which are specific to the implementation of the `f32` floating point data type.",null,null],[17,"RADIX","std::f32","The radix or base of the internal representation of `f32`.",null,null],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2.",null,null],[17,"DIGITS","","Approximate number of significant digits in base 10.",null,null],[17,"EPSILON","","Difference between `1.0` and the next largest representable number.",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 exponent.",null,null],[17,"MAX_EXP","","Maximum possible power of 2 exponent.",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",null,null],[17,"NAN","","Not a Number (NaN).",null,null],[17,"INFINITY","","Infinity (∞).",null,null],[17,"NEG_INFINITY","","Negative infinity (-∞).",null,null],[17,"MIN","","Smallest finite `f32` value.",null,null],[17,"MIN_POSITIVE","","Smallest positive normal `f32` value.",null,null],[17,"MAX","","Largest finite `f32` value.",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","std::f32::consts","Archimedes' constant (π)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler's number (e)",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[0,"f64","std","This module provides constants which are specific to the implementation of the `f64` floating point data type.",null,null],[17,"RADIX","std::f64","The radix or base of the internal representation of `f64`.",null,null],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2.",null,null],[17,"DIGITS","","Approximate number of significant digits in base 10.",null,null],[17,"EPSILON","","Difference between `1.0` and the next largest representable number.",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 exponent.",null,null],[17,"MAX_EXP","","Maximum possible power of 2 exponent.",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",null,null],[17,"NAN","","Not a Number (NaN).",null,null],[17,"INFINITY","","Infinity (∞).",null,null],[17,"NEG_INFINITY","","Negative infinity (-∞).",null,null],[17,"MIN","","Smallest finite `f64` value.",null,null],[17,"MIN_POSITIVE","","Smallest positive normal `f64` value.",null,null],[17,"MAX","","Largest finite `f64` value.",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","std::f64::consts","Archimedes' constant (π)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler's number (e)",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[0,"thread","std","Native threads.",null,null],[3,"LocalKey","std::thread","A thread local storage key which owns its contents.",null,null],[3,"AccessError","","An error returned by `LocalKey::try_with`.",null,null],[3,"Builder","","Thread factory, which can be used in order to configure the properties of a new thread.",null,null],[3,"ThreadId","","A unique identifier for a running thread.",null,null],[3,"Thread","","A handle to a thread.",null,null],[3,"JoinHandle","","An owned permission to join on a thread (block on its termination).",null,null],[4,"LocalKeyState","","Indicator of the state of a thread local storage key.",null,null],[13,"Uninitialized","","All keys are in this state whenever a thread starts. Keys will transition to the `Valid` state once the first call to [`with`] happens and the initialization expression succeeds.",96,null],[13,"Valid","","Once a key has been accessed successfully, it will enter the `Valid` state. Keys in the `Valid` state will remain so until the thread exits, at which point the destructor will be run and the key will enter the `Destroyed` state.",96,null],[13,"Destroyed","","When a thread exits, the destructors for keys will be run (if necessary). While a destructor is running, and possibly after a destructor has run, a key is in the `Destroyed` state.",96,null],[5,"spawn","","Spawns a new thread, returning a [`JoinHandle`] for it.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[5,"current","","Gets a handle to the thread that invokes it.",null,{"inputs":[],"output":{"name":"thread"}}],[5,"yield_now","","Cooperatively gives up a timeslice to the OS scheduler.",null,{"inputs":[],"output":null}],[5,"panicking","","Determines whether the current thread is unwinding because of panic.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"sleep_ms","","Puts the current thread to sleep for the specified amount of time.",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"sleep","","Puts the current thread to sleep for the specified amount of time.",null,{"inputs":[{"name":"duration"}],"output":null}],[5,"park","","Blocks unless or until the current thread's token is made available.",null,{"inputs":[],"output":null}],[5,"park_timeout_ms","","Use [`park_timeout`].",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"park_timeout","","Blocks unless or until the current thread's token is made available or the specified duration has been reached (may wake spuriously).",null,{"inputs":[{"name":"duration"}],"output":null}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"localkeystate"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with","","Acquires a reference to the value in this TLS key.",97,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",97,{"inputs":[{"name":"self"}],"output":{"name":"localkeystate"}}],[11,"try_with","","Acquires a reference to the value in this TLS key.",97,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["accesserror"],"name":"result"}}],[6,"Result","","A specialized [`Result`] type for threads.",null,null],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Generates the base configuration for spawning a thread, from which configuration methods can be chained.",99,{"inputs":[],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification only in panic messages.",99,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"builder"}}],[11,"stack_size","","Sets the size of the stack (in bytes) for the new thread.",99,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"spawn","","Spawns a new thread by taking ownership of the `Builder`, and returns an [`io::Result`] to its [`JoinHandle`].",99,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["joinhandle"],"name":"result"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"threadid"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"threadid"}],"output":{"name":"bool"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"threadid"}}],[11,"hash","","",100,null],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"thread"}}],[11,"unpark","","Atomically makes the handle's token available if it is not already.",101,{"inputs":[{"name":"self"}],"output":null}],[11,"id","","Gets the thread's unique identifier.",101,{"inputs":[{"name":"self"}],"output":{"name":"threadid"}}],[11,"name","","Gets the thread's name.",101,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"thread","","Extracts a handle to the underlying thread.",102,{"inputs":[{"name":"self"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish.",102,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ascii","std","Operations on ASCII strings and characters.",null,null],[3,"EscapeDefault","std::ascii","An iterator over the escaped version of a byte.",null,null],[5,"escape_default","","Returns an iterator that produces an escaped version of a `u8`.",null,{"inputs":[{"name":"u8"}],"output":{"name":"escapedefault"}}],[8,"AsciiExt","","Extension methods for ASCII-subset only operations.",null,null],[16,"Owned","","Container type for copied ASCII characters.",103,null],[10,"is_ascii","","Checks if the value is within the ASCII range.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"to_ascii_uppercase","","Makes a copy of the value in its ASCII upper case equivalent.",103,null],[10,"to_ascii_lowercase","","Makes a copy of the value in its ASCII lower case equivalent.",103,null],[10,"eq_ignore_ascii_case","","Checks that two values are an ASCII case-insensitive match.",103,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"make_ascii_uppercase","","Converts this type to its ASCII upper case equivalent in-place.",103,{"inputs":[{"name":"self"}],"output":null}],[10,"make_ascii_lowercase","","Converts this type to its ASCII lower case equivalent in-place.",103,{"inputs":[{"name":"self"}],"output":null}],[11,"is_ascii_alphabetic","","Checks if the value is an ASCII alphabetic character: U+0041 'A' ... U+005A 'Z' or U+0061 'a' ... U+007A 'z'. For strings, true if all characters in the string are ASCII alphabetic.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_uppercase","","Checks if the value is an ASCII uppercase character: U+0041 'A' ... U+005A 'Z'. For strings, true if all characters in the string are ASCII uppercase.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_lowercase","","Checks if the value is an ASCII lowercase character: U+0061 'a' ... U+007A 'z'. For strings, true if all characters in the string are ASCII lowercase.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_alphanumeric","","Checks if the value is an ASCII alphanumeric character: U+0041 'A' ... U+005A 'Z', U+0061 'a' ... U+007A 'z', or U+0030 '0' ... U+0039 '9'. For strings, true if all characters in the string are ASCII alphanumeric.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_digit","","Checks if the value is an ASCII decimal digit: U+0030 '0' ... U+0039 '9'. For strings, true if all characters in the string are ASCII digits.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_hexdigit","","Checks if the value is an ASCII hexadecimal digit: U+0030 '0' ... U+0039 '9', U+0041 'A' ... U+0046 'F', or U+0061 'a' ... U+0066 'f'. For strings, true if all characters in the string are ASCII hex digits.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_punctuation","","Checks if the value is an ASCII punctuation character:",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_graphic","","Checks if the value is an ASCII graphic character: U+0021 '@' ... U+007E '~'. For strings, true if all characters in the string are ASCII graphic characters.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_whitespace","","Checks if the value is an ASCII whitespace character: U+0020 SPACE, U+0009 HORIZONTAL TAB, U+000A LINE FEED, U+000C FORM FEED, or U+000D CARRIAGE RETURN. For strings, true if all characters in the string are ASCII whitespace.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_control","","Checks if the value is an ASCII control character: U+0000 NUL ... U+001F UNIT SEPARATOR, or U+007F DELETE. Note that most ASCII whitespace characters are control characters, but SPACE is not.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next","","",104,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"size_hint","","",104,null],[11,"next_back","","",104,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"collections","std","Collection types.",null,null],[4,"Bound","std::collections","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",105,null],[13,"Excluded","","An exclusive bound.",105,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",105,null],[3,"BinaryHeap","","A priority queue implemented with a binary heap.",null,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[3,"LinkedList","","A doubly-linked list with owned nodes.",null,null],[3,"VecDeque","","A double-ended queue implemented with a growable ring buffer.",null,null],[0,"binary_heap","","A priority queue implemented with a binary heap.",null,null],[3,"BinaryHeap","std::collections::binary_heap","A priority queue implemented with a binary heap.",null,null],[3,"PeekMut","","Structure wrapping a mutable reference to the greatest item on a `BinaryHeap`.",null,null],[3,"Iter","","An iterator over the elements of a `BinaryHeap`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `BinaryHeap`.",null,null],[3,"Drain","","A draining iterator over the elements of a `BinaryHeap`.",null,null],[3,"BinaryHeapPlace","","",null,null],[0,"btree_map","std::collections","A map based on a B-Tree.",null,null],[3,"VacantEntry","std::collections::btree_map","A view into a vacant entry in a `BTreeMap`. It is part of the [`Entry`] enum.",null,null],[3,"Keys","","An iterator over the keys of a `BTreeMap`.",null,null],[3,"IterMut","","A mutable iterator over the entries of a `BTreeMap`.",null,null],[3,"Iter","","An iterator over the entries of a `BTreeMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values of a `BTreeMap`.",null,null],[3,"Values","","An iterator over the values of a `BTreeMap`.",null,null],[3,"OccupiedEntry","","A view into an occupied entry in a `BTreeMap`. It is part of the [`Entry`] enum.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant entry.",106,null],[13,"Occupied","","An occupied entry.",106,null],[3,"RangeMut","","A mutable iterator over a sub-range of entries in a `BTreeMap`.",null,null],[3,"IntoIter","","An owning iterator over the entries of a `BTreeMap`.",null,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[3,"Range","","An iterator over a sub-range of entries in a `BTreeMap`.",null,null],[0,"btree_set","std::collections","A set based on a B-Tree.",null,null],[3,"BTreeSet","std::collections::btree_set","A set based on a B-Tree.",null,null],[3,"Union","","A lazy iterator producing elements in the union of `BTreeSet`s.",null,null],[3,"Iter","","An iterator over the items of a `BTreeSet`.",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric difference of `BTreeSet`s.",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of `BTreeSet`s.",null,null],[3,"IntoIter","","An owning iterator over the items of a `BTreeSet`.",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of `BTreeSet`s.",null,null],[3,"Range","","An iterator over a sub-range of items in a `BTreeSet`.",null,null],[0,"linked_list","std::collections","A doubly-linked list with owned nodes.",null,null],[3,"LinkedList","std::collections::linked_list","A doubly-linked list with owned nodes.",null,null],[3,"Iter","","An iterator over the elements of a `LinkedList`.",null,null],[3,"IterMut","","A mutable iterator over the elements of a `LinkedList`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `LinkedList`.",null,null],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on LinkedList.",null,null],[3,"FrontPlace","","A place for insertion at the front of a `LinkedList`.",null,null],[3,"BackPlace","","A place for insertion at the back of a `LinkedList`.",null,null],[0,"vec_deque","std::collections","A double-ended queue implemented with a growable ring buffer.",null,null],[3,"VecDeque","std::collections::vec_deque","A double-ended queue implemented with a growable ring buffer.",null,null],[3,"Iter","","An iterator over the elements of a `VecDeque`.",null,null],[3,"IterMut","","A mutable iterator over the elements of a `VecDeque`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `VecDeque`.",null,null],[3,"Drain","","A draining iterator over the elements of a `VecDeque`.",null,null],[3,"PlaceBack","","A place for insertion at the back of a `VecDeque`.",null,null],[3,"PlaceFront","","A place for insertion at the front of a `VecDeque`.",null,null],[0,"range","std::collections","Range syntax.",null,null],[8,"RangeArgument","std::collections::range","`RangeArgument` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[10,"start","","Start index bound.",107,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[10,"end","","End index bound.",107,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[3,"HashMap","std::collections","A hash map implemented with linear probing and Robin Hood bucket stealing.",null,null],[3,"HashSet","","A hash set implemented as a `HashMap` where the value is `()`.",null,null],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"new","","Creates an empty `HashMap`.",108,{"inputs":[],"output":{"generics":["randomstate"],"name":"hashmap"}}],[11,"with_capacity","","Creates an empty `HashMap` with the specified capacity.",108,{"inputs":[{"name":"usize"}],"output":{"generics":["randomstate"],"name":"hashmap"}}],[11,"with_hasher","","Creates an empty `HashMap` which will use the given hash builder to hash keys.",108,{"inputs":[{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty `HashMap` with the specified capacity, using `hash_builder` to hash the keys.",108,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"hasher","","Returns a reference to the map's [`BuildHasher`].",108,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",108,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `HashMap`. The collection may reserve more space to avoid frequent reallocations.",108,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",108,{"inputs":[{"name":"self"}],"output":null}],[11,"keys","","An iterator visiting all keys in arbitrary order. The iterator element type is `&'a K`.",108,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order. The iterator element type is `&'a V`.",108,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","An iterator visiting all values mutably in arbitrary order. The iterator element type is `&'a mut V`.",108,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order. The iterator element type is `(&'a K, &'a V)`.",108,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order, with mutable references to the values. The iterator element type is `(&'a K, &'a mut V)`.",108,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",108,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",108,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the allocated memory for reuse.",108,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory for reuse.",108,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",108,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",108,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",108,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",108,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",108,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"remove_entry","","Removes a key from the map, returning the stored key and value if the key was previously in the map.",108,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"retain","","Retains only the elements specified by the predicate.",108,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates an empty `HashMap<K, V, S>`, with the `Default` value for the hasher.",108,{"inputs":[],"output":{"name":"hashmap"}}],[11,"index","","",108,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value pair out of the map in arbitrary order. The map cannot be used after calling this.",108,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",108,{"inputs":[{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",108,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"extend","","",108,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"hashset"}}],[11,"new","","Creates an empty `HashSet`.",109,{"inputs":[],"output":{"generics":["randomstate"],"name":"hashset"}}],[11,"with_capacity","","Creates an empty `HashSet` with the specified capacity.",109,{"inputs":[{"name":"usize"}],"output":{"generics":["randomstate"],"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash keys.",109,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty `HashSet` with with the specified capacity, using `hasher` to hash the keys.",109,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"hasher","","Returns a reference to the set's [`BuildHasher`].",109,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",109,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `HashSet`. The collection may reserve more space to avoid frequent reallocations.",109,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",109,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","An iterator visiting all elements in arbitrary order. The iterator element type is `&'a T`.",109,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"difference","","Visits the values representing the difference, i.e. the values that are in `self` but not in `other`.",109,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, i.e. the values that are in `self` or in `other` but not in both.",109,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, i.e. the values that are both in `self` and `other`.",109,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, i.e. all the values in `self` or `other`, without duplicates.",109,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",109,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",109,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",109,{"inputs":[{"name":"self"}],"output":null}],[11,"contains","","Returns `true` if the set contains a value.",109,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",109,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.",109,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e. `other` contains at least all the values in `self`.",109,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e. `self` contains at least all the values in `other`.",109,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",109,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",109,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",109,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",109,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"retain","","Retains only the elements specified by the predicate.",109,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",109,{"inputs":[{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",109,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",109,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"default","","Creates an empty `HashSet<T, S>` with the `Default` value for the hasher.",109,{"inputs":[],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the set in arbitrary order. The set cannot be used after calling this.",109,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[0,"hash_map","","A hash map implemented with linear probing and Robin Hood bucket stealing.",null,null],[3,"HashMap","std::collections::hash_map","A hash map implemented with linear probing and Robin Hood bucket stealing.",null,null],[3,"Iter","","An iterator over the entries of a `HashMap`.",null,null],[3,"IterMut","","A mutable iterator over the entries of a `HashMap`.",null,null],[3,"IntoIter","","An owning iterator over the entries of a `HashMap`.",null,null],[3,"Keys","","An iterator over the keys of a `HashMap`.",null,null],[3,"Values","","An iterator over the values of a `HashMap`.",null,null],[3,"Drain","","A draining iterator over the entries of a `HashMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values of a `HashMap`.",null,null],[3,"OccupiedEntry","","A view into an occupied entry in a `HashMap`. It is part of the [`Entry`] enum.",null,null],[3,"VacantEntry","","A view into a vacant entry in a `HashMap`. It is part of the [`Entry`] enum.",null,null],[3,"EntryPlace","","A place for insertion to a `Entry`.",null,null],[3,"RandomState","","`RandomState` is the default state for [`HashMap`] types.",null,null],[3,"DefaultHasher","","The default [`Hasher`] used by [`RandomState`].",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Occupied","","An occupied entry.",110,null],[13,"Vacant","","A vacant entry.",110,null],[0,"hash_set","std::collections","A hash set implemented as a `HashMap` where the value is `()`.",null,null],[3,"HashSet","std::collections::hash_set","A hash set implemented as a `HashMap` where the value is `()`.",null,null],[3,"Iter","","An iterator over the items of a `HashSet`.",null,null],[3,"IntoIter","","An owning iterator over the items of a `HashSet`.",null,null],[3,"Drain","","A draining iterator over the items of a `HashSet`.",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of `HashSet`s.",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of `HashSet`s.",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric difference of `HashSet`s.",null,null],[3,"Union","","A lazy iterator producing elements in the union of `HashSet`s.",null,null],[0,"env","std","Inspection and manipulation of the process's environment.",null,null],[3,"Vars","std::env","An iterator over a snapshot of the environment variables of this process.",null,null],[3,"VarsOs","","An iterator over a snapshot of the environment variables of this process.",null,null],[3,"SplitPaths","","An iterator that splits an environment variable into paths according to platform-specific conventions.",null,null],[3,"JoinPathsError","","The error type for operations on the `PATH` variable. Possibly returned from the [`env::join_paths`] function.",null,null],[3,"Args","","An iterator over the arguments of a process, yielding a [`String`] value for each argument.",null,null],[3,"ArgsOs","","An iterator over the arguments of a process, yielding an [`OsString`] value for each argument.",null,null],[4,"VarError","","The error type for operations interacting with environment variables. Possibly returned from the [`env::var`] function.",null,null],[13,"NotPresent","","The specified environment variable was not present in the current process's environment.",111,null],[13,"NotUnicode","","The specified environment variable was found, but it did not contain valid unicode data. The found data is returned as a payload of this variant.",111,null],[5,"current_dir","","Returns the current working directory as a [`PathBuf`].",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"result"}}],[5,"set_current_dir","","Changes the current working directory to the specified path.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"vars","","Returns an iterator of (variable, value) pairs of strings, for all the environment variables of the current process.",null,{"inputs":[],"output":{"name":"vars"}}],[5,"vars_os","","Returns an iterator of (variable, value) pairs of OS strings, for all the environment variables of the current process.",null,{"inputs":[],"output":{"name":"varsos"}}],[5,"var","","Fetches the environment variable `key` from the current process.",null,{"inputs":[{"name":"k"}],"output":{"generics":["string","varerror"],"name":"result"}}],[5,"var_os","","Fetches the environment variable `key` from the current process, returning [`None`] if the variable isn't set.",null,{"inputs":[{"name":"k"}],"output":{"generics":["osstring"],"name":"option"}}],[5,"set_var","","Sets the environment variable `k` to the value `v` for the currently running process.",null,{"inputs":[{"name":"k"},{"name":"v"}],"output":null}],[5,"remove_var","","Removes an environment variable from the environment of the currently running process.",null,{"inputs":[{"name":"k"}],"output":null}],[5,"split_paths","","Parses input according to platform conventions for the `PATH` environment variable.",null,{"inputs":[{"name":"t"}],"output":{"name":"splitpaths"}}],[5,"join_paths","","Joins a collection of [`Path`]s appropriately for the `PATH` environment variable.",null,{"inputs":[{"name":"i"}],"output":{"generics":["osstring","joinpathserror"],"name":"result"}}],[5,"home_dir","","Returns the path of the current user's home directory if known.",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"option"}}],[5,"temp_dir","","Returns the path of a temporary directory.",null,{"inputs":[],"output":{"name":"pathbuf"}}],[5,"current_exe","","Returns the full filesystem path of the current running executable.",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"result"}}],[5,"args","","Returns the arguments which this program was started with (normally passed via the command line).",null,{"inputs":[],"output":{"name":"args"}}],[5,"args_os","","Returns the arguments which this program was started with (normally passed via the command line).",null,{"inputs":[],"output":{"name":"argsos"}}],[0,"consts","","Constants associated with the current target",null,null],[17,"ARCH","std::env::consts","A string describing the architecture of the CPU that is currently in use.",null,null],[17,"FAMILY","","The family of the operating system. Example value is `unix`.",null,null],[17,"OS","","A string describing the specific operating system in use. Example value is `linux`.",null,null],[17,"DLL_PREFIX","","Specifies the filename prefix used for shared libraries on this platform. Example value is `lib`.",null,null],[17,"DLL_SUFFIX","","Specifies the filename suffix used for shared libraries on this platform. Example value is `.so`.",null,null],[17,"DLL_EXTENSION","","Specifies the file extension used for shared libraries on this platform that goes after the dot. Example value is `so`.",null,null],[17,"EXE_SUFFIX","","Specifies the filename suffix used for executable binaries on this platform. Example value is `.exe`.",null,null],[17,"EXE_EXTENSION","","Specifies the file extension, if any, used for executable binaries on this platform. Example value is `exe`.",null,null],[11,"next","std::env","",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",112,null],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",113,null],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"varerror"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",111,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",114,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"option"}}],[11,"size_hint","","",114,null],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",115,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",116,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"size_hint","","",116,null],[11,"len","","",116,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",116,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_back","","",116,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",117,{"inputs":[{"name":"self"}],"output":{"generics":["osstring"],"name":"option"}}],[11,"size_hint","","",117,null],[11,"len","","",117,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",117,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_back","","",117,{"inputs":[{"name":"self"}],"output":{"generics":["osstring"],"name":"option"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"error","std","Traits for working with Errors.",null,null],[8,"Error","std::error","Base functionality for all errors in Rust.",null,null],[10,"description","","A short description of the error.",118,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","The lower-level cause of this error, if any.",118,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","std::boxed","",119,{"inputs":[{"name":"e"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",119,{"inputs":[{"name":"e"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",119,{"inputs":[{"name":"string"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",119,{"inputs":[{"name":"string"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",119,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",119,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",119,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",119,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"generics":["error"],"name":"box"}}],[11,"description","std::str","",120,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",121,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","std::string","",122,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",123,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",124,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","std::char","",125,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",119,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"description","std::fmt","",126,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","std::cell","",127,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",128,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","std::char","",129,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",130,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","std::convert","",131,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is","std::error","Returns true if the boxed type is the same as `T`",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",118,{"inputs":[{"name":"box"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",118,{"inputs":[{"name":"box"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",118,{"inputs":[{"name":"box"}],"output":{"generics":["box","box"],"name":"result"}}],[0,"ffi","std","Utilities related to FFI bindings.",null,null],[3,"CString","std::ffi","A type representing an owned, C-compatible, nul-terminated string with no nul bytes in the middle.",null,null],[3,"CStr","","Representation of a borrowed C string.",null,null],[3,"NulError","","An error indicating that an interior nul byte was found.",null,null],[3,"IntoStringError","","An error indicating invalid UTF-8 when converting a [`CString`] into a [`String`].",null,null],[3,"FromBytesWithNulError","","An error indicating that a nul byte was not in the expected position.",null,null],[3,"OsString","","A type that can represent owned, mutable platform-native strings, but is cheaply inter-convertible with Rust strings.",null,null],[3,"OsStr","","Borrowed reference to an OS string (see [`OsString`]).",null,null],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",132,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",132,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",132,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",132,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",132,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"cmp","","",132,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"hash","","",132,null],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"cstring"}}],[11,"hash","","",133,null],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"nulerror"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"frombyteswithnulerror"}}],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"frombyteswithnulerror"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"self"},{"name":"frombyteswithnulerror"}],"output":{"name":"bool"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"intostringerror"}}],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"self"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new C-compatible string from a container of bytes.",132,{"inputs":[{"name":"t"}],"output":{"generics":["cstring","nulerror"],"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string by consuming a byte vector, without checking for interior 0 bytes.",132,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a `CString` that was transferred to C via [`into_raw`].",132,null],[11,"into_raw","","Consumes the `CString` and transfers ownership of the string to a C caller.",132,null],[11,"into_string","","Converts the `CString` into a [`String`] if it contains valid UTF-8 data.",132,{"inputs":[{"name":"self"}],"output":{"generics":["string","intostringerror"],"name":"result"}}],[11,"into_bytes","","Consumes the `CString` and returns the underlying byte buffer.",132,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"into_bytes_with_nul","","Equivalent to the [`into_bytes`] function except that the returned vector includes the trailing nul terminator.",132,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",132,null],[11,"as_bytes_with_nul","","Equivalent to the [`as_bytes`] function except that the returned slice includes the trailing nul terminator.",132,null],[11,"as_c_str","","Extracts a [`CStr`] slice containing the entire string.",132,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"into_boxed_c_str","","Converts this `CString` into a boxed [`CStr`].",132,{"inputs":[{"name":"self"}],"output":{"generics":["cstr"],"name":"box"}}],[11,"drop","","",132,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",132,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::vec","",137,{"inputs":[{"name":"cstring"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"fmt","std::ffi","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates an empty `CString`.",132,{"inputs":[],"output":{"name":"cstring"}}],[11,"borrow","","",132,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"from","std::boxed","",119,{"inputs":[{"name":"cstr"}],"output":{"generics":["cstr"],"name":"box"}}],[11,"from","std::ffi","",132,{"inputs":[{"generics":["cstr"],"name":"box"}],"output":{"name":"cstring"}}],[11,"from","std::boxed","",119,{"inputs":[{"name":"cstring"}],"output":{"generics":["cstr"],"name":"box"}}],[11,"from","std::rc","",138,{"inputs":[{"name":"cstring"}],"output":{"generics":["cstr"],"name":"rc"}}],[11,"from","","",138,{"inputs":[{"name":"cstr"}],"output":{"generics":["cstr"],"name":"rc"}}],[11,"default","std::boxed","",119,{"inputs":[],"output":{"generics":["cstr"],"name":"box"}}],[11,"nul_position","std::ffi","Returns the position of the nul byte in the slice that caused [`CString::new`] to fail.",134,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which generated the error in the first place.",134,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"description","","",134,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",135,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_cstring","","Consumes this error, returning original [`CString`] which generated the error.",136,{"inputs":[{"name":"self"}],"output":{"name":"cstring"}}],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",136,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"description","","",136,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",136,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ptr","","Wraps a raw C string with a safe C string wrapper.",133,null],[11,"from_bytes_with_nul","","Creates a C string wrapper from a byte slice.",133,null],[11,"from_bytes_with_nul_unchecked","","Unsafely creates a C string wrapper from a byte slice.",133,null],[11,"as_ptr","","Returns the inner pointer to this C string.",133,null],[11,"to_bytes","","Converts this C string to a byte slice.",133,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",133,null],[11,"to_str","","Yields a [`&str`] slice if the `CStr` contains valid UTF-8.",133,{"inputs":[{"name":"self"}],"output":{"generics":["str","utf8error"],"name":"result"}}],[11,"to_string_lossy","","Converts a `CStr` into a [`Cow`]`<`[`str`]`>`.",133,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"cow"}}],[11,"into_c_string","","Converts a [`Box`]`<CStr>` into a [`CString`] without copying or allocating.",133,{"inputs":[{"generics":["cstr"],"name":"box"}],"output":{"name":"cstring"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",133,{"inputs":[{"name":"self"},{"name":"cstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",133,{"inputs":[{"name":"self"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"to_owned","","",133,{"inputs":[{"name":"self"}],"output":{"name":"cstring"}}],[11,"from","","",132,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",132,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"cstr"}}],[11,"as_ref","","",133,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"as_ref","","",132,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"new","","Constructs a new empty `OsString`.",139,{"inputs":[],"output":{"name":"osstring"}}],[11,"as_os_str","","Converts to an [`OsStr`] slice.",139,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"into_string","","Converts the `OsString` into a [`String`] if it contains valid Unicode data.",139,{"inputs":[{"name":"self"}],"output":{"generics":["string","osstring"],"name":"result"}}],[11,"push","","Extends the string with the given [`&OsStr`] slice.",139,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"with_capacity","","Creates a new `OsString` with the given capacity.",139,{"inputs":[{"name":"usize"}],"output":{"name":"osstring"}}],[11,"clear","","Truncates the `OsString` to zero length.",139,{"inputs":[{"name":"self"}],"output":null}],[11,"capacity","","Returns the capacity this `OsString` can hold without reallocating.",139,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more capacity to be inserted in the given `OsString`.",139,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more capacity to be inserted in the given `OsString`. Does nothing if the capacity is already sufficient.",139,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the `OsString` to match its length.",139,{"inputs":[{"name":"self"}],"output":null}],[11,"into_boxed_os_str","","Converts this `OsString` into a boxed [`OsStr`].",139,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"box"}}],[11,"from","","",139,{"inputs":[{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",139,{"inputs":[{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",139,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"osstr"}}],[11,"deref","","",139,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"default","","Constructs an empty `OsString`.",139,{"inputs":[],"output":{"name":"osstring"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",139,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",139,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"le","","",139,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"gt","","",139,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"ge","","",139,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",139,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",139,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"ordering"}}],[11,"hash","","",139,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","Coerces into an `OsStr` slice.",140,{"inputs":[{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a [`&str`] slice if the `OsStr` is valid Unicode.",140,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"to_string_lossy","","Converts an `OsStr` to a [`Cow`]`<`[`str`]`>`.",140,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"cow"}}],[11,"to_os_string","","Copies the slice into an owned [`OsString`].",140,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"is_empty","","Checks whether the `OsStr` is empty.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of this `OsStr`.",140,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_os_string","","Converts a [`Box`]`<OsStr>` into an [`OsString`] without copying or allocating.",140,{"inputs":[{"generics":["osstr"],"name":"box"}],"output":{"name":"osstring"}}],[11,"from","std::boxed","",119,{"inputs":[{"name":"osstr"}],"output":{"generics":["osstr"],"name":"box"}}],[11,"from","std::ffi","",139,{"inputs":[{"generics":["osstr"],"name":"box"}],"output":{"name":"osstring"}}],[11,"from","std::boxed","",119,{"inputs":[{"name":"osstring"}],"output":{"generics":["osstr"],"name":"box"}}],[11,"from","std::rc","",138,{"inputs":[{"name":"osstring"}],"output":{"generics":["osstr"],"name":"rc"}}],[11,"from","","",138,{"inputs":[{"name":"osstr"}],"output":{"generics":["osstr"],"name":"rc"}}],[11,"default","std::boxed","",119,{"inputs":[],"output":{"generics":["osstr"],"name":"box"}}],[11,"eq","std::ffi","",140,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",140,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",140,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"le","","",140,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"gt","","",140,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"ge","","",140,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",140,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",140,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"ordering"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",139,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",140,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",139,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",140,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","std::ffi","",140,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",139,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","std::ffi","",139,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",140,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",139,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"to_owned","","",140,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"clone_into","","",140,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":null}],[11,"as_ref","","",140,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","","",139,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","std::string","",141,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[0,"fs","std","Filesystem manipulation operations.",null,null],[3,"File","std::fs","A reference to an open file on the filesystem.",null,null],[3,"Metadata","","Metadata information about a file.",null,null],[3,"ReadDir","","Iterator over the entries in a directory.",null,null],[3,"DirEntry","","Entries returned by the [`ReadDir`] iterator.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",null,null],[3,"Permissions","","Representation of the various permissions on a file.",null,null],[3,"FileType","","A structure representing a type of file with accessors for each file type. It is returned by [`Metadata::file_type`] method.",null,null],[3,"DirBuilder","","A builder used to create directories in various manners.",null,null],[5,"read","","Read the entire contents of a file into a bytes vector.",null,{"inputs":[{"name":"p"}],"output":{"generics":["vec"],"name":"result"}}],[5,"read_string","","Read the entire contents of a file into a string.",null,{"inputs":[{"name":"p"}],"output":{"generics":["string"],"name":"result"}}],[5,"write","","Write a slice as the entire contents of a file.",null,{"inputs":[{"name":"p"},{"name":"c"}],"output":{"name":"result"}}],[5,"remove_file","","Removes a file from the filesystem.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"metadata","","Given a path, query the file system to get information about a file, directory, etc.",null,{"inputs":[{"name":"p"}],"output":{"generics":["metadata"],"name":"result"}}],[5,"symlink_metadata","","Query the metadata about a file without following symlinks.",null,{"inputs":[{"name":"p"}],"output":{"generics":["metadata"],"name":"result"}}],[5,"rename","","Rename a file or directory to a new name, replacing the original file if `to` already exists.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"copy","","Copies the contents of one file to another. This function will also copy the permission bits of the original file to the destination file.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"generics":["u64"],"name":"result"}}],[5,"hard_link","","Creates a new hard link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"soft_link","","Creates a new symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"read_link","","Reads a symbolic link, returning the file that the link points to.",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"result"}}],[5,"canonicalize","","Returns the canonical form of a path with all intermediate components normalized and symbolic links resolved.",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"result"}}],[5,"create_dir","","Creates a new, empty directory at the provided path",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_dir_all","","Recursively create a directory and all of its parent components if they are missing.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir","","Removes an existing, empty directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir_all","","Removes a directory at this path, after removing all its contents. Use carefully!",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"read_dir","","Returns an iterator over the entries within a directory.",null,{"inputs":[{"name":"p"}],"output":{"generics":["readdir"],"name":"result"}}],[5,"set_permissions","","Changes the permissions found on a file or a directory.",null,{"inputs":[{"name":"p"},{"name":"permissions"}],"output":{"name":"result"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"metadata"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"openoptions"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"permissions"}}],[11,"eq","","",145,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"filetype"}}],[11,"eq","","",146,{"inputs":[{"name":"self"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"self"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"hash","","",146,null],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"open","","Attempts to open a file in read-only mode.",148,{"inputs":[{"name":"p"}],"output":{"generics":["file"],"name":"result"}}],[11,"create","","Opens a file in write-only mode.",148,{"inputs":[{"name":"p"}],"output":{"generics":["file"],"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",148,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"sync_data","","This function is similar to [`sync_all`], except that it may not synchronize file metadata to the filesystem.",148,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_len","","Truncates or extends the underlying file, updating the size of this file to become `size`.",148,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"metadata","","Queries metadata about the underlying file.",148,{"inputs":[{"name":"self"}],"output":{"generics":["metadata"],"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying file.",148,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"result"}}],[11,"set_permissions","","Changes the permissions on the underlying file.",148,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"name":"result"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",148,null],[11,"initializer","","",148,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"write","","",148,null],[11,"flush","","",148,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"seek","","",148,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64"],"name":"result"}}],[11,"new","","Creates a blank new set of options ready for configuration.",144,{"inputs":[],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",144,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","Sets the option for write access.",144,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","Sets the option for the append mode.",144,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","Sets the option for truncating a previous file.",144,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","Sets the option for creating a new file.",144,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create_new","","Sets the option to always create a new file.",144,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",144,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["file"],"name":"result"}}],[11,"file_type","","Returns the file type for this metadata.",142,{"inputs":[{"name":"self"}],"output":{"name":"filetype"}}],[11,"is_dir","","Returns whether this metadata is for a directory.",142,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether this metadata is for a regular file.",142,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",142,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"permissions","","Returns the permissions of the file this metadata is for.",142,{"inputs":[{"name":"self"}],"output":{"name":"permissions"}}],[11,"modified","","Returns the last modification time listed in this metadata.",142,{"inputs":[{"name":"self"}],"output":{"generics":["systemtime"],"name":"result"}}],[11,"accessed","","Returns the last access time of this metadata.",142,{"inputs":[{"name":"self"}],"output":{"generics":["systemtime"],"name":"result"}}],[11,"created","","Returns the creation time listed in the this metadata.",142,{"inputs":[{"name":"self"}],"output":{"generics":["systemtime"],"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"readonly","","Returns whether these permissions describe a readonly (unwritable) file.",145,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_readonly","","Modifies the readonly flag for this set of permissions. If the `readonly` argument is `true`, using the resulting `Permission` will update file permissions to forbid writing. Conversely, if it's `false`, using the resulting `Permission` will update file permissions to allow writing.",145,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"is_dir","","Test whether this file type represents a directory.",146,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_file","","Test whether this file type represents a regular file.",146,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_symlink","","Test whether this file type represents a symbolic link.",146,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next","","",143,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"path","","Returns the full path to the file that this entry represents.",149,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"metadata","","Return the metadata for the file that this entry points at.",149,{"inputs":[{"name":"self"}],"output":{"generics":["metadata"],"name":"result"}}],[11,"file_type","","Return the file type for the file that this entry points at.",149,{"inputs":[{"name":"self"}],"output":{"generics":["filetype"],"name":"result"}}],[11,"file_name","","Returns the bare file name of this directory entry without any other leading path component.",149,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new set of options with default mode/security settings for all platforms and also non-recursive.",147,{"inputs":[],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicates that directories should be created recursively, creating all parent directories. Parents that do not exist are created with the same security and permissions settings.",147,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"create","","Create the specified directory with the options configured in this builder.",147,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[0,"io","std","Traits, helpers, and type definitions for core I/O functionality.",null,null],[3,"BufReader","std::io","The `BufReader` struct adds buffering to any reader.",null,null],[3,"BufWriter","","Wraps a writer and buffers its output.",null,null],[3,"LineWriter","","Wraps a writer and buffers output to it, flushing whenever a newline (`0x0a`, `'\\n'`) is detected.",null,null],[3,"IntoInnerError","","An error returned by `into_inner` which combines an error that happened while writing out the buffer, and the buffered writer object which may be used to recover from the condition.",null,null],[3,"Cursor","","A `Cursor` wraps another type and provides it with a [`Seek`] implementation.",null,null],[3,"Error","","The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and associated traits.",null,null],[3,"Sink","","A writer which will move data into the void.",null,null],[3,"Empty","","A reader which is always at EOF.",null,null],[3,"Repeat","","A reader which yields one byte over and over and over and over and over and...",null,null],[3,"Stdin","","A handle to the standard input stream of a process.",null,null],[3,"Stdout","","A handle to the global standard output stream of the current process.",null,null],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[3,"StdoutLock","","A locked reference to the `Stdout` handle.",null,null],[3,"StderrLock","","A locked reference to the `Stderr` handle.",null,null],[3,"StdinLock","","A locked reference to the `Stdin` handle.",null,null],[3,"Initializer","","A type used to conditionally initialize buffers passed to `Read` methods.",null,null],[3,"Chain","","Adaptor to chain together two readers.",null,null],[3,"Take","","Reader adaptor which limits the bytes read from an underlying reader.",null,null],[3,"Bytes","","An iterator over `u8` values of a reader.",null,null],[3,"Chars","","An iterator over the `char`s of a reader.",null,null],[3,"Split","","An iterator over the contents of an instance of `BufRead` split on a particular byte.",null,null],[3,"Lines","","An iterator over the lines of an instance of `BufRead`.",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",150,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",150,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",150,null],[13,"ConnectionReset","","The connection was reset by the remote server.",150,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",150,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",150,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",150,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",150,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",150,null],[13,"AlreadyExists","","An entity already exists, often a file.",150,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",150,null],[13,"InvalidInput","","A parameter was incorrect.",150,null],[13,"InvalidData","","Data not valid for the operation were encountered.",150,null],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",150,null],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",150,null],[13,"Interrupted","","This operation was interrupted.",150,null],[13,"Other","","Any I/O error not part of this list.",150,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",150,null],[4,"SeekFrom","","Enumeration of possible methods to seek within an I/O object.",null,null],[13,"Start","","Set the offset to the provided number of bytes.",151,null],[13,"End","","Set the offset to the size of this object plus the specified number of bytes.",151,null],[13,"Current","","Set the offset to the current position plus the specified number of bytes.",151,null],[4,"CharsError","","An enumeration of possible errors that can be generated from the `Chars` adapter.",null,null],[13,"NotUtf8","","Variant representing that the underlying stream was read successfully but it did not contain valid utf8 data.",152,null],[13,"Other","","Variant representing that an I/O error occurred.",152,null],[5,"copy","","Copies the entire contents of a reader into a writer.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"generics":["u64"],"name":"result"}}],[5,"sink","","Creates an instance of a writer which will successfully consume all data.",null,{"inputs":[],"output":{"name":"sink"}}],[5,"empty","","Constructs a new handle to an empty reader.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"repeat","","Creates an instance of a reader that infinitely repeats one byte.",null,{"inputs":[{"name":"u8"}],"output":{"name":"repeat"}}],[5,"stdin","","Constructs a new handle to the standard input of the current process.",null,{"inputs":[],"output":{"name":"stdin"}}],[5,"stdout","","Constructs a new handle to the standard output of the current process.",null,{"inputs":[],"output":{"name":"stdout"}}],[5,"stderr","","Constructs a new handle to the standard error of the current process.",null,{"inputs":[],"output":{"name":"stderr"}}],[0,"prelude","","The I/O Prelude",null,null],[11,"new","","Creates a new `BufReader` with a default buffer capacity.",153,{"inputs":[{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",153,{"inputs":[{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",153,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",153,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"is_empty","","Returns `true` if there are no bytes in the internal buffer.",153,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",153,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"seek_relative","","Seeks relative to the current position. If the new position lies within the buffer, the buffer will not be flushed, allowing for more efficient seeks. This method does not return the location of the underlying reader, so the caller must track this information themselves if it is required.",153,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"read","","",153,null],[11,"initializer","","",153,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fill_buf","","",153,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",153,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",153,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64"],"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",155,{"inputs":[{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",155,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",155,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",155,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",155,{"inputs":[{"name":"self"}],"output":{"generics":["intoinnererror"],"name":"result"}}],[11,"write","","",155,null],[11,"flush","","",155,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",155,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64"],"name":"result"}}],[11,"drop","","",155,{"inputs":[{"name":"self"}],"output":null}],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",154,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"into_inner","","Returns the buffered writer instance which generated the error.",154,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"from","","",156,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","","",154,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `LineWriter`.",157,{"inputs":[{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal buffer.",157,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",157,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",157,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",157,{"inputs":[{"name":"self"}],"output":{"generics":["intoinnererror"],"name":"result"}}],[11,"write","","",157,null],[11,"flush","","",157,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",158,{"inputs":[{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",158,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",158,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",158,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"position","","Returns the current position of this cursor.",158,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"set_position","","Sets the position of this cursor.",158,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"seek","","",158,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read","","",158,null],[11,"read_exact","","",158,null],[11,"initializer","","",158,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fill_buf","","",158,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",158,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write","","",158,null],[11,"flush","","",158,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",158,null],[11,"flush","","",158,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",158,null],[11,"flush","","",158,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",158,null],[11,"flush","","",158,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",150,null],[11,"cmp","","",150,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"ordering"}}],[11,"eq","","",150,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",150,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"from","","",156,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",156,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",156,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",156,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",156,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",156,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",156,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",156,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",156,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",156,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",156,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"read","std::boxed","",119,null],[11,"initializer","","",119,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_to_end","","",119,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_to_string","","",119,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_exact","","",119,null],[11,"write","","",119,null],[11,"flush","","",119,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","",119,null],[11,"write_fmt","","",119,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"seek","","",119,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64"],"name":"result"}}],[11,"fill_buf","","",119,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"read_until","","",119,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_line","","",119,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize"],"name":"result"}}],[11,"write","std::vec","",137,null],[11,"write_all","","",137,null],[11,"flush","","",137,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","std::io","",159,null],[11,"initializer","","",159,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fill_buf","","",159,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",159,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",160,null],[11,"initializer","","",160,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",161,null],[11,"flush","","",161,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard input stream, returning a readable guard.",162,{"inputs":[{"name":"self"}],"output":{"name":"stdinlock"}}],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",162,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize"],"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",162,null],[11,"initializer","","",162,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_to_end","","",162,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_to_string","","",162,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_exact","","",162,null],[11,"read","","",163,null],[11,"initializer","","",163,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fill_buf","","",163,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",163,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard output stream, returning a writable guard.",164,{"inputs":[{"name":"self"}],"output":{"name":"stdoutlock"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",164,null],[11,"flush","","",164,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","",164,null],[11,"write_fmt","","",164,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",165,null],[11,"flush","","",165,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard error stream, returning a writable guard.",166,{"inputs":[{"name":"self"}],"output":{"name":"stderrlock"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",166,null],[11,"flush","","",166,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","",166,null],[11,"write_fmt","","",166,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",167,null],[11,"flush","","",167,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Result","","A specialized `Result` type for I/O operations.",null,null],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",168,null],[11,"initializer","","Determines if this `Read`er can work with buffers of uninitialized memory.",168,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",168,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to `buf`.",168,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",168,null],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",168,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over its bytes.",168,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an [`Iterator`] over [`char`]s.",168,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",168,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",168,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",169,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",169,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",169,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",169,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",169,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Seek","","The `Seek` trait provides a cursor which can be moved within a stream of bytes.",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",170,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64"],"name":"result"}}],[8,"BufRead","","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it to perform extra ways of reading.",null,null],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",171,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer, so they should no longer be returned in calls to `read`.",171,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` or EOF is reached.",171,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached, and append them to the provided buffer.",171,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize"],"name":"result"}}],[11,"split","","Returns an iterator over the contents of this reader split on the byte `byte`.",171,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"split"}}],[11,"lines","","Returns an iterator over the lines of this reader.",171,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"zeroing","","Returns a new `Initializer` which will zero out buffers.",172,{"inputs":[],"output":{"name":"initializer"}}],[11,"nop","","Returns a new `Initializer` which will not zero out buffers.",172,{"inputs":[],"output":{"name":"initializer"}}],[11,"should_initialize","","Indicates if a buffer should be initialized.",172,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"initialize","","Initializes a buffer if necessary.",172,null],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"seekfrom"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Consumes the `Chain`, returning the wrapped readers.",173,null],[11,"get_ref","","Gets references to the underlying readers in this `Chain`.",173,null],[11,"get_mut","","Gets mutable references to the underlying readers in this `Chain`.",173,null],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",173,null],[11,"initializer","","",173,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fill_buf","","",173,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",173,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"limit","","Returns the number of bytes that can be read before this instance will return EOF.",174,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"set_limit","","Sets the number of bytes that can be read before this instance will return EOF. This is the same as constructing a new `Take` instance, so the amount of bytes read and the previous limit value don't matter when calling this method.",174,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"into_inner","","Consumes the `Take`, returning the wrapped reader.",174,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying reader.",174,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",174,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read","","",174,null],[11,"initializer","","",174,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fill_buf","","",174,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",174,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",175,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",176,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"description","","",152,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",152,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",177,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",178,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[0,"net","std","Networking primitives for TCP/UDP communication.",null,null],[3,"Ipv4Addr","std::net","An IPv4 address.",null,null],[3,"Ipv6Addr","","An IPv6 address.",null,null],[3,"SocketAddrV4","","An IPv4 socket address.",null,null],[3,"SocketAddrV6","","An IPv6 socket address.",null,null],[3,"TcpStream","","A TCP stream between a local and a remote socket.",null,null],[3,"TcpListener","","A TCP socket server, listening for connections.",null,null],[3,"Incoming","","An iterator that infinitely [`accept`]s connections on a [`TcpListener`].",null,null],[3,"UdpSocket","","A UDP socket.",null,null],[3,"AddrParseError","","An error which can be returned when parsing an IP address or a socket address.",null,null],[3,"LookupHost","","An iterator over `SocketAddr` values returned from a host lookup operation.",null,null],[4,"IpAddr","","An IP address, either IPv4 or IPv6.",null,null],[13,"V4","","An IPv4 address.",179,null],[13,"V6","","An IPv6 address.",179,null],[4,"Ipv6MulticastScope","","",null,null],[13,"InterfaceLocal","","",180,null],[13,"LinkLocal","","",180,null],[13,"RealmLocal","","",180,null],[13,"AdminLocal","","",180,null],[13,"SiteLocal","","",180,null],[13,"OrganizationLocal","","",180,null],[13,"Global","","",180,null],[4,"SocketAddr","","An internet socket address, either IPv4 or IPv6.",null,null],[13,"V4","","An IPv4 socket address.",181,null],[13,"V6","","An IPv6 socket address.",181,null],[4,"Shutdown","","Possible values which can be passed to the [`shutdown`] method of [`TcpStream`].",null,null],[13,"Read","","The reading portion of the [`TcpStream`] should be shut down.",182,null],[13,"Write","","The writing portion of the [`TcpStream`] should be shut down.",182,null],[13,"Both","","Both the reading and the writing portions of the [`TcpStream`] should be shut down.",182,null],[5,"lookup_host","","Resolve the host specified by `host` as a number of `SocketAddr` instances.",null,{"inputs":[{"name":"str"}],"output":{"generics":["lookuphost"],"name":"result"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"ipaddr"}}],[11,"eq","","",179,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",179,null],[11,"partial_cmp","","",179,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",179,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"le","","",179,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"gt","","",179,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ge","","",179,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"cmp","","",179,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"ordering"}}],[11,"eq","","",180,{"inputs":[{"name":"self"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"ipv6multicastscope"}}],[11,"hash","","",180,null],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address.",179,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns [`true`] if this is a loopback address.",179,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_global","","Returns [`true`] if the address appears to be globally routable.",179,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns [`true`] if this is a multicast address.",179,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns [`true`] if this address is in a range designated for documentation.",179,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipv4","","Returns [`true`] if this address is an [IPv4 address], and [`false`] otherwise.",179,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipv6","","Returns [`true`] if this address is an [IPv6 address], and [`false`] otherwise.",179,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",183,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"localhost","","Creates a new IPv4 address with the address pointing to localhost: 127.0.0.1.",183,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"unspecified","","Creates a new IPv4 address representing an unspecified address: 0.0.0.0",183,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",183,null],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address (0.0.0.0).",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns [`true`] if this is a loopback address (127.0.0.0/8).",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_private","","Returns [`true`] if this is a private address.",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns [`true`] if the address is link-local (169.254.0.0/16).",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_global","","Returns [`true`] if the address appears to be globally routable. See [iana-ipv4-special-registry][ipv4-sr].",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns [`true`] if this is a multicast address (224.0.0.0/4).",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns [`true`] if this is a broadcast address (255.255.255.255).",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns [`true`] if this address is in a range designated for documentation.",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible [IPv6 address].",183,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped [IPv6 address].",183,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",179,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipaddr"}}],[11,"from","","",179,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",183,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"eq","","",179,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"eq","","",183,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"hash","","",183,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",183,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",179,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",183,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",183,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"from","","It performs the conversion in network order (big-endian).",183,{"inputs":[{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"from","","",183,null],[11,"from","","",179,null],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",184,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"localhost","","Creates a new IPv6 address representing localhost: `::1`.",184,{"inputs":[],"output":{"name":"ipv6addr"}}],[11,"unspecified","","Creates a new IPv6 address representing the unspecified address: `::`",184,{"inputs":[],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",184,null],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address (::).",184,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns [`true`] if this is a loopback address (::1).",184,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_global","","Returns [`true`] if the address appears to be globally routable.",184,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns [`true`] if this is a unique local address (fc00::/7).",184,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns [`true`] if the address is unicast and link-local (fe80::/10).",184,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns [`true`] if this is a deprecated unicast site-local address (fec0::/10).",184,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns [`true`] if this is an address reserved for documentation (2001:db8::/32).",184,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns [`true`] if the address is a globally routable unicast address.",184,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",184,{"inputs":[{"name":"self"}],"output":{"generics":["ipv6multicastscope"],"name":"option"}}],[11,"is_multicast","","Returns [`true`] if this is a multicast address (ff00::/8).",184,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Converts this address to an [IPv4 address]. Returns [`None`] if this address is neither IPv4-compatible or IPv4-mapped.",184,{"inputs":[{"name":"self"}],"output":{"generics":["ipv4addr"],"name":"option"}}],[11,"octets","","Returns the sixteen eight-bit integers the IPv6 address consists of.",184,null],[11,"fmt","","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"eq","","",184,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"eq","","",184,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"eq","","",179,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"hash","","",184,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",184,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",179,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",184,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",184,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"from","","",184,{"inputs":[{"name":"u128"}],"output":{"name":"ipv6addr"}}],[11,"from","","",184,null],[11,"from","","",184,null],[11,"from","","",179,null],[11,"from","","",179,null],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"socketaddr"}}],[11,"eq","","",181,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"hash","","",181,null],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new socket address from an [IP address] and a port number.",181,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",181,{"inputs":[{"name":"self"}],"output":{"name":"ipaddr"}}],[11,"set_ip","","Changes the IP address associated with this socket address.",181,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":null}],[11,"port","","Returns the port number associated with this socket address.",181,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_port","","Changes the port number associated with this socket address.",181,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"is_ipv4","","Returns [`true`] if the [IP address] in this `SocketAddr` is an [IPv4 address], and [`false`] otherwise.",181,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipv6","","Returns [`true`] if the [IP address] in this `SocketAddr` is an [IPv6 address], and [`false`] otherwise.",181,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new socket address from an [IPv4 address] and a port number.",185,{"inputs":[{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",185,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"set_ip","","Changes the IP address associated with this socket address.",185,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":null}],[11,"port","","Returns the port number associated with this socket address.",185,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_port","","Changes the port number associated with this socket address.",185,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"new","","Creates a new socket address from an [IPv6 address], a 16-bit port number, and the `flowinfo` and `scope_id` fields.",186,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",186,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"set_ip","","Changes the IP address associated with this socket address.",186,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":null}],[11,"port","","Returns the port number associated with this socket address.",186,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_port","","Changes the port number associated with this socket address.",186,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"flowinfo","","Returns the flow information associated with this address.",186,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_flowinfo","","Changes the flow information associated with this socket address.",186,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"scope_id","","Returns the scope ID associated with this address.",186,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_scope_id","","Change the scope ID associated with this socket address.",186,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"from","","",181,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"socketaddr"}}],[11,"from","","",181,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"socketaddr"}}],[11,"from","","",181,null],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",186,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",186,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"socketaddrv4"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"socketaddrv6"}}],[11,"eq","","",185,{"inputs":[{"name":"self"},{"name":"socketaddrv4"}],"output":{"name":"bool"}}],[11,"eq","","",186,{"inputs":[{"name":"self"},{"name":"socketaddrv6"}],"output":{"name":"bool"}}],[11,"hash","","",185,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"hash","","",186,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_socket_addrs","","",181,{"inputs":[{"name":"self"}],"output":{"generics":["intoiter"],"name":"result"}}],[11,"to_socket_addrs","","",185,{"inputs":[{"name":"self"}],"output":{"generics":["intoiter"],"name":"result"}}],[11,"to_socket_addrs","","",186,{"inputs":[{"name":"self"}],"output":{"generics":["intoiter"],"name":"result"}}],[11,"to_socket_addrs","std::string","",141,{"inputs":[{"name":"self"}],"output":{"generics":["intoiter"],"name":"result"}}],[11,"fmt","std::net","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Opens a TCP connection to a remote host.",188,{"inputs":[{"name":"a"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"connect_timeout","","Opens a TCP connection to a remote host with a timeout.",188,{"inputs":[{"name":"socketaddr"},{"name":"duration"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",188,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",188,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",188,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",188,{"inputs":[{"name":"self"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",188,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",188,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",188,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",188,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",188,null],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",188,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",188,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",188,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",188,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",188,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",188,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"read","","",188,null],[11,"initializer","","",188,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"write","","",188,null],[11,"flush","","",188,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified address.",189,{"inputs":[{"name":"a"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",189,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",189,{"inputs":[{"name":"self"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"accept","","Accept a new incoming connection from this listener.",189,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over the connections being received on this listener.",189,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",189,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",189,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_only_v6","","",189,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","",189,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",189,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",189,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"next","","",187,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"fmt","","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a UDP socket from the given address.",190,{"inputs":[{"name":"a"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"recv_from","","Receives a single datagram message on the socket. On success, returns the number of bytes read and the origin.",190,null],[11,"peek_from","","Receives a single datagram message on the socket, without removing it from the queue. On success, returns the number of bytes read and the origin.",190,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",190,null],[11,"local_addr","","Returns the socket address that this socket was created from.",190,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",190,{"inputs":[{"name":"self"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",190,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",190,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",190,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",190,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",190,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",190,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",190,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",190,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",190,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",190,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",190,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",190,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",190,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",190,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",190,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",190,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",190,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",190,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",190,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"connect","","Connects this UDP socket to a remote address, allowing the `send` and `recv` syscalls to be used to send data and also applies filters to only receive data from the specified address.",190,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"send","","Sends data on the socket to the remote address to which it is connected.",190,null],[11,"recv","","Receives a single datagram message on the socket from the remote address to which it is connected. On success, returns the number of bytes read.",190,null],[11,"peek","","Receives single datagram on the socket from the remote address to which it is connected, without removing the message from input queue. On success, returns the number of bytes peeked.",190,null],[11,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",190,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",179,{"inputs":[{"name":"str"}],"output":{"generics":["ipaddr","addrparseerror"],"name":"result"}}],[11,"from_str","","",183,{"inputs":[{"name":"str"}],"output":{"generics":["ipv4addr","addrparseerror"],"name":"result"}}],[11,"from_str","","",184,{"inputs":[{"name":"str"}],"output":{"generics":["ipv6addr","addrparseerror"],"name":"result"}}],[11,"from_str","","",185,{"inputs":[{"name":"str"}],"output":{"generics":["socketaddrv4","addrparseerror"],"name":"result"}}],[11,"from_str","","",186,{"inputs":[{"name":"str"}],"output":{"generics":["socketaddrv6","addrparseerror"],"name":"result"}}],[11,"from_str","","",181,{"inputs":[{"name":"str"}],"output":{"generics":["socketaddr","addrparseerror"],"name":"result"}}],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"addrparseerror"}}],[11,"eq","","",191,{"inputs":[{"name":"self"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",191,{"inputs":[{"name":"self"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",191,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[8,"ToSocketAddrs","","A trait for objects which can be converted or resolved to one or more [`SocketAddr`] values.",null,null],[16,"Iter","","Returned iterator over socket addresses which this type may correspond to.",192,null],[10,"to_socket_addrs","","Converts this object to an iterator of resolved `SocketAddr`s.",192,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"eq","","",182,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"fmt","","",182,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",193,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"option"}}],[11,"fmt","","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"num","std","Additional functionality for numerics.",null,null],[4,"FpCategory","std::num","A classification of floating point numbers.",null,null],[13,"Nan","","\"Not a Number\", often obtained by dividing by zero.",194,null],[13,"Infinite","","Positive or negative infinity.",194,null],[13,"Zero","","Positive or negative zero.",194,null],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`).",194,null],[13,"Normal","","A regular floating point number.",194,null],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[3,"TryFromIntError","","The error type returned when a checked integral type conversion fails.",null,null],[3,"Wrapping","","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",195,null],[0,"os","std","OS-specific functionality.",null,null],[0,"unix","std::os","Experimental extensions to `std` for Unix platforms.",null,null],[0,"io","std::os::unix","Unix-specific extensions to general I/O primitives",null,null],[6,"RawFd","std::os::unix::io","Raw file descriptors.",null,null],[8,"AsRawFd","","A trait to extract the raw unix file descriptor from an underlying object.",null,null],[10,"as_raw_fd","","Extracts the raw file descriptor.",196,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[8,"FromRawFd","","A trait to express the ability to construct an object from a raw file descriptor.",null,null],[10,"from_raw_fd","","Constructs a new instance of `Self` from the given raw file descriptor.",197,{"inputs":[{"name":"rawfd"}],"output":{"name":"self"}}],[8,"IntoRawFd","","A trait to express the ability to consume an object and acquire ownership of its raw file descriptor.",null,null],[10,"into_raw_fd","","Consumes this object, returning the raw underlying file descriptor.",198,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[0,"ffi","std::os::unix","Unix-specific extension to the primitives in the `std::ffi` module",null,null],[8,"OsStringExt","std::os::unix::ffi","Unix-specific extensions to `OsString`.",null,null],[10,"from_vec","","Creates an [`OsString`] from a byte vector.",199,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"self"}}],[10,"into_vec","","Yields the underlying byte vector of this [`OsString`].",199,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[8,"OsStrExt","","Unix-specific extensions to `OsStr`.",null,null],[10,"from_bytes","","Creates an [`OsStr`] from a byte slice.",200,null],[10,"as_bytes","","Gets the underlying byte view of the [`OsStr`] slice.",200,null],[0,"fs","std::os::unix","Unix-specific extensions to primitives in the `std::fs` module.",null,null],[5,"symlink","std::os::unix::fs","Creates a new symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[8,"FileExt","","Unix-specific extensions to [`File`].",null,null],[10,"read_at","","Reads a number of bytes starting from a given offset.",201,null],[10,"write_at","","Writes a number of bytes starting from a given offset.",201,null],[8,"PermissionsExt","","Unix-specific extensions to `Permissions`",null,null],[10,"mode","","Returns the underlying raw `st_mode` bits that contain the standard Unix permissions for this file.",202,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_mode","","Sets the underlying raw bits for this set of permissions.",202,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"from_mode","","Creates a new instance of `Permissions` from the given set of Unix permission bits.",202,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[8,"OpenOptionsExt","","Unix-specific extensions to `OpenOptions`",null,null],[10,"mode","","Sets the mode bits that a new file will be created with.",203,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"custom_flags","","Pass custom flags to the `flags` argument of `open`.",203,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[8,"MetadataExt","","",null,null],[10,"dev","","Returns the ID of the device containing the file.",204,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"ino","","Returns the inode number.",204,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"mode","","Returns the rights applied to this file.",204,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"nlink","","Returns the number of hard links pointing to this file.",204,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"uid","","Returns the user ID of the owner of this file.",204,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"gid","","Returns the group ID of the owner of this file.",204,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rdev","","Returns the device ID of this file (if it is a special one).",204,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"size","","Returns the total size of this file in bytes.",204,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"atime","","Returns the time of the last access to the file.",204,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"atime_nsec","","Returns the time of the last access to the file in nanoseconds.",204,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"mtime","","Returns the time of the last modification of the file.",204,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"mtime_nsec","","Returns the time of the last modification of the file in nanoseconds.",204,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"ctime","","Returns the time of the last status change of the file.",204,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"ctime_nsec","","Returns the time of the last status change of the file in nanoseconds.",204,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"blksize","","Returns the blocksize for filesystem I/O.",204,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"blocks","","Returns the number of blocks allocated to the file, in 512-byte units.",204,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[8,"FileTypeExt","","Add support for special unix types (block/char device, fifo and socket).",null,null],[10,"is_block_device","","Returns whether this file type is a block device.",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_char_device","","Returns whether this file type is a char device.",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_fifo","","Returns whether this file type is a fifo.",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_socket","","Returns whether this file type is a socket.",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"DirEntryExt","","Unix-specific extension methods for [`fs::DirEntry`].",null,null],[10,"ino","","Returns the underlying `d_ino` field in the contained `dirent` structure.",206,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[8,"DirBuilderExt","","An extension trait for [`fs::DirBuilder`] for unix-specific options.",null,null],[10,"mode","","Sets the mode to create new directories with. This option defaults to 0o777.",207,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"process","std::os::unix","Unix-specific extensions to primitives in the `std::process` module.",null,null],[5,"parent_id","std::os::unix::process","Returns the OS-assigned process identifier associated with this process's parent.",null,{"inputs":[],"output":{"name":"u32"}}],[8,"CommandExt","","Unix-specific extensions to the `std::process::Command` builder",null,null],[10,"uid","","Sets the child process's user id. This translates to a `setuid` call in the child process. Failure in the `setuid` call will cause the spawn to fail.",208,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"command"}}],[10,"gid","","Similar to `uid`, but sets the group id of the child process. This has the same semantics as the `uid` field.",208,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"command"}}],[10,"before_exec","","Schedules a closure to be run just before the `exec` function is invoked.",208,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"command"}}],[10,"exec","","Performs all the required setup by this `Command`, followed by calling the `execvp` syscall.",208,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[8,"ExitStatusExt","","Unix-specific extensions to `std::process::ExitStatus`",null,null],[10,"from_raw","","Creates a new `ExitStatus` from the raw underlying `i32` return value of a process.",209,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[10,"signal","","If the process was terminated by a signal, returns that signal.",209,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[0,"raw","std::os::unix","Unix-specific primitives available on all unix platforms",null,null],[6,"uid_t","std::os::unix::raw","",null,null],[6,"gid_t","","",null,null],[6,"pid_t","","",null,null],[6,"pthread_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"off_t","","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"time_t","","",null,null],[0,"thread","std::os::unix","Unix-specific extensions to primitives in the `std::thread` module.",null,null],[6,"RawPthread","std::os::unix::thread","",null,null],[8,"JoinHandleExt","","Unix-specific extensions to `std::thread::JoinHandle`",null,null],[10,"as_pthread_t","","Extracts the raw pthread_t without taking ownership",210,{"inputs":[{"name":"self"}],"output":{"name":"rawpthread"}}],[10,"into_pthread_t","","Consumes the thread, returning the raw pthread_t",210,{"inputs":[{"name":"self"}],"output":{"name":"rawpthread"}}],[0,"net","std::os::unix","Unix-specific networking functionality",null,null],[3,"SocketAddr","std::os::unix::net","An address associated with a Unix socket.",null,null],[3,"UnixStream","","A Unix stream socket.",null,null],[3,"UnixListener","","A structure representing a Unix domain socket server.",null,null],[3,"Incoming","","An iterator over incoming connections to a [`UnixListener`].",null,null],[3,"UnixDatagram","","A Unix datagram socket.",null,null],[0,"prelude","std::os::unix","A prelude for conveniently writing platform-specific code.",null,null],[0,"windows","std::os","Platform-specific extensions to `std` for Windows.",null,null],[0,"ffi","std::os::windows","Windows-specific extensions to the primitives in the `std::ffi` module.",null,null],[3,"EncodeWide","std::os::windows::ffi","Generates a wide character sequence for potentially ill-formed UTF-16.",null,null],[8,"OsStringExt","","Windows-specific extensions to `OsString`.",null,null],[10,"from_wide","","Creates an `OsString` from a potentially ill-formed UTF-16 slice of 16-bit code units.",211,null],[8,"OsStrExt","","Windows-specific extensions to `OsStr`.",null,null],[10,"encode_wide","","Re-encodes an `OsStr` as a wide character sequence, i.e. potentially ill-formed UTF-16.",212,{"inputs":[{"name":"self"}],"output":{"name":"encodewide"}}],[0,"fs","std::os::windows","Windows-specific extensions for the primitives in the `std::fs` module.",null,null],[5,"symlink_file","std::os::windows::fs","Creates a new file symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"symlink_dir","","Creates a new directory symlink on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[8,"FileExt","","Windows-specific extensions to [`File`].",null,null],[10,"seek_read","","Seeks to a given position and reads a number of bytes.",213,null],[10,"seek_write","","Seeks to a given position and writes a number of bytes.",213,null],[8,"OpenOptionsExt","","Windows-specific extensions to [`OpenOptions`].",null,null],[10,"access_mode","","Overrides the `dwDesiredAccess` argument to the call to [`CreateFile`] with the specified value.",214,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"share_mode","","Overrides the `dwShareMode` argument to the call to [`CreateFile`] with the specified value.",214,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"custom_flags","","Sets extra flags for the `dwFileFlags` argument to the call to [`CreateFile2`] to the specified value (or combines it with `attributes` and `security_qos_flags` to set the `dwFlagsAndAttributes` for [`CreateFile`]).",214,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"attributes","","Sets the `dwFileAttributes` argument to the call to [`CreateFile2`] to the specified value (or combines it with `custom_flags` and `security_qos_flags` to set the `dwFlagsAndAttributes` for [`CreateFile`]).",214,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"security_qos_flags","","Sets the `dwSecurityQosFlags` argument to the call to [`CreateFile2`] to the specified value (or combines it with `custom_flags` and `attributes` to set the `dwFlagsAndAttributes` for [`CreateFile`]).",214,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"openoptions"}}],[8,"MetadataExt","","Extension methods for [`fs::Metadata`] to access the raw fields contained within.",null,null],[10,"file_attributes","","Returns the value of the `dwFileAttributes` field of this metadata.",215,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"creation_time","","Returns the value of the `ftCreationTime` field of this metadata.",215,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"last_access_time","","Returns the value of the `ftLastAccessTime` field of this metadata.",215,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"last_write_time","","Returns the value of the `ftLastWriteTime` field of this metadata.",215,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"file_size","","Returns the value of the `nFileSize{High,Low}` fields of this metadata.",215,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"io","std::os::windows","",null,null],[6,"RawHandle","std::os::windows::io","Raw HANDLEs.",null,null],[6,"RawSocket","","Raw SOCKETs.",null,null],[8,"AsRawHandle","","Extract raw handles.",null,null],[10,"as_raw_handle","","Extracts the raw handle, without taking any ownership.",216,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[8,"FromRawHandle","","Construct I/O objects from raw handles.",null,null],[10,"from_raw_handle","","Constructs a new I/O object from the specified raw handle.",217,{"inputs":[{"name":"rawhandle"}],"output":{"name":"self"}}],[8,"IntoRawHandle","","A trait to express the ability to consume an object and acquire ownership of its raw `HANDLE`.",null,null],[10,"into_raw_handle","","Consumes this object, returning the raw underlying handle.",218,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[8,"AsRawSocket","","Extract raw sockets.",null,null],[10,"as_raw_socket","","Extracts the underlying raw socket from this object.",219,{"inputs":[{"name":"self"}],"output":{"name":"rawsocket"}}],[8,"FromRawSocket","","Create I/O objects from raw sockets.",null,null],[10,"from_raw_socket","","Creates a new I/O object from the given raw socket.",220,{"inputs":[{"name":"rawsocket"}],"output":{"name":"self"}}],[8,"IntoRawSocket","","A trait to express the ability to consume an object and acquire ownership of its raw `SOCKET`.",null,null],[10,"into_raw_socket","","Consumes this object, returning the raw underlying socket.",221,{"inputs":[{"name":"self"}],"output":{"name":"rawsocket"}}],[0,"raw","std::os::windows","Windows-specific primitives",null,null],[6,"HANDLE","std::os::windows::raw","",null,null],[6,"SOCKET","","",null,null],[0,"process","std::os::windows","Extensions to `std::process` for Windows.",null,null],[8,"ExitStatusExt","std::os::windows::process","Windows-specific extensions to `std::process::ExitStatus`",null,null],[10,"from_raw","","Creates a new `ExitStatus` from the raw underlying `u32` return value of a process.",222,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[8,"CommandExt","","Windows-specific extensions to the `std::process::Command` builder",null,null],[10,"creation_flags","","Sets the [process creation flags][1] to be passed to `CreateProcess`.",223,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"command"}}],[0,"thread","std::os::windows","Extensions to `std::thread` for Windows.",null,null],[0,"prelude","","A prelude for conveniently writing platform-specific code.",null,null],[0,"linux","std::os","Linux-specific definitions",null,null],[0,"raw","std::os::linux","Linux-specific raw type definitions",null,null],[3,"stat","std::os::linux::raw","",null,null],[12,"st_dev","","",224,null],[12,"st_ino","","",224,null],[12,"st_nlink","","",224,null],[12,"st_mode","","",224,null],[12,"st_uid","","",224,null],[12,"st_gid","","",224,null],[12,"__pad0","","",224,null],[12,"st_rdev","","",224,null],[12,"st_size","","",224,null],[12,"st_blksize","","",224,null],[12,"st_blocks","","",224,null],[12,"st_atime","","",224,null],[12,"st_atime_nsec","","",224,null],[12,"st_mtime","","",224,null],[12,"st_mtime_nsec","","",224,null],[12,"st_ctime","","",224,null],[12,"st_ctime_nsec","","",224,null],[12,"__unused","","",224,null],[11,"clone","","",224,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[6,"dev_t","","",null,null],[6,"mode_t","","",null,null],[6,"pthread_t","","",null,null],[6,"off_t","","",null,null],[6,"ino_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"time_t","","",null,null],[0,"fs","std::os::linux","",null,null],[8,"MetadataExt","std::os::linux::fs","OS-specific extension methods for `fs::Metadata`",null,null],[10,"as_raw_stat","","Gain a reference to the underlying `stat` structure which contains the raw information returned by the OS.",225,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[10,"st_dev","","Returns the device ID on which this file resides.",225,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"st_ino","","Returns the inode number.",225,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"st_mode","","Returns the file type and mode.",225,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"st_nlink","","Returns the number of hard links to file.",225,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"st_uid","","Returns the user ID of the file owner.",225,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"st_gid","","Returns the group ID of the file owner.",225,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"st_rdev","","Returns the device ID that this file represents. Only relevant for special file.",225,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"st_size","","Returns the size of the file (if it is a regular file or a symbolic link) in bytes.",225,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"st_atime","","Returns the last access time.",225,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_atime_nsec","","Returns the last access time, nano seconds part.",225,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_mtime","","Returns the last modification time.",225,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_mtime_nsec","","Returns the last modification time, nano seconds part.",225,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_ctime","","Returns the last status change time.",225,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_ctime_nsec","","Returns the last status change time, nano seconds part.",225,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"st_blksize","","Returns the \"preferred\" blocksize for efficient filesystem I/O.",225,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"st_blocks","","Returns the number of blocks allocated to the file, 512-byte units.",225,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_raw_stat","std::fs","",142,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"st_dev","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"st_ino","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"st_mode","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"st_nlink","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"st_uid","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"st_gid","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"st_rdev","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"st_size","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"st_atime","","",142,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_atime_nsec","","",142,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_mtime","","",142,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_mtime_nsec","","",142,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_ctime","","",142,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_ctime_nsec","","",142,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"st_blksize","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"st_blocks","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"raw","std::os","Raw OS-specific types for the current platform/architecture",null,null],[4,"c_void","std::os::raw","Type used to construct void pointers for use with C.",null,null],[6,"c_char","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[11,"fmt","","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"panic","std","Panic support in the standard library.",null,null],[3,"PanicInfo","std::panic","A struct providing information about a panic.",null,null],[3,"Location","","A struct containing information about the location of a panic.",null,null],[3,"AssertUnwindSafe","","A simple wrapper around a type to assert that it is unwind safe.",null,null],[12,"0","","",227,null],[5,"take_hook","","Unregisters the current panic hook, returning it.",null,{"inputs":[],"output":{"generics":["fn"],"name":"box"}}],[5,"set_hook","","Registers a custom panic hook, replacing any that was previously registered.",null,{"inputs":[{"generics":["fn"],"name":"box"}],"output":null}],[5,"catch_unwind","","Invokes a closure, capturing the cause of an unwinding panic if one occurs.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"resume_unwind","","Triggers a panic without invoking the panic hook.",null,null],[8,"UnwindSafe","","A marker trait which represents \"panic safe\" types in Rust.",null,null],[8,"RefUnwindSafe","","A marker trait representing types where a shared reference is considered unwind safe.",null,null],[11,"deref","","",227,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",227,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"call_once","","",227,null],[11,"fmt","","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"path","std","Cross-platform path manipulation.",null,null],[3,"PrefixComponent","std::path","A structure wrapping a Windows path prefix as well as its unparsed string representation.",null,null],[3,"Components","","An iterator over the [`Component`]s of a [`Path`].",null,null],[3,"Iter","","An iterator over the [`Component`]s of a [`Path`], as [`OsStr`] slices.",null,null],[3,"PathBuf","","An owned, mutable path (akin to [`String`]).",null,null],[3,"Path","","A slice of a path (akin to [`str`]).",null,null],[3,"StripPrefixError","","An error returned from [`Path::strip_prefix`][`strip_prefix`] if the prefix was not found.",null,null],[3,"Display","","Helper struct for safely printing paths with [`format!`] and `{}`.",null,null],[4,"Prefix","","Windows path prefixes, e.g. `C:` or `\\\\server\\share`.",null,null],[13,"Verbatim","","Verbatim prefix, e.g. `\\\\?\\cat_pics`.",228,null],[13,"VerbatimUNC","","Verbatim prefix using Windows' Uniform Naming Convention, e.g. `\\\\?\\UNC\\server\\share`.",228,null],[13,"VerbatimDisk","","Verbatim disk prefix, e.g. `\\\\?\\C:\\`.",228,null],[13,"DeviceNS","","Device namespace prefix, e.g. `\\\\.\\COM42`.",228,null],[13,"UNC","","Prefix using Windows' Uniform Naming Convention, e.g. `\\\\server\\share`.",228,null],[13,"Disk","","Prefix `C:` for the given disk drive.",228,null],[4,"Component","","A single component of a path.",null,null],[13,"Prefix","","A Windows path prefix, e.g. `C:` or `\\\\server\\share`.",229,null],[13,"RootDir","","The root directory component, appears after any prefix and before anything else.",229,null],[13,"CurDir","","A reference to the current directory, i.e. `.`.",229,null],[13,"ParentDir","","A reference to the parent directory, i.e. `..`.",229,null],[13,"Normal","","A normal component, e.g. `a` and `b` in `a/b`.",229,null],[5,"is_separator","","Determines whether the character is one of the permitted path separators for the current platform.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"MAIN_SEPARATOR","","The primary separator of path components for the current platform.",null,null],[11,"clone","","",228,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"fmt","","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",228,null],[11,"partial_cmp","","",228,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",228,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"le","","",228,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"gt","","",228,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ge","","",228,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"cmp","","",228,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"ordering"}}],[11,"eq","","",228,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ne","","",228,{"inputs":[{"name":"self"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",228,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",230,{"inputs":[{"name":"self"}],"output":{"name":"prefixcomponent"}}],[11,"fmt","","",230,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kind","","Returns the parsed prefix data.",230,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"as_os_str","","Returns the raw [`OsStr`] slice for this prefix.",230,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"eq","","",230,{"inputs":[{"name":"self"},{"name":"prefixcomponent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",230,{"inputs":[{"name":"self"},{"name":"prefixcomponent"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",230,{"inputs":[{"name":"self"},{"name":"prefixcomponent"}],"output":{"name":"ordering"}}],[11,"hash","","",230,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",229,{"inputs":[{"name":"self"}],"output":{"name":"component"}}],[11,"eq","","",229,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ne","","",229,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",229,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",229,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"le","","",229,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"gt","","",229,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ge","","",229,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"bool"}}],[11,"cmp","","",229,{"inputs":[{"name":"self"},{"name":"component"}],"output":{"name":"ordering"}}],[11,"hash","","",229,null],[11,"fmt","","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_os_str","","Extracts the underlying [`OsStr`] slice.",229,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","","",229,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","","",229,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"clone","","",231,{"inputs":[{"name":"self"}],"output":{"name":"components"}}],[11,"clone","","",232,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"fmt","","",231,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",231,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",231,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",231,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"fmt","","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",232,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",232,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",232,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"next","","",232,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"next_back","","",232,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"next","","",231,{"inputs":[{"name":"self"}],"output":{"generics":["component"],"name":"option"}}],[11,"next_back","","",231,{"inputs":[{"name":"self"}],"output":{"generics":["component"],"name":"option"}}],[11,"eq","","",231,{"inputs":[{"name":"self"},{"name":"components"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",231,{"inputs":[{"name":"self"},{"name":"components"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",231,{"inputs":[{"name":"self"},{"name":"components"}],"output":{"name":"ordering"}}],[11,"clone","","",233,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"new","","Allocates an empty `PathBuf`.",233,{"inputs":[],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a [`Path`] slice.",233,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"push","","Extends `self` with `path`.",233,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"pop","","Truncates `self` to [`self.parent`].",233,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_file_name","","Updates [`self.file_name`] to `file_name`.",233,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"set_extension","","Updates [`self.extension`] to `extension`.",233,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal [`OsString`] storage.",233,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"into_boxed_path","","Converts this `PathBuf` into a [boxed][`Box`] [`Path`].",233,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"box"}}],[11,"from","std::boxed","",119,{"inputs":[{"name":"path"}],"output":{"generics":["path"],"name":"box"}}],[11,"from","std::path","",233,{"inputs":[{"generics":["path"],"name":"box"}],"output":{"name":"pathbuf"}}],[11,"from","std::boxed","",119,{"inputs":[{"name":"pathbuf"}],"output":{"generics":["path"],"name":"box"}}],[11,"from","std::path","",233,{"inputs":[{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",233,{"inputs":[{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","std::ffi","",139,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"from","std::path","",233,{"inputs":[{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",233,{"inputs":[{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",233,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",233,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"borrow","","",233,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"default","","",233,{"inputs":[],"output":{"name":"self"}}],[11,"from","std::borrow","",74,{"inputs":[{"name":"path"}],"output":{"generics":["path"],"name":"cow"}}],[11,"from","","",74,{"inputs":[{"name":"pathbuf"}],"output":{"generics":["path"],"name":"cow"}}],[11,"from","std::rc","",138,{"inputs":[{"name":"pathbuf"}],"output":{"generics":["path"],"name":"rc"}}],[11,"from","","",138,{"inputs":[{"name":"path"}],"output":{"generics":["path"],"name":"rc"}}],[11,"to_owned","std::path","",234,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"clone_into","","",234,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":null}],[11,"eq","","",233,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"hash","","",233,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",233,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",233,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"ordering"}}],[11,"as_ref","","",233,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"fmt","","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",235,{"inputs":[{"name":"self"}],"output":{"name":"stripprefixerror"}}],[11,"eq","","",235,{"inputs":[{"name":"self"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"ne","","",235,{"inputs":[{"name":"self"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"new","","Directly wraps a string slice as a `Path` slice.",234,{"inputs":[{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying [`OsStr`] slice.",234,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a [`&str`] slice if the `Path` is valid unicode.",234,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"to_string_lossy","","Converts a `Path` to a [`Cow<str>`].",234,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"cow"}}],[11,"to_path_buf","","Converts a `Path` to an owned [`PathBuf`].",234,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"is_absolute","","Returns `true` if the `Path` is absolute, i.e. if it is independent of the current directory.",234,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_relative","","Returns `true` if the `Path` is relative, i.e. not absolute.",234,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_root","","Returns `true` if the `Path` has a root.",234,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parent","","Returns the `Path` without its final component, if there is one.",234,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"file_name","","Returns the final component of the `Path`, if there is one.",234,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",234,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["path","stripprefixerror"],"name":"result"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",234,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",234,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"file_stem","","Extracts the stem (non-extension) portion of [`self.file_name`].",234,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"extension","","Extracts the extension of [`self.file_name`], if possible.",234,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"join","","Creates an owned [`PathBuf`] with `path` adjoined to `self`.",234,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"with_file_name","","Creates an owned [`PathBuf`] like `self` but with the given file name.",234,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","Creates an owned [`PathBuf`] like `self` but with the given extension.",234,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"components","","Produces an iterator over the [`Component`]s of the path.",234,{"inputs":[{"name":"self"}],"output":{"name":"components"}}],[11,"iter","","Produces an iterator over the path's components viewed as [`OsStr`] slices.",234,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"display","","Returns an object that implements [`Display`] for safely printing paths that may contain non-Unicode data.",234,{"inputs":[{"name":"self"}],"output":{"name":"display"}}],[11,"metadata","","Queries the file system to get information about a file, directory, etc.",234,{"inputs":[{"name":"self"}],"output":{"generics":["metadata"],"name":"result"}}],[11,"symlink_metadata","","Queries the metadata about a file without following symlinks.",234,{"inputs":[{"name":"self"}],"output":{"generics":["metadata"],"name":"result"}}],[11,"canonicalize","","Returns the canonical form of the path with all intermediate components normalized and symbolic links resolved.",234,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"result"}}],[11,"read_link","","Reads a symbolic link, returning the file that the link points to.",234,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"result"}}],[11,"read_dir","","Returns an iterator over the entries within a directory.",234,{"inputs":[{"name":"self"}],"output":{"generics":["readdir"],"name":"result"}}],[11,"exists","","Returns whether the path points at an existing entity.",234,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether the path exists on disk and is pointing at a regular file.",234,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_dir","","Returns whether the path exists on disk and is pointing at a directory.",234,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_path_buf","","Converts a [`Box<Path>`][`Box`] into a [`PathBuf`] without copying or allocating.",234,{"inputs":[{"generics":["path"],"name":"box"}],"output":{"name":"pathbuf"}}],[11,"as_ref","","",234,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"fmt","","",234,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",234,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",234,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",234,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",234,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"as_ref","","",234,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi","",140,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","std::borrow","",74,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi","",139,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","std::string","",141,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","std::path","",233,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",233,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",234,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",233,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",234,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",233,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",233,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","std::path","",234,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","std::path","",234,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","std::path","",233,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","std::path","",233,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",233,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",140,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",233,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","std::ffi","",140,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","std::path","",233,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",233,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",233,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",233,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","std::path","",233,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",139,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",233,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","std::ffi","",139,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","std::path","",234,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",140,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",234,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","std::ffi","",140,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","std::path","",234,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",234,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",234,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",234,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","std::path","",234,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",139,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",234,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","std::ffi","",139,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",140,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","std::ffi","",139,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",139,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",140,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","std::ffi","",140,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","std::ffi","",139,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","std::ffi","",139,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","std::path","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",235,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"process","std","A module for working with processes.",null,null],[3,"Child","std::process","Representation of a running or exited child process.",null,null],[12,"stdin","","The handle for writing to the child's standard input (stdin), if it has been captured.",237,null],[12,"stdout","","The handle for reading from the child's standard output (stdout), if it has been captured.",237,null],[12,"stderr","","The handle for reading from the child's standard error (stderr), if it has been captured.",237,null],[3,"ChildStdin","","A handle to a child process's standard input (stdin).",null,null],[3,"ChildStdout","","A handle to a child process's standard output (stdout).",null,null],[3,"ChildStderr","","A handle to a child process's stderr.",null,null],[3,"Command","","A process builder, providing fine-grained control over how a new process should be spawned.",null,null],[3,"Output","","The output of a finished process.",null,null],[12,"status","","The status (exit code) of the process.",238,null],[12,"stdout","","The data that the process wrote to stdout.",238,null],[12,"stderr","","The data that the process wrote to stderr.",238,null],[3,"Stdio","","Describes what to do with a standard I/O stream for a child process when passed to the [`stdin`], [`stdout`], and [`stderr`] methods of [`Command`].",null,null],[3,"ExitStatus","","Describes the result of a process after it has terminated.",null,null],[5,"exit","","Terminates the current process with the specified exit code.",null,null],[5,"abort","","Terminates the process in an abnormal fashion.",null,null],[5,"id","","Returns the OS-assigned process identifier associated with this process.",null,{"inputs":[],"output":{"name":"u32"}}],[11,"fmt","","",237,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",239,null],[11,"flush","","",239,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",239,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",240,null],[11,"initializer","","",240,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fmt","","",240,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",241,null],[11,"initializer","","",241,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"fmt","","",241,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Command` for launching the program at path `program`, with the following default configuration:",242,{"inputs":[{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",242,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"command"}}],[11,"args","","Add multiple arguments to pass to the program.",242,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"command"}}],[11,"env","","Inserts or updates an environment variable mapping.",242,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"command"}}],[11,"envs","","Add or update multiple environment variable mappings.",242,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"command"}}],[11,"env_remove","","Removes an environment variable mapping.",242,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"command"}}],[11,"env_clear","","Clears the entire environment map for the child process.",242,{"inputs":[{"name":"self"}],"output":{"name":"command"}}],[11,"current_dir","","Sets the working directory for the child process.",242,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"command"}}],[11,"stdin","","Configuration for the child process's standard input (stdin) handle.",242,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"command"}}],[11,"stdout","","Configuration for the child process's standard output (stdout) handle.",242,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"command"}}],[11,"stderr","","Configuration for the child process's standard error (stderr) handle.",242,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"command"}}],[11,"spawn","","Executes the command as a child process, returning a handle to it.",242,{"inputs":[{"name":"self"}],"output":{"generics":["child"],"name":"result"}}],[11,"output","","Executes the command as a child process, waiting for it to finish and collecting all of its output.",242,{"inputs":[{"name":"self"}],"output":{"generics":["output"],"name":"result"}}],[11,"status","","Executes a command as a child process, waiting for it to finish and collecting its exit status.",242,{"inputs":[{"name":"self"}],"output":{"generics":["exitstatus"],"name":"result"}}],[11,"fmt","","Format the program and arguments of a Command for display. Any non-utf8 data is lossily converted using the utf8 replacement character.",242,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",238,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"bool"}}],[11,"ne","","",238,{"inputs":[{"name":"self"},{"name":"output"}],"output":{"name":"bool"}}],[11,"clone","","",238,{"inputs":[{"name":"self"}],"output":{"name":"output"}}],[11,"fmt","","",238,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",243,{"inputs":[],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",243,{"inputs":[],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the stream to `/dev/null`",243,{"inputs":[],"output":{"name":"stdio"}}],[11,"fmt","","",243,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",243,{"inputs":[{"name":"childstdin"}],"output":{"name":"stdio"}}],[11,"from","","",243,{"inputs":[{"name":"childstdout"}],"output":{"name":"stdio"}}],[11,"from","","",243,{"inputs":[{"name":"childstderr"}],"output":{"name":"stdio"}}],[11,"from","","",243,{"inputs":[{"name":"file"}],"output":{"name":"stdio"}}],[11,"eq","","",244,{"inputs":[{"name":"self"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",244,{"inputs":[{"name":"self"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"clone","","",244,{"inputs":[{"name":"self"}],"output":{"name":"exitstatus"}}],[11,"fmt","","",244,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"success","","Was termination successful? Signal termination is not considered a success, and success is defined as a zero exit status.",244,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"code","","Returns the exit code of the process, if any.",244,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[11,"fmt","","",244,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","Forces the child to exit. This is equivalent to sending a SIGKILL on unix platforms.",237,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"id","","Returns the OS-assigned process identifier associated with this child.",237,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"wait","","Waits for the child to exit completely, returning the status that it exited with. This function will continue to have the same return value after it has been called at least once.",237,{"inputs":[{"name":"self"}],"output":{"generics":["exitstatus"],"name":"result"}}],[11,"try_wait","","Attempts to collect the exit status of the child if it has already exited.",237,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining output on the stdout/stderr handles, returning an `Output` instance.",237,{"inputs":[{"name":"self"}],"output":{"generics":["output"],"name":"result"}}],[0,"sync","std","Useful synchronization primitives.",null,null],[3,"Arc","std::sync","A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically Reference Counted'.",null,null],[3,"Weak","","`Weak` is a version of [`Arc`] that holds a non-owning reference to the managed value. The value is accessed by calling [`upgrade`] on the `Weak` pointer, which returns an [`Option`]`<`[`Arc`]`<T>>`.",null,null],[0,"atomic","","Atomic types",null,null],[5,"spin_loop_hint","std::sync::atomic","Save power or switch hyperthreads in a busy-wait spin-loop.",null,null],[3,"AtomicBool","","A boolean type which can be safely shared between threads.",null,null],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads.",null,null],[4,"Ordering","","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations.",245,null],[13,"Release","","When coupled with a store, all previous writes become visible to the other threads that perform a load with [`Acquire`] ordering on the same value.",245,null],[13,"Acquire","","When coupled with a load, all subsequent loads will see data written before a store with [`Release`] ordering on the same value in other threads.",245,null],[13,"AcqRel","","When coupled with a load, uses [`Acquire`] ordering, and with a store [`Release`] ordering.",245,null],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all sequentially consistent operations in the same order.",245,null],[17,"ATOMIC_BOOL_INIT","","An [`AtomicBool`] initialized to `false`.",null,null],[3,"AtomicI8","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I8_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU8","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U8_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI16","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I16_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU16","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U16_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI32","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I32_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU32","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U32_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI64","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I64_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU64","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U64_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicIsize","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_ISIZE_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicUsize","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_USIZE_INIT","","An atomic integer initialized to `0`.",null,null],[5,"fence","","An atomic fence.",null,null],[5,"compiler_fence","","A compiler memory fence.",null,null],[3,"Barrier","std::sync","A barrier enables multiple threads to synchronize the beginning of some computation.",null,null],[3,"BarrierWaitResult","","A `BarrierWaitResult` is returned by [`wait`] when all threads in the [`Barrier`] have rendezvoused.",null,null],[3,"Condvar","","A Condition Variable",null,null],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition variable returned due to a time out or not.",null,null],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared data",null,null],[3,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[3,"Once","","A synchronization primitive which can be used to run a one-time global initialization. Useful for one-time initialization for FFI or related functionality. This type can only be constructed with the [`ONCE_INIT`] value.",null,null],[3,"OnceState","","State yielded to [`call_once_force`]’s closure parameter. The state can be used to query the poison status of the [`Once`].",null,null],[3,"PoisonError","","A type of error which can be returned whenever a lock is acquired.",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",null,null],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",null,null],[4,"TryLockError","","An enumeration of possible errors associated with a [`TryLockResult`] which can occur while trying to aquire a lock, from the [`try_lock`] method on a [`Mutex`] or the [`try_read`] and [`try_write`] methods on an [`RwLock`].",null,null],[13,"Poisoned","","The lock could not be acquired because another thread failed while holding the lock.",246,null],[13,"WouldBlock","","The lock could not be acquired at this time because the operation would otherwise block.",246,null],[0,"mpsc","","Multi-producer, single-consumer FIFO queue communication primitives.",null,null],[3,"Select","std::sync::mpsc","The \"receiver set\" of the select interface. This structure is used to manage a set of receivers which are being selected over.",null,null],[3,"Handle","","A handle to a receiver which is currently a member of a `Select` set of receivers.  This handle is used to keep the receiver in the set as well as interact with the underlying receiver.",null,null],[3,"Receiver","","The receiving half of Rust's [`channel`][] (or [`sync_channel`]) type. This half can only be owned by one thread.",null,null],[3,"Iter","","An iterator over messages on a [`Receiver`], created by [`iter`].",null,null],[3,"TryIter","","An iterator that attempts to yield all pending values for a [`Receiver`], created by [`try_iter`].",null,null],[3,"IntoIter","","An owning iterator over messages on a [`Receiver`], created by Receiver::into_iter.",null,null],[3,"Sender","","The sending-half of Rust's asynchronous [`channel`] type. This half can only be owned by one thread, but it can be cloned to send to other threads.",null,null],[3,"SyncSender","","The sending-half of Rust's synchronous [`sync_channel`] type.",null,null],[3,"SendError","","An error returned from the [`Sender::send`] or [`SyncSender::send`] function on channels.",null,null],[12,"0","","",247,null],[3,"RecvError","","An error returned from the [`recv`] function on a [`Receiver`].",null,null],[4,"TryRecvError","","This enumeration is the list of the possible reasons that [`try_recv`] could not return data when called. This can occur with both a [`channel`] and a [`sync_channel`].",null,null],[13,"Empty","","This channel is currently empty, but the Sender(s) have not yet disconnected, so data may yet become available.",248,null],[13,"Disconnected","","The channel's sending half has become disconnected, and there will never be any more data received on it.",248,null],[4,"RecvTimeoutError","","This enumeration is the list of possible errors that made [`recv_timeout`] unable to return data when called. This can occur with both a [`channel`] and a [`sync_channel`].",null,null],[13,"Timeout","","This channel is currently empty, but the Sender(s) have not yet disconnected, so data may yet become available.",249,null],[13,"Disconnected","","The channel's sending half has become disconnected, and there will never be any more data received on it.",249,null],[4,"TrySendError","","This enumeration is the list of the possible error outcomes for the [`try_send`] method.",null,null],[13,"Full","","The data could not be sent on the [`sync_channel`] because it would require that the callee block to send the data.",250,null],[13,"Disconnected","","This [`sync_channel`]'s receiving half has disconnected, so the data could not be sent. The data is returned back to the callee in this case.",250,null],[5,"channel","","Creates a new asynchronous channel, returning the sender/receiver halves. All data sent on the [`Sender`] will become available on the [`Receiver`] in the same order as it was sent, and no [`send`] will block the calling thread (this channel has an \"infinite buffer\", unlike [`sync_channel`], which will block after its buffer limit is reached). [`recv`] will block until a message is available.",null,null],[5,"sync_channel","","Creates a new synchronous, bounded channel. All data sent on the [`SyncSender`] will become available on the [`Receiver`] in the same order as it was sent. Like asynchronous [`channel`]s, the [`Receiver`] will block until a message becomes available. `sync_channel` differs greatly in the semantics of the sender, however.",null,null],[11,"new","","Creates a new selection structure. This set is initially empty.",251,{"inputs":[],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note that this does not add the receiver to the receiver set, for that you must call the `add` method on the handle itself.",251,{"inputs":[{"name":"self"},{"name":"receiver"}],"output":{"name":"handle"}}],[11,"wait","","Waits for an event on this receiver set. The returned value is not an index, but rather an id. This id can be queried against any active `Handle` structures (each one has an `id` method). The handle with the matching `id` will have some sort of event available on it. The event could either be that data is available or the corresponding channel has been closed.",251,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"id","","Retrieves the id of this handle.",252,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on success or `None` if the channel disconnects. This function has the same semantics as `Receiver.recv`",252,{"inputs":[{"name":"self"}],"output":{"generics":["recverror"],"name":"result"}}],[11,"add","","Adds this handle to the receiver set that the handle was created from. This method can be called multiple times, but it has no effect if `add` was called previously.",252,{"inputs":[{"name":"self"}],"output":null}],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because it has no guarantee that the `Handle` was not moved since `add` was called.",252,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",251,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",252,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",251,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",252,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",253,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",254,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",255,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",247,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",247,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"clone","","",247,{"inputs":[{"name":"self"}],"output":{"name":"senderror"}}],[11,"eq","","",256,{"inputs":[{"name":"self"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"clone","","",256,{"inputs":[{"name":"self"}],"output":{"name":"recverror"}}],[11,"fmt","","",256,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",248,{"inputs":[{"name":"self"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"clone","","",248,{"inputs":[{"name":"self"}],"output":{"name":"tryrecverror"}}],[11,"fmt","","",248,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",249,{"inputs":[{"name":"self"},{"name":"recvtimeouterror"}],"output":{"name":"bool"}}],[11,"clone","","",249,{"inputs":[{"name":"self"}],"output":{"name":"recvtimeouterror"}}],[11,"fmt","","",249,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",250,{"inputs":[{"name":"self"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",250,{"inputs":[{"name":"self"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"clone","","",250,{"inputs":[{"name":"self"}],"output":{"name":"trysenderror"}}],[11,"send","","Attempts to send a value on this channel, returning it back if it could not be sent.",257,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"result"}}],[11,"clone","","",257,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"drop","","",257,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",257,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Sends a value on this synchronous channel.",258,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"result"}}],[11,"try_send","","Attempts to send a value on this channel without blocking.",258,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["trysenderror"],"name":"result"}}],[11,"clone","","",258,{"inputs":[{"name":"self"}],"output":{"name":"syncsender"}}],[11,"drop","","",258,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",258,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking.",259,{"inputs":[{"name":"self"}],"output":{"generics":["tryrecverror"],"name":"result"}}],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the corresponding channel has hung up.",259,{"inputs":[{"name":"self"}],"output":{"generics":["recverror"],"name":"result"}}],[11,"recv_timeout","","Attempts to wait for a value on this receiver, returning an error if the corresponding channel has hung up, or if it waits more than `timeout`.",259,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["recvtimeouterror"],"name":"result"}}],[11,"recv_deadline","","Attempts to wait for a value on this receiver, returning an error if the corresponding channel has hung up, or if `deadline` is reached.",259,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"generics":["recvtimeouterror"],"name":"result"}}],[11,"iter","","Returns an iterator that will block waiting for messages, but never [`panic!`]. It will return [`None`] when the channel has hung up.",259,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"try_iter","","Returns an iterator that will attempt to yield all pending values. It will return `None` if there are no more pending values or if the channel has hung up. The iterator will never [`panic!`] or block the user by waiting for values.",259,{"inputs":[{"name":"self"}],"output":{"name":"tryiter"}}],[11,"next","","",253,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",254,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",255,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",259,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drop","","",259,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",259,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",247,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",247,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",247,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",247,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",250,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",250,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",250,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",250,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",250,{"inputs":[{"name":"senderror"}],"output":{"name":"trysenderror"}}],[11,"fmt","","",256,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",256,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",256,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",248,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",248,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",248,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",248,{"inputs":[{"name":"recverror"}],"output":{"name":"tryrecverror"}}],[11,"fmt","","",249,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",249,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",249,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",249,{"inputs":[{"name":"recverror"}],"output":{"name":"recvtimeouterror"}}],[11,"fmt","std::sync","",260,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new barrier that can block a given number of threads.",260,{"inputs":[{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads have rendezvoused here.",260,{"inputs":[{"name":"self"}],"output":{"name":"barrierwaitresult"}}],[11,"fmt","","",261,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_leader","","Returns whether this thread from [`wait`] is the \"leader thread\".",261,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",262,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",262,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"clone","","",262,{"inputs":[{"name":"self"}],"output":{"name":"waittimeoutresult"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",262,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and notified.",263,{"inputs":[],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a notification.",263,{"inputs":[{"name":"self"},{"name":"mutexguard"}],"output":{"generics":["mutexguard"],"name":"lockresult"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a specified duration.",263,{"inputs":[{"name":"self"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"lockresult"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a specified duration.",263,{"inputs":[{"name":"self"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"lockresult"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",263,{"inputs":[{"name":"self"}],"output":null}],[11,"notify_all","","Wakes up all blocked threads on this condvar.",263,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates a `Condvar` which is ready to be waited on and notified.",263,{"inputs":[],"output":{"name":"condvar"}}],[11,"drop","","",263,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",264,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",264,{"inputs":[{"name":"self"}],"output":{"generics":["mutexguard"],"name":"lockresult"}}],[11,"try_lock","","Attempts to acquire this lock.",264,{"inputs":[{"name":"self"}],"output":{"generics":["mutexguard"],"name":"trylockresult"}}],[11,"is_poisoned","","Determines whether the mutex is poisoned.",264,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",264,{"inputs":[{"name":"self"}],"output":{"name":"lockresult"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",264,{"inputs":[{"name":"self"}],"output":{"name":"lockresult"}}],[11,"drop","","",264,{"inputs":[{"name":"self"}],"output":null}],[11,"from","","Creates a new mutex in an unlocked state ready for use. This is equivalent to [`Mutex::new`].",264,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"default","","Creates a `Mutex<T>`, with the `Default` value for T.",264,{"inputs":[],"output":{"name":"mutex"}}],[11,"fmt","","",264,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",265,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",265,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",265,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",265,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",265,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Once` value.",267,{"inputs":[],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure will be executed if this is the first time `call_once` has been called, and otherwise the routine will not be invoked.",267,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"call_once_force","","Performs the same function as [`call_once`] except ignores poisoning.",267,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fmt","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poisoned","","Returns whether the associated [`Once`] was poisoned prior to the invocation of the closure passed to [`call_once_force`].",266,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",268,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",268,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockreadguard"],"name":"lockresult"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",268,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockreadguard"],"name":"trylockresult"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current thread until it can be acquired.",268,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockwriteguard"],"name":"lockresult"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",268,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockwriteguard"],"name":"trylockresult"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",268,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",268,{"inputs":[{"name":"self"}],"output":{"name":"lockresult"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",268,{"inputs":[{"name":"self"}],"output":{"name":"lockresult"}}],[11,"drop","","",268,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",268,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates a new `RwLock<T>`, with the `Default` value for T.",268,{"inputs":[],"output":{"name":"rwlock"}}],[11,"from","","Creates a new instance of an `RwLock<T>` which is unlocked. This is equivalent to [`RwLock::new`].",268,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",269,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",269,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",270,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",270,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",269,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",270,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",270,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",269,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",270,{"inputs":[{"name":"self"}],"output":null}],[6,"TryLockResult","","A type alias for the result of a nonblocking locking method.",null,null],[6,"LockResult","","A type alias for the result of a lock method which can be poisoned.",null,null],[17,"ONCE_INIT","","Initialization value for static [`Once`] values.",null,null],[0,"time","std","Temporal quantification.",null,null],[3,"Duration","std::time","A `Duration` type to represent a span of time, typically used for system timeouts.",null,null],[3,"Instant","","A measurement of a monotonically nondecreasing clock. Opaque and useful only with `Duration`.",null,null],[3,"SystemTime","","A measurement of the system clock, useful for talking to external entities like the file system or other processes.",null,null],[3,"SystemTimeError","","An error returned from the `duration_since` and `elapsed` methods on `SystemTime`, used to learn how far in the opposite direction a system time lies.",null,null],[11,"clone","","",271,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",271,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",271,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",271,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",271,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",271,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",271,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",271,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",271,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",271,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",271,null],[11,"default","","",271,{"inputs":[],"output":{"name":"duration"}}],[11,"new","","Creates a new `Duration` from the specified number of whole seconds and additional nanoseconds.",271,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of whole seconds.",271,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",271,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_micros","","Creates a new `Duration` from the specified number of microseconds.",271,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_nanos","","Creates a new `Duration` from the specified number of nanoseconds.",271,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds contained by this `Duration`.",271,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"subsec_millis","","Returns the fractional part of this `Duration`, in milliseconds.",271,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"subsec_micros","","Returns the fractional part of this `Duration`, in microseconds.",271,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"subsec_nanos","","Returns the fractional part of this `Duration`, in nanoseconds.",271,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"checked_add","","Checked `Duration` addition. Computes `self + other`, returning [`None`] if overflow occurred.",271,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"checked_sub","","Checked `Duration` subtraction. Computes `self - other`, returning [`None`] if the result would be negative or if overflow occurred.",271,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"checked_mul","","Checked `Duration` multiplication. Computes `self * other`, returning [`None`] if overflow occurred.",271,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["duration"],"name":"option"}}],[11,"checked_div","","Checked `Duration` division. Computes `self / other`, returning [`None`] if `other == 0`.",271,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["duration"],"name":"option"}}],[11,"add","","",271,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"add_assign","","",271,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"sub","","",271,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub_assign","","",271,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"mul","","",271,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"mul_assign","","",271,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div","","",271,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"div_assign","","",271,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"sum","","",271,{"inputs":[{"name":"i"}],"output":{"name":"duration"}}],[11,"sum","","",271,{"inputs":[{"name":"i"}],"output":{"name":"duration"}}],[17,"UNIX_EPOCH","","An anchor in time which can be used to create new `SystemTime` instances or learn about where in time a `SystemTime` lies.",null,null],[11,"clone","","",272,{"inputs":[{"name":"self"}],"output":{"name":"instant"}}],[11,"eq","","",272,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ne","","",272,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",272,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",272,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"le","","",272,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"gt","","",272,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ge","","",272,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"cmp","","",272,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"ordering"}}],[11,"hash","","",272,null],[11,"clone","","",273,{"inputs":[{"name":"self"}],"output":{"name":"systemtime"}}],[11,"eq","","",273,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ne","","",273,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",273,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",273,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"le","","",273,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"gt","","",273,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ge","","",273,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"cmp","","",273,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"hash","","",273,null],[11,"clone","","",274,{"inputs":[{"name":"self"}],"output":{"name":"systemtimeerror"}}],[11,"fmt","","",274,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns an instant corresponding to \"now\".",272,{"inputs":[],"output":{"name":"instant"}}],[11,"duration_since","","Returns the amount of time elapsed from another instant to this one.",272,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",272,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",272,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"add_assign","","",272,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"sub","","",272,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub_assign","","",272,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"sub","","",272,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"fmt","","",272,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns the system time corresponding to \"now\".",273,{"inputs":[],"output":{"name":"systemtime"}}],[11,"duration_since","","Returns the amount of time elapsed from an earlier point in time.",273,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"generics":["duration","systemtimeerror"],"name":"result"}}],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",273,{"inputs":[{"name":"self"}],"output":{"generics":["duration","systemtimeerror"],"name":"result"}}],[11,"add","","",273,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"add_assign","","",273,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"sub","","",273,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub_assign","","",273,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"fmt","","",273,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"duration","","Returns the positive duration which represents how far forward the second system time was from the first.",274,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"description","","",274,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",274,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"heap","std","dox",null,null],[3,"Heap","std::heap","",null,null],[8,"Alloc","","An implementation of `Alloc` can allocate, reallocate, and deallocate arbitrary blocks of data described via `Layout`.",null,null],[10,"alloc","","Returns a pointer meeting the size and alignment guarantees of `layout`.",275,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["allocerr"],"name":"result"}}],[10,"dealloc","","Deallocate the memory referenced by `ptr`.",275,null],[11,"oom","","Allocator-specific method for signaling an out-of-memory condition.",275,null],[11,"usable_size","","Returns bounds on the guaranteed usable size of a successful allocation created with the specified `layout`.",275,null],[11,"realloc","","Returns a pointer suitable for holding data described by `new_layout`, meeting its size and alignment guarantees. To accomplish this, this may extend or shrink the allocation referenced by `ptr` to fit `new_layout`.",275,null],[11,"alloc_zeroed","","Behaves like `alloc`, but also ensures that the contents are set to zero before being returned.",275,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["allocerr"],"name":"result"}}],[11,"alloc_excess","","Behaves like `alloc`, but also returns the whole size of the returned block. For some `layout` inputs, like arrays, this may include extra storage usable for additional data.",275,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["excess","allocerr"],"name":"result"}}],[11,"realloc_excess","","Behaves like `realloc`, but also returns the whole size of the returned block. For some `layout` inputs, like arrays, this may include extra storage usable for additional data.",275,null],[11,"grow_in_place","","Attempts to extend the allocation referenced by `ptr` to fit `new_layout`.",275,null],[11,"shrink_in_place","","Attempts to shrink the allocation referenced by `ptr` to fit `new_layout`.",275,null],[11,"alloc_one","","Allocates a block suitable for holding an instance of `T`.",275,{"inputs":[{"name":"self"}],"output":{"generics":["nonnull","allocerr"],"name":"result"}}],[11,"dealloc_one","","Deallocates a block suitable for holding an instance of `T`.",275,null],[11,"alloc_array","","Allocates a block suitable for holding `n` instances of `T`.",275,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["nonnull","allocerr"],"name":"result"}}],[11,"realloc_array","","Reallocates a block previously suitable for holding `n_old` instances of `T`, returning a block suitable for holding `n_new` instances of `T`.",275,{"inputs":[{"name":"self"},{"name":"nonnull"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["nonnull","allocerr"],"name":"result"}}],[11,"dealloc_array","","Deallocates a block suitable for holding `n` instances of `T`.",275,{"inputs":[{"name":"self"},{"name":"nonnull"},{"name":"usize"}],"output":{"generics":["allocerr"],"name":"result"}}],[3,"Layout","","Layout of a block of memory.",null,null],[3,"Excess","","Represents the combination of a starting address and a total capacity of the returned block.",null,null],[12,"0","","",276,null],[12,"1","","",276,null],[3,"CannotReallocInPlace","","The `CannotReallocInPlace` error is used when `grow_in_place` or `shrink_in_place` were unable to reuse the given memory block for a requested layout.",null,null],[4,"AllocErr","","The `AllocErr` error specifies whether an allocation failure is specifically due to resource exhaustion or if it is due to something wrong when combining the given input arguments with this allocator.",null,null],[13,"Exhausted","","Error due to hitting some resource limit or otherwise running out of memory. This condition strongly implies that some series of deallocations would allow a subsequent reissuing of the original allocation request to succeed.",277,null],[12,"request","std::heap::AllocErr","",277,null],[13,"Unsupported","std::heap","Error due to allocator being fundamentally incapable of satisfying the original request. This condition implies that such an allocation request will never succeed on the given allocator, regardless of environment, memory pressure, or other contextual conditions.",277,null],[12,"details","std::heap::AllocErr","",277,null],[3,"System","std::heap","",null,null],[11,"fmt","std::sync","",278,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",278,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",278,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Creates a `PoisonError`.",278,{"inputs":[{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the underlying guard to allow access regardless.",278,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a reference to the underlying guard to allow access regardless.",278,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a mutable reference to the underlying guard to allow access regardless.",278,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",246,{"inputs":[{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",246,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",246,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",246,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",246,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"clone","std::os::windows::ffi","",279,{"inputs":[{"name":"self"}],"output":{"name":"encodewide"}}],[11,"next","","",279,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"size_hint","","",279,null],[11,"from_wide","std::ffi","",139,null],[11,"encode_wide","","",140,{"inputs":[{"name":"self"}],"output":{"name":"encodewide"}}],[11,"seek_read","std::fs","",148,null],[11,"seek_write","","",148,null],[11,"access_mode","","",144,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"openoptions"}}],[11,"share_mode","","",144,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"openoptions"}}],[11,"custom_flags","","",144,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"openoptions"}}],[11,"attributes","","",144,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"openoptions"}}],[11,"security_qos_flags","","",144,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"openoptions"}}],[11,"file_attributes","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"creation_time","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"last_access_time","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"last_write_time","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"file_size","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_raw_handle","","",148,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"as_raw_handle","std::io","",162,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"as_raw_handle","","",164,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"as_raw_handle","","",166,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"from_raw_handle","std::fs","",148,{"inputs":[{"name":"rawhandle"}],"output":{"name":"file"}}],[11,"into_raw_handle","","",148,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"as_raw_socket","std::net","",188,{"inputs":[{"name":"self"}],"output":{"name":"rawsocket"}}],[11,"as_raw_socket","","",189,{"inputs":[{"name":"self"}],"output":{"name":"rawsocket"}}],[11,"as_raw_socket","","",190,{"inputs":[{"name":"self"}],"output":{"name":"rawsocket"}}],[11,"from_raw_socket","","",188,{"inputs":[{"name":"rawsocket"}],"output":{"name":"tcpstream"}}],[11,"from_raw_socket","","",189,{"inputs":[{"name":"rawsocket"}],"output":{"name":"tcplistener"}}],[11,"from_raw_socket","","",190,{"inputs":[{"name":"rawsocket"}],"output":{"name":"udpsocket"}}],[11,"into_raw_socket","","",188,{"inputs":[{"name":"self"}],"output":{"name":"rawsocket"}}],[11,"into_raw_socket","","",189,{"inputs":[{"name":"self"}],"output":{"name":"rawsocket"}}],[11,"into_raw_socket","","",190,{"inputs":[{"name":"self"}],"output":{"name":"rawsocket"}}],[11,"from_raw_handle","std::process","",243,{"inputs":[{"name":"rawhandle"}],"output":{"name":"stdio"}}],[11,"as_raw_handle","","",237,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"into_raw_handle","","",237,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"as_raw_handle","","",239,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"as_raw_handle","","",240,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"as_raw_handle","","",241,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"into_raw_handle","","",239,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"into_raw_handle","","",240,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"into_raw_handle","","",241,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"from_raw","","",244,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"creation_flags","","",242,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"command"}}],[11,"as_raw_handle","std::thread","",102,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"into_raw_handle","","",102,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"as_raw_fd","std::fs","",148,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",148,{"inputs":[{"name":"rawfd"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",148,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","std::io","",162,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",164,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",166,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_vec","std::ffi","",139,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",139,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from_bytes","","",140,null],[11,"as_bytes","","",140,null],[11,"read_at","std::fs","",148,null],[11,"write_at","","",148,null],[11,"mode","","",145,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_mode","","",145,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"from_mode","","",145,{"inputs":[{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",144,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"openoptions"}}],[11,"custom_flags","","",144,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"openoptions"}}],[11,"dev","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"ino","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"mode","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nlink","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"uid","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"gid","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rdev","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"size","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"atime","","",142,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"atime_nsec","","",142,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"mtime","","",142,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"mtime_nsec","","",142,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"ctime","","",142,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"ctime_nsec","","",142,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"blksize","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"blocks","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_block_device","","",146,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_char_device","","",146,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fifo","","",146,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_socket","","",146,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ino","","",149,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"mode","","",147,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"dirbuilder"}}],[11,"uid","std::process","",242,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"command"}}],[11,"gid","","",242,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"command"}}],[11,"before_exec","","",242,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"command"}}],[11,"exec","","",242,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"from_raw","","",244,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"signal","","",244,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[11,"from_raw_fd","","",243,{"inputs":[{"name":"rawfd"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",239,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",240,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",241,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"into_raw_fd","","",239,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"into_raw_fd","","",240,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"into_raw_fd","","",241,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_pthread_t","std::thread","",102,{"inputs":[{"name":"self"}],"output":{"name":"rawpthread"}}],[11,"into_pthread_t","","",102,{"inputs":[{"name":"self"}],"output":{"name":"rawpthread"}}],[11,"clone","std::os::unix::net","",280,{"inputs":[{"name":"self"}],"output":{"name":"socketaddr"}}],[11,"is_unnamed","","Returns true if and only if the address is unnamed.",280,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_pathname","","Returns the contents of this address if it is a `pathname` address.",280,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"fmt","","",280,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",281,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Connects to the socket named by `path`.",281,{"inputs":[{"name":"p"}],"output":{"generics":["unixstream"],"name":"result"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",281,{"inputs":[],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",281,{"inputs":[{"name":"self"}],"output":{"generics":["unixstream"],"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this connection.",281,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",281,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout for the socket.",281,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout for the socket.",281,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",281,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",281,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",281,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"take_error","","Returns the value of the `SO_ERROR` option.",281,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",281,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"read","","",281,null],[11,"initializer","","",281,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"write","","",281,null],[11,"flush","","",281,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",281,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",281,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixstream"}}],[11,"into_raw_fd","","",281,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","std::net","",188,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",189,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",190,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",188,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",189,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","","",190,{"inputs":[{"name":"rawfd"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","","",188,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"into_raw_fd","","",189,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"into_raw_fd","","",190,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"fmt","std::os::unix::net","",282,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `UnixListener` bound to the specified socket.",282,{"inputs":[{"name":"p"}],"output":{"generics":["unixlistener"],"name":"result"}}],[11,"accept","","Accepts a new incoming connection to this listener.",282,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",282,{"inputs":[{"name":"self"}],"output":{"generics":["unixlistener"],"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",282,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",282,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"take_error","","Returns the value of the `SO_ERROR` option.",282,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"incoming","","Returns an iterator over incoming connections.",282,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"as_raw_fd","","",282,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",282,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixlistener"}}],[11,"into_raw_fd","","",282,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"fmt","","",283,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",283,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"size_hint","","",283,null],[11,"fmt","","",284,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a Unix datagram socket bound to the given path.",284,{"inputs":[{"name":"p"}],"output":{"generics":["unixdatagram"],"name":"result"}}],[11,"unbound","","Creates a Unix Datagram socket which is not bound to any address.",284,{"inputs":[],"output":{"generics":["unixdatagram"],"name":"result"}}],[11,"pair","","Create an unnamed pair of connected sockets.",284,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Connects the socket to the specified address.",284,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",284,{"inputs":[{"name":"self"}],"output":{"generics":["unixdatagram"],"name":"result"}}],[11,"local_addr","","Returns the address of this socket.",284,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"peer_addr","","Returns the address of this socket's peer.",284,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"recv_from","","Receives data from the socket.",284,null],[11,"recv","","Receives data from the socket.",284,null],[11,"send_to","","Sends data on the socket to the specified address.",284,null],[11,"send","","Sends data on the socket to the socket's peer.",284,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",284,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout for the socket.",284,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",284,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",284,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",284,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"take_error","","Returns the value of the `SO_ERROR` option.",284,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",284,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",284,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",284,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixdatagram"}}],[11,"into_raw_fd","","",284,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"fmt","std::panic","",285,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"payload","","Returns the payload associated with the panic.",285,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"location","","Returns information about the location from which the panic originated, if available.",285,{"inputs":[{"name":"self"}],"output":{"generics":["location"],"name":"option"}}],[11,"fmt","","",286,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"file","","Returns the name of the source file from which the panic originated.",286,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","Returns the line number from which the panic originated.",286,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"column","","Returns the column from which the panic originated.",286,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"report","std::result","",70,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[8,"Termination","std","A trait for implementing arbitrary return types in the `main` function.",null,null],[10,"report","","Is called to get the representation of the value as status code. This status code is returned to the operating system.",287,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[14,"format","","Creates a `String` using interpolation of runtime expressions.",null,null],[14,"vec","","Creates a [`Vec`] containing the arguments.",null,null],[14,"try","","Helper macro for reducing boilerplate code for matching `Result` together with converting downstream errors.",null,null],[14,"writeln","","Write formatted data into a buffer, with a newline appended.",null,null],[14,"write","","Write formatted data into a buffer.",null,null],[14,"unimplemented","","A standardized placeholder for marking unfinished code.",null,null],[14,"unreachable","","A utility macro for indicating unreachable code.",null,null],[14,"debug_assert_ne","","Asserts that two expressions are not equal to each other.",null,null],[14,"debug_assert_eq","","Asserts that two expressions are equal to each other.",null,null],[14,"debug_assert","","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"assert_ne","","Asserts that two expressions are not equal to each other (using [`PartialEq`]).",null,null],[14,"assert_eq","","Asserts that two expressions are equal to each other (using [`PartialEq`]).",null,null],[14,"assert","","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"panic","","The entry point for panic of Rust threads.",null,null],[14,"print","","Macro for printing to the standard output.",null,null],[14,"println","","Macro for printing to the standard output, with a newline.",null,null],[14,"eprint","","Macro for printing to the standard error.",null,null],[14,"eprintln","","Macro for printing to the standard error, with a newline.",null,null],[14,"select","","A macro to select an event from a number of receivers.",null,null],[14,"compile_error","","Unconditionally causes compilation to fail with the given error message when encountered.",null,null],[14,"format_args","","The core macro for formatted string creation & output.",null,null],[14,"env","","Inspect an environment variable at compile time.",null,null],[14,"option_env","","Optionally inspect an environment variable at compile time.",null,null],[14,"concat_idents","","Concatenate identifiers into one identifier.",null,null],[14,"concat","","Concatenates literals into a static string slice.",null,null],[14,"line","","A macro which expands to the line number on which it was invoked.",null,null],[14,"column","","A macro which expands to the column number on which it was invoked.",null,null],[14,"file","","A macro which expands to the file name from which it was invoked.",null,null],[14,"stringify","","A macro which stringifies its arguments.",null,null],[14,"include_str","","Includes a utf8-encoded file as a string.",null,null],[14,"include_bytes","","Includes a file as a reference to a byte array.",null,null],[14,"module_path","","Expands to a string that represents the current module path.",null,null],[14,"cfg","","Boolean evaluation of configuration flags, at compile-time.",null,null],[14,"include","","Parse a file as an expression or an item according to the context.",null,null],[14,"thread_local","","Declare a new thread local storage key of type [`std::thread::LocalKey`].",null,null],[15,"bool","","The boolean type.",null,null],[15,"never","","The `!` type, also called \"never\".",null,null],[15,"char","","A character type.",null,null],[15,"unit","","The `()` type, sometimes called \"unit\" or \"nil\".",null,null],[15,"pointer","","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[15,"array","","A fixed-size array, denoted `[T; N]`, for the element type, `T`, and the non-negative compile-time constant size, `N`.",null,null],[15,"slice","","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[15,"str","","String slices.",null,null],[15,"tuple","","A finite heterogeneous sequence, `(T, U, ..)`.",null,null],[15,"f32","","The 32-bit floating point type.",null,null],[15,"f64","","The 64-bit floating point type.",null,null],[15,"i8","","The 8-bit signed integer type.",null,null],[15,"i16","","The 16-bit signed integer type.",null,null],[15,"i32","","The 32-bit signed integer type.",null,null],[15,"i64","","The 64-bit signed integer type.",null,null],[15,"i128","","The 128-bit signed integer type.",null,null],[15,"u8","","The 8-bit unsigned integer type.",null,null],[15,"u16","","The 16-bit unsigned integer type.",null,null],[15,"u32","","The 32-bit unsigned integer type.",null,null],[15,"u64","","The 64-bit unsigned integer type.",null,null],[15,"u128","","The 128-bit unsigned integer type.",null,null],[15,"isize","","The pointer-sized signed integer type.",null,null],[15,"usize","","The pointer-sized unsigned integer type.",null,null],[15,"reference","","References, both shared and mutable.",null,null],[15,"fn","","Function pointers, like `fn(usize) -> bool`.",null,null],[11,"is","std::any","Returns `true` if the boxed type is the same as `T`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_searcher","std","",288,null],[11,"is_contained_in","","",288,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","",288,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","",288,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"into_searcher","","",289,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"strsearcher"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",289,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",289,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"into_searcher","","",290,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"charslicesearcher"}}],[11,"is_contained_in","","",290,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","",290,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","",290,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"deref","","",291,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","std::cell","",292,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","std::mem","",293,null],[11,"deref","std::cell","",294,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","std","",291,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"cmp","","",295,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","std::cmp","",3,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","std","",297,null],[11,"cmp","","",297,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",297,null],[11,"cmp","","",296,null],[11,"cmp","","",297,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",295,null],[11,"cmp","","",297,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",297,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",289,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"ordering"}}],[11,"cmp","","",296,null],[11,"cmp","","",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"ordering"}}],[11,"cmp","","",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"ordering"}}],[11,"cmp","","",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"ordering"}}],[11,"cmp","std::marker","",301,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"cmp","std","",302,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"ordering"}}],[11,"cmp","","",291,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"ordering"}}],[11,"cmp","","",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"ordering"}}],[11,"cmp","","",296,null],[11,"cmp","std::cell","",304,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"ordering"}}],[11,"cmp","std","",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"ordering"}}],[11,"cmp","","",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"ordering"}}],[11,"cmp","","",288,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"ordering"}}],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",295,null],[11,"cmp","","",297,null],[11,"cmp","","",297,null],[11,"cmp","","",297,null],[11,"cmp","","",296,null],[11,"cmp","","",297,null],[11,"cmp","","",296,null],[11,"cmp","","",297,null],[11,"cmp","","",295,null],[11,"cmp","","",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"ordering"}}],[11,"cmp","std::num","",195,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"cmp","std","",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"ordering"}}],[11,"cmp","","",309,null],[11,"cmp","","",296,null],[11,"cmp","","",295,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",290,null],[11,"cmp","std::cmp","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"ordering"}}],[11,"cmp","std","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",309,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",297,null],[11,"cmp","","",295,null],[11,"cmp","std::option","",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"cmp","std","",296,null],[11,"cmp","","",297,null],[11,"cmp","","",296,null],[11,"cmp","","",297,null],[11,"cmp","","",295,null],[11,"cmp","","",297,null],[11,"cmp","","",297,null],[11,"cmp","","",296,null],[11,"cmp","","",310,null],[11,"cmp","","",296,null],[11,"cmp","","",311,null],[11,"cmp","","",296,null],[11,"cmp","","",297,null],[11,"cmp","","",296,null],[11,"cmp","","",297,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",297,null],[11,"cmp","","",291,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"ordering"}}],[11,"cmp","","",297,null],[11,"cmp","","",297,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",295,null],[11,"cmp","std::option","",312,{"inputs":[{"name":"self"},{"name":"noneerror"}],"output":{"name":"ordering"}}],[11,"cmp","std","",297,null],[11,"cmp","","",296,null],[11,"cmp","std::fmt","",126,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"cmp","std","",296,null],[11,"cmp","","",297,null],[11,"cmp","","",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"ordering"}}],[11,"cmp","","",297,null],[11,"cmp","","",296,null],[11,"cmp","std::convert","",131,{"inputs":[{"name":"self"},{"name":"infallible"}],"output":{"name":"ordering"}}],[11,"cmp","std::cell","",314,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"ordering"}}],[11,"cmp","std","",296,null],[11,"cmp","","",295,null],[11,"cmp","","",297,null],[11,"cmp","","",295,null],[11,"cmp","","",296,null],[11,"cmp","","",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"ordering"}}],[11,"cmp","","",296,null],[11,"cmp","std::any","",316,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"ordering"}}],[11,"cmp","std","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",295,null],[11,"cmp","","",297,null],[11,"cmp","","",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"ordering"}}],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",297,null],[11,"cmp","","",295,null],[11,"cmp","std::mem","",293,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"ordering"}}],[11,"cmp","std","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",297,null],[11,"cmp","","",296,null],[11,"cmp","","",297,null],[11,"cmp","","",296,null],[11,"cmp","","",297,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",297,null],[11,"cmp","","",296,null],[11,"cmp","","",297,null],[11,"cmp","","",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"ordering"}}],[11,"cmp","","",296,null],[11,"cmp","","",297,null],[11,"cmp","std::result","",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"cmp","std::ops","",42,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"ordering"}}],[11,"cmp","std","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"cmp","","",296,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",291,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"borrow_mut","","",297,null],[11,"shl_assign","","",308,null],[11,"shl_assign","","",318,null],[11,"shl_assign","","",313,null],[11,"shl_assign","","",303,null],[11,"shl_assign","std::num","",195,null],[11,"shl_assign","std","",300,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",299,null],[11,"shl_assign","","",299,null],[11,"shl_assign","std::num","",195,null],[11,"shl_assign","std","",307,null],[11,"shl_assign","","",317,null],[11,"shl_assign","","",306,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",318,null],[11,"shl_assign","","",298,null],[11,"shl_assign","","",317,null],[11,"shl_assign","","",315,null],[11,"shl_assign","","",308,null],[11,"shl_assign","","",317,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",318,null],[11,"shl_assign","","",318,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",318,null],[11,"shl_assign","","",306,null],[11,"shl_assign","","",313,null],[11,"shl_assign","","",307,null],[11,"shl_assign","","",313,null],[11,"shl_assign","","",318,null],[11,"shl_assign","","",299,null],[11,"shl_assign","","",298,null],[11,"shl_assign","","",308,null],[11,"shl_assign","","",299,null],[11,"shl_assign","","",298,null],[11,"shl_assign","","",317,null],[11,"shl_assign","","",308,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",315,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",315,null],[11,"shl_assign","","",307,null],[11,"shl_assign","","",299,null],[11,"shl_assign","","",318,null],[11,"shl_assign","","",307,null],[11,"shl_assign","","",308,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",298,null],[11,"shl_assign","","",298,null],[11,"shl_assign","","",318,null],[11,"shl_assign","","",298,null],[11,"shl_assign","","",317,null],[11,"shl_assign","","",298,null],[11,"shl_assign","","",317,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",317,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",306,null],[11,"shl_assign","","",298,null],[11,"shl_assign","","",299,null],[11,"shl_assign","","",315,null],[11,"shl_assign","","",307,null],[11,"shl_assign","","",299,null],[11,"shl_assign","","",306,null],[11,"shl_assign","","",306,null],[11,"shl_assign","","",317,null],[11,"shl_assign","std::num","",195,null],[11,"shl_assign","std","",315,null],[11,"shl_assign","","",298,null],[11,"shl_assign","","",315,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",315,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",315,null],[11,"shl_assign","","",318,null],[11,"shl_assign","std::num","",195,null],[11,"shl_assign","std","",299,null],[11,"shl_assign","","",299,null],[11,"shl_assign","std::num","",195,null],[11,"shl_assign","","",195,null],[11,"shl_assign","std","",308,null],[11,"shl_assign","","",299,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",298,null],[11,"shl_assign","","",306,null],[11,"shl_assign","","",318,null],[11,"shl_assign","","",315,null],[11,"shl_assign","","",318,null],[11,"shl_assign","","",317,null],[11,"shl_assign","","",313,null],[11,"shl_assign","","",308,null],[11,"shl_assign","std::num","",195,null],[11,"shl_assign","std","",315,null],[11,"shl_assign","std::num","",195,null],[11,"shl_assign","std","",305,null],[11,"shl_assign","","",315,null],[11,"shl_assign","","",318,null],[11,"shl_assign","","",318,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",315,null],[11,"shl_assign","","",308,null],[11,"shl_assign","","",307,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",299,null],[11,"shl_assign","","",315,null],[11,"shl_assign","","",318,null],[11,"shl_assign","","",317,null],[11,"shl_assign","","",298,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",318,null],[11,"shl_assign","","",307,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",299,null],[11,"shl_assign","","",317,null],[11,"shl_assign","","",298,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",318,null],[11,"shl_assign","","",318,null],[11,"shl_assign","","",298,null],[11,"shl_assign","","",306,null],[11,"shl_assign","std::num","",195,null],[11,"shl_assign","std","",317,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",313,null],[11,"shl_assign","","",318,null],[11,"shl_assign","","",306,null],[11,"shl_assign","std::num","",195,null],[11,"shl_assign","std","",307,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",299,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",308,null],[11,"shl_assign","","",307,null],[11,"shl_assign","","",315,null],[11,"shl_assign","","",308,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",306,null],[11,"shl_assign","","",308,null],[11,"shl_assign","","",306,null],[11,"shl_assign","","",318,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",307,null],[11,"shl_assign","","",313,null],[11,"shl_assign","","",307,null],[11,"shl_assign","","",299,null],[11,"shl_assign","","",313,null],[11,"shl_assign","","",315,null],[11,"shl_assign","","",306,null],[11,"shl_assign","","",298,null],[11,"shl_assign","","",298,null],[11,"shl_assign","","",313,null],[11,"shl_assign","std::num","",195,null],[11,"shl_assign","std","",299,null],[11,"shl_assign","","",298,null],[11,"shl_assign","","",306,null],[11,"shl_assign","","",317,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",317,null],[11,"shl_assign","std::num","",195,null],[11,"shl_assign","std","",305,null],[11,"shl_assign","","",307,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",317,null],[11,"shl_assign","","",315,null],[11,"shl_assign","","",317,null],[11,"shl_assign","","",315,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",318,null],[11,"shl_assign","","",308,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",306,null],[11,"shl_assign","","",315,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",317,null],[11,"shl_assign","","",313,null],[11,"shl_assign","","",299,null],[11,"shl_assign","","",298,null],[11,"shl_assign","","",315,null],[11,"shl_assign","","",318,null],[11,"shl_assign","","",305,null],[11,"shl_assign","std::num","",195,null],[11,"shl_assign","std","",300,null],[11,"shl_assign","","",306,null],[11,"shl_assign","","",306,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",308,null],[11,"shl_assign","std::num","",195,null],[11,"shl_assign","std","",303,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",313,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",306,null],[11,"shl_assign","std::num","",195,null],[11,"shl_assign","std","",303,null],[11,"shl_assign","","",299,null],[11,"shl_assign","","",298,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",315,null],[11,"shl_assign","","",318,null],[11,"shl_assign","","",307,null],[11,"shl_assign","","",313,null],[11,"shl_assign","","",315,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",307,null],[11,"shl_assign","","",308,null],[11,"shl_assign","","",307,null],[11,"shl_assign","","",318,null],[11,"shl_assign","","",308,null],[11,"shl_assign","","",307,null],[11,"shl_assign","","",307,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",307,null],[11,"shl_assign","","",299,null],[11,"shl_assign","","",299,null],[11,"shl_assign","","",308,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",306,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",317,null],[11,"shl_assign","","",308,null],[11,"shl_assign","","",300,null],[11,"shl_assign","std::num","",195,null],[11,"shl_assign","std","",313,null],[11,"shl_assign","","",317,null],[11,"shl_assign","","",315,null],[11,"shl_assign","","",313,null],[11,"shl_assign","","",313,null],[11,"shl_assign","","",306,null],[11,"shl_assign","","",307,null],[11,"shl_assign","","",299,null],[11,"shl_assign","","",308,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",299,null],[11,"shl_assign","","",298,null],[11,"shl_assign","","",313,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",308,null],[11,"shl_assign","","",306,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",308,null],[11,"shl_assign","std::num","",195,null],[11,"shl_assign","","",195,null],[11,"shl_assign","","",195,null],[11,"shl_assign","std","",306,null],[11,"shl_assign","","",308,null],[11,"shl_assign","","",298,null],[11,"shl_assign","","",306,null],[11,"shl_assign","","",313,null],[11,"shl_assign","","",307,null],[11,"shl_assign","","",313,null],[11,"shl_assign","","",308,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",317,null],[11,"shl_assign","","",307,null],[11,"shl_assign","","",306,null],[11,"shl_assign","","",299,null],[11,"shl_assign","","",313,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",308,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",298,null],[11,"shl_assign","","",298,null],[11,"shl_assign","","",299,null],[11,"shl_assign","","",318,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",313,null],[11,"shl_assign","","",298,null],[11,"shl_assign","","",306,null],[11,"shl_assign","","",313,null],[11,"shl_assign","","",307,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",303,null],[11,"shl_assign","","",299,null],[11,"shl_assign","","",315,null],[11,"shl_assign","","",313,null],[11,"shl_assign","std::num","",195,null],[11,"shl_assign","std","",307,null],[11,"shl_assign","","",313,null],[11,"shl_assign","","",317,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",317,null],[11,"shl_assign","","",306,null],[11,"shl_assign","","",313,null],[11,"shl_assign","","",317,null],[11,"shl_assign","","",313,null],[11,"shl_assign","","",307,null],[11,"shl_assign","","",315,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",298,null],[11,"shl_assign","","",305,null],[11,"shl_assign","","",317,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",308,null],[11,"shl_assign","","",300,null],[11,"shl_assign","","",305,null],[11,"bitxor_assign","std::num","",195,null],[11,"bitxor_assign","std","",313,null],[11,"bitxor_assign","std::num","",195,null],[11,"bitxor_assign","std","",318,null],[11,"bitxor_assign","","",300,null],[11,"bitxor_assign","","",298,null],[11,"bitxor_assign","std::num","",195,null],[11,"bitxor_assign","std","",317,null],[11,"bitxor_assign","","",299,null],[11,"bitxor_assign","","",302,null],[11,"bitxor_assign","std::num","",195,null],[11,"bitxor_assign","std","",308,null],[11,"bitxor_assign","","",306,null],[11,"bitxor_assign","","",313,null],[11,"bitxor_assign","","",307,null],[11,"bitxor_assign","std::num","",195,null],[11,"bitxor_assign","","",195,null],[11,"bitxor_assign","","",195,null],[11,"bitxor_assign","std","",315,null],[11,"bitxor_assign","std::num","",195,null],[11,"bitxor_assign","std","",306,null],[11,"bitxor_assign","std::num","",195,null],[11,"bitxor_assign","","",195,null],[11,"bitxor_assign","","",195,null],[11,"bitxor_assign","","",195,null],[11,"bitxor_assign","std","",303,null],[11,"bitxor_assign","std::num","",195,null],[11,"bitxor_assign","std","",303,null],[11,"bitxor_assign","std::num","",195,null],[11,"bitxor_assign","","",195,null],[11,"bitxor_assign","","",195,null],[11,"bitxor_assign","","",195,null],[11,"bitxor_assign","","",195,null],[11,"bitxor_assign","std","",298,null],[11,"bitxor_assign","std::num","",195,null],[11,"bitxor_assign","std","",315,null],[11,"bitxor_assign","std::num","",195,null],[11,"bitxor_assign","std","",305,null],[11,"bitxor_assign","","",318,null],[11,"bitxor_assign","std::num","",195,null],[11,"bitxor_assign","std","",302,null],[11,"bitxor_assign","","",317,null],[11,"bitxor_assign","","",307,null],[11,"bitxor_assign","std::num","",195,null],[11,"bitxor_assign","std","",300,null],[11,"bitxor_assign","std::num","",195,null],[11,"bitxor_assign","std","",299,null],[11,"bitxor_assign","","",305,null],[11,"bitxor_assign","","",308,null],[11,"bitxor_assign","std::num","",195,null],[11,"div","","",195,null],[11,"div","std","",317,null],[11,"div","","",308,null],[11,"div","std::num","",195,null],[11,"div","std","",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"div","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"div","std","",317,null],[11,"div","std::num","",195,null],[11,"div","std","",319,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"div","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"div","std","",299,null],[11,"div","","",298,null],[11,"div","","",318,null],[11,"div","","",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"div","","",319,null],[11,"div","","",307,null],[11,"div","","",320,null],[11,"div","","",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"div","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"div","","",195,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"div","std","",315,null],[11,"div","","",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"div","","",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"div","","",320,null],[11,"div","","",306,null],[11,"div","","",307,null],[11,"div","","",298,null],[11,"div","","",318,null],[11,"div","","",306,null],[11,"div","","",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"div","","",298,null],[11,"div","std::num","",195,null],[11,"div","std","",303,null],[11,"div","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"div","std","",313,null],[11,"div","","",299,null],[11,"div","","",320,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"div","","",319,null],[11,"div","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"div","","",195,null],[11,"div","std","",300,null],[11,"div","","",305,null],[11,"div","","",307,null],[11,"div","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"div","std","",320,null],[11,"div","std::num","",195,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"div","","",195,null],[11,"div","","",195,null],[11,"div","","",195,null],[11,"div","","",195,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"div","std","",306,null],[11,"div","","",308,null],[11,"div","std::num","",195,null],[11,"div","std","",305,null],[11,"div","","",303,null],[11,"div","","",300,null],[11,"div","","",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"div","","",303,null],[11,"div","","",313,null],[11,"div","","",315,null],[11,"div","","",308,null],[11,"div","","",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"div","std::num","",195,null],[11,"div","std","",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"div","","",313,null],[11,"div","","",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"div","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"div","std","",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"div","","",300,null],[11,"div","","",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"div","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"div","std","",319,null],[11,"div","","",299,null],[11,"div","","",305,null],[11,"div","","",315,null],[11,"div","","",317,null],[11,"div","std::num","",195,null],[11,"div","","",195,null],[11,"div","std","",318,null],[11,"div","std::num","",195,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"get","std::ops","",53,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",53,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",53,null],[11,"get_unchecked_mut","","",53,null],[11,"index","","",53,null],[11,"index_mut","","",53,null],[11,"get","","",321,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",321,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",321,null],[11,"get_unchecked_mut","","",321,null],[11,"index","","",321,null],[11,"index_mut","","",321,null],[11,"get","","",53,null],[11,"get_mut","","",53,null],[11,"get_unchecked","","",53,null],[11,"get_unchecked_mut","","",53,null],[11,"index","","",53,null],[11,"index_mut","","",53,null],[11,"get","","",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",43,null],[11,"get_unchecked_mut","","",43,null],[11,"index","","",43,null],[11,"index_mut","","",43,null],[11,"get","","",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",28,null],[11,"get_unchecked_mut","","",28,null],[11,"index","","",28,null],[11,"index_mut","","",28,null],[11,"get","","",28,null],[11,"get_mut","","",28,null],[11,"get_unchecked","","",28,null],[11,"get_unchecked_mut","","",28,null],[11,"index","","",28,null],[11,"index_mut","","",28,null],[11,"get","","",39,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",39,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",39,null],[11,"get_unchecked_mut","","",39,null],[11,"index","","",39,null],[11,"index_mut","","",39,null],[11,"get","","",43,null],[11,"get_mut","","",43,null],[11,"get_unchecked","","",43,null],[11,"get_unchecked_mut","","",43,null],[11,"index","","",43,null],[11,"index_mut","","",43,null],[11,"get","","",321,null],[11,"get_mut","","",321,null],[11,"get_unchecked","","",321,null],[11,"get_unchecked_mut","","",321,null],[11,"index","","",321,null],[11,"index_mut","","",321,null],[11,"get","","",49,null],[11,"get_mut","","",49,null],[11,"get_unchecked","","",49,null],[11,"get_unchecked_mut","","",49,null],[11,"index","","",49,null],[11,"index_mut","","",49,null],[11,"get","","",49,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",49,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",49,null],[11,"get_unchecked_mut","","",49,null],[11,"index","","",49,null],[11,"index_mut","","",49,null],[11,"get","","",39,null],[11,"get_mut","","",39,null],[11,"get_unchecked","","",39,null],[11,"get_unchecked_mut","","",39,null],[11,"index","","",39,null],[11,"index_mut","","",39,null],[11,"get","std","",306,null],[11,"get_mut","","",306,null],[11,"get_unchecked","","",306,null],[11,"get_unchecked_mut","","",306,null],[11,"index","","",306,null],[11,"index_mut","","",306,null],[11,"bitor_assign","","",298,null],[11,"bitor_assign","std::num","",195,null],[11,"bitor_assign","","",195,null],[11,"bitor_assign","","",195,null],[11,"bitor_assign","std","",308,null],[11,"bitor_assign","","",317,null],[11,"bitor_assign","std::num","",195,null],[11,"bitor_assign","","",195,null],[11,"bitor_assign","std","",317,null],[11,"bitor_assign","std::num","",195,null],[11,"bitor_assign","std","",302,null],[11,"bitor_assign","","",307,null],[11,"bitor_assign","","",303,null],[11,"bitor_assign","","",306,null],[11,"bitor_assign","","",308,null],[11,"bitor_assign","","",306,null],[11,"bitor_assign","","",313,null],[11,"bitor_assign","","",307,null],[11,"bitor_assign","","",303,null],[11,"bitor_assign","","",305,null],[11,"bitor_assign","std::num","",195,null],[11,"bitor_assign","std","",298,null],[11,"bitor_assign","std::num","",195,null],[11,"bitor_assign","","",195,null],[11,"bitor_assign","","",195,null],[11,"bitor_assign","std","",318,null],[11,"bitor_assign","std::num","",195,null],[11,"bitor_assign","std","",300,null],[11,"bitor_assign","std::num","",195,null],[11,"bitor_assign","","",195,null],[11,"bitor_assign","","",195,null],[11,"bitor_assign","","",195,null],[11,"bitor_assign","","",195,null],[11,"bitor_assign","","",195,null],[11,"bitor_assign","","",195,null],[11,"bitor_assign","","",195,null],[11,"bitor_assign","std","",299,null],[11,"bitor_assign","","",299,null],[11,"bitor_assign","","",302,null],[11,"bitor_assign","std::num","",195,null],[11,"bitor_assign","std","",300,null],[11,"bitor_assign","std::num","",195,null],[11,"bitor_assign","","",195,null],[11,"bitor_assign","std","",315,null],[11,"bitor_assign","","",318,null],[11,"bitor_assign","","",315,null],[11,"bitor_assign","std::num","",195,null],[11,"bitor_assign","std","",313,null],[11,"bitor_assign","","",305,null],[11,"bitor_assign","std::num","",195,null],[11,"bitand_assign","","",195,null],[11,"bitand_assign","std","",315,null],[11,"bitand_assign","std::num","",195,null],[11,"bitand_assign","","",195,null],[11,"bitand_assign","","",195,null],[11,"bitand_assign","std","",317,null],[11,"bitand_assign","","",308,null],[11,"bitand_assign","std::num","",195,null],[11,"bitand_assign","","",195,null],[11,"bitand_assign","std","",308,null],[11,"bitand_assign","std::num","",195,null],[11,"bitand_assign","","",195,null],[11,"bitand_assign","","",195,null],[11,"bitand_assign","std","",298,null],[11,"bitand_assign","","",303,null],[11,"bitand_assign","std::num","",195,null],[11,"bitand_assign","std","",300,null],[11,"bitand_assign","std::num","",195,null],[11,"bitand_assign","std","",303,null],[11,"bitand_assign","std::num","",195,null],[11,"bitand_assign","","",195,null],[11,"bitand_assign","","",195,null],[11,"bitand_assign","std","",302,null],[11,"bitand_assign","","",313,null],[11,"bitand_assign","std::num","",195,null],[11,"bitand_assign","std","",305,null],[11,"bitand_assign","","",305,null],[11,"bitand_assign","","",307,null],[11,"bitand_assign","","",302,null],[11,"bitand_assign","","",299,null],[11,"bitand_assign","std::num","",195,null],[11,"bitand_assign","","",195,null],[11,"bitand_assign","std","",318,null],[11,"bitand_assign","std::num","",195,null],[11,"bitand_assign","","",195,null],[11,"bitand_assign","std","",306,null],[11,"bitand_assign","","",299,null],[11,"bitand_assign","","",315,null],[11,"bitand_assign","std::num","",195,null],[11,"bitand_assign","std","",298,null],[11,"bitand_assign","","",313,null],[11,"bitand_assign","","",318,null],[11,"bitand_assign","","",317,null],[11,"bitand_assign","","",300,null],[11,"bitand_assign","std::num","",195,null],[11,"bitand_assign","std","",306,null],[11,"bitand_assign","std::num","",195,null],[11,"bitand_assign","std","",307,null],[11,"bitand_assign","std::num","",195,null],[11,"bitand_assign","","",195,null],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::sync::atomic","",322,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::ptr","",323,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::ptr","",324,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"product","std::num","",195,{"inputs":[{"name":"i"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"product","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"product","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"product","std","",315,{"inputs":[{"name":"i"}],"output":{"name":"u128"}}],[11,"product","std::num","",195,{"inputs":[{"name":"i"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"product","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"product","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"product","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"product","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"product","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"product","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"product","std","",305,{"inputs":[{"name":"i"}],"output":{"name":"u32"}}],[11,"product","","",318,{"inputs":[{"name":"i"}],"output":{"name":"i8"}}],[11,"product","","",318,{"inputs":[{"name":"i"}],"output":{"name":"i8"}}],[11,"product","std::num","",195,{"inputs":[{"name":"i"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"product","std","",303,{"inputs":[{"name":"i"}],"output":{"name":"i128"}}],[11,"product","","",317,{"inputs":[{"name":"i"}],"output":{"name":"isize"}}],[11,"product","std::num","",195,{"inputs":[{"name":"i"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"product","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"product","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"product","std","",298,{"inputs":[{"name":"i"}],"output":{"name":"i16"}}],[11,"product","","",317,{"inputs":[{"name":"i"}],"output":{"name":"isize"}}],[11,"product","","",300,{"inputs":[{"name":"i"}],"output":{"name":"u8"}}],[11,"product","","",298,{"inputs":[{"name":"i"}],"output":{"name":"i16"}}],[11,"product","","",308,{"inputs":[{"name":"i"}],"output":{"name":"u64"}}],[11,"product","","",319,{"inputs":[{"name":"i"}],"output":{"name":"f32"}}],[11,"product","","",320,{"inputs":[{"name":"i"}],"output":{"name":"f64"}}],[11,"product","","",303,{"inputs":[{"name":"i"}],"output":{"name":"i128"}}],[11,"product","","",307,{"inputs":[{"name":"i"}],"output":{"name":"i32"}}],[11,"product","","",300,{"inputs":[{"name":"i"}],"output":{"name":"u8"}}],[11,"product","","",305,{"inputs":[{"name":"i"}],"output":{"name":"u32"}}],[11,"product","","",306,{"inputs":[{"name":"i"}],"output":{"name":"usize"}}],[11,"product","","",308,{"inputs":[{"name":"i"}],"output":{"name":"u64"}}],[11,"product","std::num","",195,{"inputs":[{"name":"i"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"product","std","",319,{"inputs":[{"name":"i"}],"output":{"name":"f32"}}],[11,"product","","",313,{"inputs":[{"name":"i"}],"output":{"name":"i64"}}],[11,"product","std::result","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the product of all elements is returned.",70,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"product","std","",307,{"inputs":[{"name":"i"}],"output":{"name":"i32"}}],[11,"product","std::num","",195,{"inputs":[{"name":"i"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"product","std","",306,{"inputs":[{"name":"i"}],"output":{"name":"usize"}}],[11,"product","std::num","",195,{"inputs":[{"name":"i"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"product","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"product","std","",299,{"inputs":[{"name":"i"}],"output":{"name":"u16"}}],[11,"product","std::num","",195,{"inputs":[{"name":"i"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"product","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"product","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"product","std","",313,{"inputs":[{"name":"i"}],"output":{"name":"i64"}}],[11,"product","std::num","",195,{"inputs":[{"name":"i"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"product","std","",320,{"inputs":[{"name":"i"}],"output":{"name":"f64"}}],[11,"product","std::num","",195,{"inputs":[{"name":"i"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"product","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"product","std","",315,{"inputs":[{"name":"i"}],"output":{"name":"u128"}}],[11,"product","","",299,{"inputs":[{"name":"i"}],"output":{"name":"u16"}}],[11,"fmt","","",313,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",298,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",315,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",318,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::num","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",299,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",306,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",295,null],[11,"ne","","",295,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",295,null],[11,"ne","","",295,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",296,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"ne","","",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",296,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",320,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"ne","","",320,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","","",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"ne","","",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",296,null],[11,"eq","","",296,null],[11,"eq","","",309,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","std::num","",195,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",195,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","std","",289,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",289,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",295,null],[11,"ne","","",295,null],[11,"eq","","",296,null],[11,"eq","","",296,null],[11,"eq","std::cell","",314,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"eq","std","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",295,null],[11,"ne","","",295,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","","",288,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"ne","","",288,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","std::convert","",131,{"inputs":[{"name":"self"},{"name":"infallible"}],"output":{"name":"bool"}}],[11,"eq","std","",297,null],[11,"ne","","",297,null],[11,"eq","std::str::pattern","",90,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"eq","std::ops","",49,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"eq","std","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",296,null],[11,"eq","std::str","",121,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"eq","std","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",296,null],[11,"eq","","",296,null],[11,"eq","","",296,null],[11,"eq","","",296,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",311,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","std::any","",316,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",316,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"eq","std","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","","",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"ne","","",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",291,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",291,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",296,null],[11,"eq","","",295,null],[11,"ne","","",295,null],[11,"eq","","",295,null],[11,"ne","","",295,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",291,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",291,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","","",296,null],[11,"eq","","",295,null],[11,"ne","","",295,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",296,null],[11,"eq","","",295,null],[11,"ne","","",295,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",296,null],[11,"eq","","",296,null],[11,"eq","std::ops","",28,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"eq","std","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"ne","","",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","std::char","",129,{"inputs":[{"name":"self"},{"name":"chartryfromerror"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"self"},{"name":"chartryfromerror"}],"output":{"name":"bool"}}],[11,"eq","std","",297,null],[11,"ne","","",297,null],[11,"eq","","",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"ne","","",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",295,null],[11,"ne","","",295,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","std::ops","",42,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"eq","std","",290,null],[11,"ne","","",290,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","std::ops","",39,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"eq","std","",296,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","std::option","",312,{"inputs":[{"name":"self"},{"name":"noneerror"}],"output":{"name":"bool"}}],[11,"eq","std::cmp","",3,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"eq","std","",290,null],[11,"ne","","",290,null],[11,"eq","","",291,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",291,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","","",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"ne","","",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",319,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"ne","","",319,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","std::mem","",325,{"inputs":[{"name":"self"},{"name":"discriminant"}],"output":{"name":"bool"}}],[11,"eq","std","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"ne","","",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","std::option","",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","std::result","",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","std","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","","",291,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",291,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","","",296,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","","",302,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"ne","","",302,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"ne","","",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",296,null],[11,"eq","std::ops","",53,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"eq","std","",296,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","std::marker","",301,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"eq","std","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"ne","","",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","std::mem","",293,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"ne","","",293,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"eq","std","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",295,null],[11,"ne","","",295,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","std::num","",326,{"inputs":[{"name":"self"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",326,{"inputs":[{"name":"self"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"eq","std","",290,null],[11,"ne","","",290,null],[11,"eq","","",296,null],[11,"eq","","",296,null],[11,"eq","","",296,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","std::fmt","",126,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"eq","std::ops","",321,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"eq","std","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","std::cell","",304,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"eq","std","",290,null],[11,"ne","","",290,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",295,null],[11,"ne","","",295,null],[11,"eq","","",296,null],[11,"eq","","",296,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","std::str","",120,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"eq","std","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","","",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"ne","","",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",309,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","","",296,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","std::num","",327,{"inputs":[{"name":"self"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",327,{"inputs":[{"name":"self"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"eq","std","",290,null],[11,"ne","","",290,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","std::num","",194,{"inputs":[{"name":"self"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"eq","std::cmp","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"eq","std","",290,null],[11,"ne","","",290,null],[11,"eq","","",295,null],[11,"ne","","",295,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",296,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"bool"}}],[11,"ne","","",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"bool"}}],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"ne","","",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",296,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"eq","","",296,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"add","","",315,null],[11,"add","","",299,null],[11,"add","std::num","",195,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"add","std","",319,null],[11,"add","","",303,null],[11,"add","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"add","std","",318,null],[11,"add","","",307,null],[11,"add","","",315,null],[11,"add","","",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"add","","",317,null],[11,"add","","",307,null],[11,"add","std::num","",195,null],[11,"add","std","",305,null],[11,"add","std::num","",195,null],[11,"add","std","",317,null],[11,"add","","",306,null],[11,"add","","",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"add","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"add","","",195,null],[11,"add","","",195,null],[11,"add","","",195,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"add","std","",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"add","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"add","","",195,null],[11,"add","std","",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"add","","",303,null],[11,"add","","",307,null],[11,"add","","",299,null],[11,"add","","",320,null],[11,"add","","",306,null],[11,"add","","",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"add","std::num","",195,null],[11,"add","std","",319,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"add","std::num","",195,null],[11,"add","std","",320,null],[11,"add","","",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"add","","",318,null],[11,"add","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"add","","",195,null],[11,"add","","",195,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"add","std","",308,null],[11,"add","","",319,null],[11,"add","","",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"add","","",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"add","","",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"add","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"add","std","",300,null],[11,"add","","",320,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"add","","",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"add","","",305,null],[11,"add","","",318,null],[11,"add","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"add","std","",308,null],[11,"add","std::num","",195,null],[11,"add","std","",315,null],[11,"add","","",298,null],[11,"add","","",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"add","","",313,null],[11,"add","std::num","",195,null],[11,"add","std","",319,null],[11,"add","","",313,null],[11,"add","","",298,null],[11,"add","","",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"add","","",305,null],[11,"add","","",299,null],[11,"add","","",303,null],[11,"add","std::num","",195,null],[11,"add","std","",298,null],[11,"add","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"add","std","",306,null],[11,"add","","",317,null],[11,"add","","",313,null],[11,"add","","",320,null],[11,"add","","",300,null],[11,"add","std::num","",195,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"add","std","",308,null],[11,"add","std::num","",195,null],[11,"add","","",195,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"add","std","",300,null],[11,"is_zero","","",306,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",309,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",309,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",299,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",313,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",307,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",315,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",317,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",318,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",303,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",305,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",298,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","",308,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_str","","",300,{"inputs":[{"name":"str"}],"output":{"generics":["u8","parseinterror"],"name":"result"}}],[11,"from_str","","",299,{"inputs":[{"name":"str"}],"output":{"generics":["u16","parseinterror"],"name":"result"}}],[11,"from_str","","Converts a string in base 10 to a float. Accepts an optional decimal exponent.",320,{"inputs":[{"name":"str"}],"output":{"generics":["f64","parsefloaterror"],"name":"result"}}],[11,"from_str","","",317,{"inputs":[{"name":"str"}],"output":{"generics":["isize","parseinterror"],"name":"result"}}],[11,"from_str","","",298,{"inputs":[{"name":"str"}],"output":{"generics":["i16","parseinterror"],"name":"result"}}],[11,"from_str","","",308,{"inputs":[{"name":"str"}],"output":{"generics":["u64","parseinterror"],"name":"result"}}],[11,"from_str","","Converts a string in base 10 to a float. Accepts an optional decimal exponent.",319,{"inputs":[{"name":"str"}],"output":{"generics":["f32","parsefloaterror"],"name":"result"}}],[11,"from_str","","Parse a `bool` from a string.",302,{"inputs":[{"name":"str"}],"output":{"generics":["bool","parseboolerror"],"name":"result"}}],[11,"from_str","","",305,{"inputs":[{"name":"str"}],"output":{"generics":["u32","parseinterror"],"name":"result"}}],[11,"from_str","","",306,{"inputs":[{"name":"str"}],"output":{"generics":["usize","parseinterror"],"name":"result"}}],[11,"from_str","","",315,{"inputs":[{"name":"str"}],"output":{"generics":["u128","parseinterror"],"name":"result"}}],[11,"from_str","","",313,{"inputs":[{"name":"str"}],"output":{"generics":["i64","parseinterror"],"name":"result"}}],[11,"from_str","","",318,{"inputs":[{"name":"str"}],"output":{"generics":["i8","parseinterror"],"name":"result"}}],[11,"from_str","","",288,{"inputs":[{"name":"str"}],"output":{"generics":["char"],"name":"result"}}],[11,"from_str","","",303,{"inputs":[{"name":"str"}],"output":{"generics":["i128","parseinterror"],"name":"result"}}],[11,"from_str","","",307,{"inputs":[{"name":"str"}],"output":{"generics":["i32","parseinterror"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::num","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::mem","",293,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::cell","",292,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::slice","",328,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",299,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::mem","",325,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::iter","",329,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",315,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::iter","",330,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::result","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::char","",331,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::ops","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",295,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::ops","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::ptr","",323,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::result","",332,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::slice","",333,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",317,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::sync::atomic","",334,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",335,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::any","",316,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::ops","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::num","",327,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::iter","",336,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::str","",337,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",338,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::str","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::iter","",339,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",340,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::slice","",341,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",295,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::str","",342,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::sync::atomic","",343,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::slice","",344,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::cmp","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::iter","",345,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::iter","",346,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::iter","",347,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::slice","",348,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",295,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::iter","",349,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::cell","",294,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",313,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::slice","",350,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",351,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::hash","",352,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::iter","",353,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::slice","",354,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::cell","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::str","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",306,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::option","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::num","",326,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",295,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",311,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::sync::atomic","",355,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::iter","",356,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",295,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::cell","",304,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::iter","",357,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",302,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",319,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::fmt","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",298,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::iter","",358,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::str::pattern","",359,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::str","",360,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",290,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::iter","",361,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::str","",362,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::iter","",363,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::str","",364,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::any","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::cell","",365,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",295,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::ops","",321,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::ptr","",324,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::sync::atomic","",366,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::cell","",314,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::sync::atomic","",367,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::str","",368,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::str","",369,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",295,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::cmp","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::str::pattern","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",295,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::str","",370,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::num","",371,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::option","",372,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::slice","",373,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::char","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::str","",374,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::any","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::sync::atomic","",375,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::iter","",376,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::hash","",377,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::str","",378,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",295,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::str::pattern","",379,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::str","",380,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::sync::atomic","",381,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::str","",382,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::cell","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::iter","",383,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::sync::atomic","",322,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::ops","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",295,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",295,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",295,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::slice","",384,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::sync::atomic","",385,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::char","",386,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::num","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::char","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::iter","",387,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::option","",312,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",388,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::iter","",389,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",390,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",318,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::str::pattern","",391,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::char","",392,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::result","",393,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",394,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::iter","",395,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::sync::atomic","",396,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::char","",397,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::ops","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",288,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::iter","",398,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::marker","",301,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::hash","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",400,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::slice","",401,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::ops","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::option","",402,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::convert","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::slice","",403,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",404,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",405,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::slice","",406,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",289,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::sync::atomic","",407,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::sync::atomic","",245,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",320,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::fmt","",408,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::str","",409,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::str","",410,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::str::pattern","",411,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"next_back","std::slice","",354,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",354,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",354,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",384,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::result","",332,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::slice","",348,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",350,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::iter","",347,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::ops","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::iter","",346,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",346,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"next_back","","",340,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",340,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",340,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",345,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",345,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",345,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","std::str","",374,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","std::iter","",395,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",395,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",395,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",358,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::slice","",333,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",341,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",341,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",341,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","std","",291,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::iter","",329,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",329,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",329,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",353,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",353,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",353,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","std::str","",382,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",409,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",410,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","std::option","",388,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::iter","",349,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",349,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",349,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",363,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",363,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"r"}}],[11,"rfold","","",363,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next_back","std::str","",380,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::result","",393,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::str","",342,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next_back","std::iter","",387,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",387,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",387,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"rfind","","",387,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"next_back","std::str","",360,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",369,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","std::result","",394,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::slice","",328,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::iter","",330,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::slice","",373,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::option","",372,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::iter","",336,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",336,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",336,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","std::slice","",344,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::str","",378,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",364,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"rfind","","",364,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"next_back","std::slice","",406,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::iter","",389,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::str","",338,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","std::iter","",390,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",390,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",390,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","std::ops","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::str","",337,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","std::option","",402,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::iter","",340,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",340,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",340,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","std::slice","",351,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::str","",368,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"into_result","std::option","",71,{"inputs":[{"name":"self"}],"output":{"generics":["noneerror"],"name":"result"}}],[11,"from_ok","","",71,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from_error","","",71,{"inputs":[{"name":"noneerror"}],"output":{"name":"option"}}],[11,"into_result","std::result","",70,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_ok","","",70,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"from_error","","",70,{"inputs":[{"name":"e"}],"output":{"name":"result"}}],[11,"bitor","std","",306,null],[11,"bitor","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"bitor","","",195,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"bitor","","",195,null],[11,"bitor","std","",318,null],[11,"bitor","","",318,null],[11,"bitor","","",302,null],[11,"bitor","","",315,null],[11,"bitor","","",299,null],[11,"bitor","","",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"bitor","","",306,null],[11,"bitor","std::num","",195,null],[11,"bitor","std","",300,null],[11,"bitor","","",298,null],[11,"bitor","","",306,null],[11,"bitor","","",307,null],[11,"bitor","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"bitor","","",195,null],[11,"bitor","std","",302,null],[11,"bitor","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"bitor","std","",298,null],[11,"bitor","","",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"bitor","","",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"bitor","std::num","",195,null],[11,"bitor","","",195,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"bitor","","",195,null],[11,"bitor","std","",300,null],[11,"bitor","","",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"bitor","std::num","",195,null],[11,"bitor","","",195,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"bitor","std","",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"bitor","","",307,null],[11,"bitor","","",300,null],[11,"bitor","","",318,null],[11,"bitor","","",313,null],[11,"bitor","","",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"bitor","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"bitor","","",195,null],[11,"bitor","std","",308,null],[11,"bitor","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"bitor","std","",303,null],[11,"bitor","","",305,null],[11,"bitor","","",308,null],[11,"bitor","","",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"bitor","","",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"bitor","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"bitor","std","",302,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"bitor","","",317,null],[11,"bitor","","",299,null],[11,"bitor","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"bitor","std","",317,null],[11,"bitor","","",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"bitor","std::num","",195,null],[11,"bitor","","",195,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"bitor","std","",302,null],[11,"bitor","std::num","",195,null],[11,"bitor","std","",298,null],[11,"bitor","","",317,null],[11,"bitor","","",315,null],[11,"bitor","","",313,null],[11,"bitor","","",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"bitor","","",305,null],[11,"bitor","","",305,null],[11,"bitor","","",313,null],[11,"bitor","std::num","",195,null],[11,"bitor","std","",307,null],[11,"bitor","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"bitor","","",195,null],[11,"bitor","std","",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"bitor","","",303,null],[11,"bitor","","",303,null],[11,"bitor","","",315,null],[11,"bitor","","",308,null],[11,"bitor","","",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"bitor","","",299,null],[11,"bitor","std::num","",195,null],[11,"from","std","",288,{"inputs":[{"name":"u8"}],"output":{"name":"char"}}],[11,"from","std::num","",371,{"inputs":[{"name":"infallible"}],"output":{"name":"tryfrominterror"}}],[11,"from","std","",308,{"inputs":[{"name":"u32"}],"output":{"name":"u64"}}],[11,"from","","",313,{"inputs":[{"name":"u8"}],"output":{"name":"i64"}}],[11,"from","std::sync::atomic","",366,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"from","","",381,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"from","std::ptr","",323,{"inputs":[{"name":"unique"}],"output":{"name":"nonnull"}}],[11,"from","std","",319,{"inputs":[{"name":"u16"}],"output":{"name":"f32"}}],[11,"from","std::sync::atomic","",407,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"from","std","",303,{"inputs":[{"name":"u64"}],"output":{"name":"i128"}}],[11,"from","","",313,{"inputs":[{"name":"u32"}],"output":{"name":"i64"}}],[11,"from","std::sync::atomic","",335,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"from","","",396,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"from","std","",307,{"inputs":[{"name":"i16"}],"output":{"name":"i32"}}],[11,"from","","",307,{"inputs":[{"name":"i8"}],"output":{"name":"i32"}}],[11,"from","","",320,{"inputs":[{"name":"f32"}],"output":{"name":"f64"}}],[11,"from","std::ptr","",324,{"inputs":[{"name":"nonnull"}],"output":{"name":"unique"}}],[11,"from","std","",308,{"inputs":[{"name":"u8"}],"output":{"name":"u64"}}],[11,"from","","",319,{"inputs":[{"name":"u8"}],"output":{"name":"f32"}}],[11,"from","","",308,{"inputs":[{"name":"u16"}],"output":{"name":"u64"}}],[11,"from","","",298,{"inputs":[{"name":"i8"}],"output":{"name":"i16"}}],[11,"from","std::sync::atomic","",385,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"from","","",322,null],[11,"from","std::ptr","",324,{"inputs":[{"name":"t"}],"output":{"name":"unique"}}],[11,"from","std","",305,{"inputs":[{"name":"char"}],"output":{"name":"u32"}}],[11,"from","","",320,{"inputs":[{"name":"i16"}],"output":{"name":"f64"}}],[11,"from","","",313,{"inputs":[{"name":"i8"}],"output":{"name":"i64"}}],[11,"from","","",315,{"inputs":[{"name":"u64"}],"output":{"name":"u128"}}],[11,"from","","",320,{"inputs":[{"name":"u32"}],"output":{"name":"f64"}}],[11,"from","","",303,{"inputs":[{"name":"u32"}],"output":{"name":"i128"}}],[11,"from","std::cell","",304,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"from","std","",315,{"inputs":[{"name":"u32"}],"output":{"name":"u128"}}],[11,"from","std::sync::atomic","",367,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"from","std","",298,{"inputs":[{"name":"u8"}],"output":{"name":"i16"}}],[11,"from","","",303,{"inputs":[{"name":"i32"}],"output":{"name":"i128"}}],[11,"from","std::cell","",314,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"from","std","",320,{"inputs":[{"name":"i8"}],"output":{"name":"f64"}}],[11,"from","std::option","",71,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from","std::cell","",365,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"from","std","",313,{"inputs":[{"name":"i16"}],"output":{"name":"i64"}}],[11,"from","std::ptr","",324,{"inputs":[{"name":"t"}],"output":{"name":"unique"}}],[11,"from","std","",317,{"inputs":[{"name":"i8"}],"output":{"name":"isize"}}],[11,"from","","",320,{"inputs":[{"name":"i32"}],"output":{"name":"f64"}}],[11,"from","","",306,{"inputs":[{"name":"u8"}],"output":{"name":"usize"}}],[11,"from","","",315,{"inputs":[{"name":"u16"}],"output":{"name":"u128"}}],[11,"from","","",303,{"inputs":[{"name":"i16"}],"output":{"name":"i128"}}],[11,"from","","",303,{"inputs":[{"name":"u16"}],"output":{"name":"i128"}}],[11,"from","","",313,{"inputs":[{"name":"i32"}],"output":{"name":"i64"}}],[11,"from","","",299,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[11,"from","","",313,{"inputs":[{"name":"u16"}],"output":{"name":"i64"}}],[11,"from","","",307,{"inputs":[{"name":"u8"}],"output":{"name":"i32"}}],[11,"from","","",320,{"inputs":[{"name":"u16"}],"output":{"name":"f64"}}],[11,"from","","",303,{"inputs":[{"name":"i8"}],"output":{"name":"i128"}}],[11,"from","std::ptr","",323,{"inputs":[{"name":"t"}],"output":{"name":"nonnull"}}],[11,"from","std::sync::atomic","",343,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"from","std","",303,{"inputs":[{"name":"i64"}],"output":{"name":"i128"}}],[11,"from","","",307,{"inputs":[{"name":"u16"}],"output":{"name":"i32"}}],[11,"from","std::sync::atomic","",375,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"from","","",334,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"from","std","",315,{"inputs":[{"name":"u8"}],"output":{"name":"u128"}}],[11,"from","std::ptr","",323,{"inputs":[{"name":"t"}],"output":{"name":"nonnull"}}],[11,"from","std","",303,{"inputs":[{"name":"u8"}],"output":{"name":"i128"}}],[11,"from","","",305,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[11,"from","","",305,{"inputs":[{"name":"u8"}],"output":{"name":"u32"}}],[11,"from","","",320,{"inputs":[{"name":"u8"}],"output":{"name":"f64"}}],[11,"from","","",319,{"inputs":[{"name":"i8"}],"output":{"name":"f32"}}],[11,"from","std::sync::atomic","",355,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"from","std","",319,{"inputs":[{"name":"i16"}],"output":{"name":"f32"}}],[11,"from_iter","std::result","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, a container with the values of each `Result` is returned.",70,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"from_iter","std::option","Takes each element in the [`Iterator`]: if it is [`None`], no further elements are taken, and the [`None`] is returned. Should no [`None`] occur, a container with the values of each `Option` is returned.",71,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"from_iter","std","",310,null],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","","",289,null],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","","",291,{"inputs":[{"name":"self"}],"output":{"name":"u"}}],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","","",290,null],[11,"as_ref","","",289,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","std::slice","",341,null],[11,"as_ref","std","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","","",291,{"inputs":[{"name":"self"}],"output":{"name":"u"}}],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"as_ref","","",297,null],[11,"call_mut","","",291,null],[11,"call_mut","","",291,null],[11,"rem_assign","","",307,null],[11,"rem_assign","","",307,null],[11,"rem_assign","std::num","",195,null],[11,"rem_assign","std","",308,null],[11,"rem_assign","std::num","",195,null],[11,"rem_assign","","",195,null],[11,"rem_assign","","",195,null],[11,"rem_assign","","",195,null],[11,"rem_assign","std","",299,null],[11,"rem_assign","","",303,null],[11,"rem_assign","","",315,null],[11,"rem_assign","","",298,null],[11,"rem_assign","","",320,null],[11,"rem_assign","std::num","",195,null],[11,"rem_assign","","",195,null],[11,"rem_assign","std","",300,null],[11,"rem_assign","std::num","",195,null],[11,"rem_assign","std","",315,null],[11,"rem_assign","","",318,null],[11,"rem_assign","","",306,null],[11,"rem_assign","","",305,null],[11,"rem_assign","","",313,null],[11,"rem_assign","std::num","",195,null],[11,"rem_assign","std","",300,null],[11,"rem_assign","","",303,null],[11,"rem_assign","std::num","",195,null],[11,"rem_assign","","",195,null],[11,"rem_assign","","",195,null],[11,"rem_assign","std","",317,null],[11,"rem_assign","","",308,null],[11,"rem_assign","","",320,null],[11,"rem_assign","std::num","",195,null],[11,"rem_assign","std","",319,null],[11,"rem_assign","","",299,null],[11,"rem_assign","std::num","",195,null],[11,"rem_assign","","",195,null],[11,"rem_assign","std","",305,null],[11,"rem_assign","","",318,null],[11,"rem_assign","","",313,null],[11,"rem_assign","std::num","",195,null],[11,"rem_assign","","",195,null],[11,"rem_assign","std","",319,null],[11,"rem_assign","std::num","",195,null],[11,"rem_assign","std","",317,null],[11,"rem_assign","std::num","",195,null],[11,"rem_assign","","",195,null],[11,"rem_assign","","",195,null],[11,"rem_assign","","",195,null],[11,"rem_assign","std","",306,null],[11,"rem_assign","","",298,null],[11,"rem_assign","std::num","",195,null],[11,"rem_assign","","",195,null],[11,"div_assign","std","",319,null],[11,"div_assign","","",307,null],[11,"div_assign","","",305,null],[11,"div_assign","","",299,null],[11,"div_assign","std::num","",195,null],[11,"div_assign","std","",318,null],[11,"div_assign","","",320,null],[11,"div_assign","","",319,null],[11,"div_assign","std::num","",195,null],[11,"div_assign","std","",317,null],[11,"div_assign","std::num","",195,null],[11,"div_assign","std","",298,null],[11,"div_assign","","",308,null],[11,"div_assign","std::num","",195,null],[11,"div_assign","","",195,null],[11,"div_assign","","",195,null],[11,"div_assign","","",195,null],[11,"div_assign","","",195,null],[11,"div_assign","","",195,null],[11,"div_assign","std","",298,null],[11,"div_assign","","",318,null],[11,"div_assign","std::num","",195,null],[11,"div_assign","std","",313,null],[11,"div_assign","std::num","",195,null],[11,"div_assign","","",195,null],[11,"div_assign","","",195,null],[11,"div_assign","std","",305,null],[11,"div_assign","std::num","",195,null],[11,"div_assign","","",195,null],[11,"div_assign","std","",308,null],[11,"div_assign","","",313,null],[11,"div_assign","","",317,null],[11,"div_assign","std::num","",195,null],[11,"div_assign","","",195,null],[11,"div_assign","std","",306,null],[11,"div_assign","","",300,null],[11,"div_assign","","",315,null],[11,"div_assign","std::num","",195,null],[11,"div_assign","","",195,null],[11,"div_assign","std","",315,null],[11,"div_assign","","",299,null],[11,"div_assign","std::num","",195,null],[11,"div_assign","std","",303,null],[11,"div_assign","","",300,null],[11,"div_assign","","",307,null],[11,"div_assign","std::num","",195,null],[11,"div_assign","","",195,null],[11,"div_assign","std","",306,null],[11,"div_assign","","",320,null],[11,"div_assign","std::num","",195,null],[11,"div_assign","std","",303,null],[11,"div_assign","std::num","",195,null],[11,"mul_assign","","",195,null],[11,"mul_assign","std","",298,null],[11,"mul_assign","std::num","",195,null],[11,"mul_assign","std","",308,null],[11,"mul_assign","","",307,null],[11,"mul_assign","std::num","",195,null],[11,"mul_assign","std","",308,null],[11,"mul_assign","std::num","",195,null],[11,"mul_assign","std","",319,null],[11,"mul_assign","","",319,null],[11,"mul_assign","","",300,null],[11,"mul_assign","std::num","",195,null],[11,"mul_assign","","",195,null],[11,"mul_assign","","",195,null],[11,"mul_assign","","",195,null],[11,"mul_assign","","",195,null],[11,"mul_assign","","",195,null],[11,"mul_assign","std","",315,null],[11,"mul_assign","std::num","",195,null],[11,"mul_assign","std","",307,null],[11,"mul_assign","","",306,null],[11,"mul_assign","std::num","",195,null],[11,"mul_assign","","",195,null],[11,"mul_assign","","",195,null],[11,"mul_assign","std","",317,null],[11,"mul_assign","","",320,null],[11,"mul_assign","std::num","",195,null],[11,"mul_assign","std","",305,null],[11,"mul_assign","","",299,null],[11,"mul_assign","","",305,null],[11,"mul_assign","std::num","",195,null],[11,"mul_assign","std","",317,null],[11,"mul_assign","","",315,null],[11,"mul_assign","std::num","",195,null],[11,"mul_assign","","",195,null],[11,"mul_assign","std","",318,null],[11,"mul_assign","","",306,null],[11,"mul_assign","","",299,null],[11,"mul_assign","","",303,null],[11,"mul_assign","std::num","",195,null],[11,"mul_assign","std","",318,null],[11,"mul_assign","std::num","",195,null],[11,"mul_assign","std","",313,null],[11,"mul_assign","","",300,null],[11,"mul_assign","std::num","",195,null],[11,"mul_assign","","",195,null],[11,"mul_assign","std","",303,null],[11,"mul_assign","std::num","",195,null],[11,"mul_assign","std","",313,null],[11,"mul_assign","std::num","",195,null],[11,"mul_assign","std","",298,null],[11,"mul_assign","","",320,null],[11,"sub_assign","std::num","",195,null],[11,"sub_assign","","",195,null],[11,"sub_assign","std","",305,null],[11,"sub_assign","std::num","",195,null],[11,"sub_assign","","",195,null],[11,"sub_assign","std","",300,null],[11,"sub_assign","std::num","",195,null],[11,"sub_assign","","",195,null],[11,"sub_assign","std","",306,null],[11,"sub_assign","","",303,null],[11,"sub_assign","","",318,null],[11,"sub_assign","","",307,null],[11,"sub_assign","","",319,null],[11,"sub_assign","","",300,null],[11,"sub_assign","","",315,null],[11,"sub_assign","std::num","",195,null],[11,"sub_assign","","",195,null],[11,"sub_assign","std","",319,null],[11,"sub_assign","std::num","",195,null],[11,"sub_assign","std","",306,null],[11,"sub_assign","std::num","",195,null],[11,"sub_assign","std","",305,null],[11,"sub_assign","std::num","",195,null],[11,"sub_assign","","",195,null],[11,"sub_assign","","",195,null],[11,"sub_assign","","",195,null],[11,"sub_assign","","",195,null],[11,"sub_assign","std","",298,null],[11,"sub_assign","std::num","",195,null],[11,"sub_assign","std","",320,null],[11,"sub_assign","","",307,null],[11,"sub_assign","","",317,null],[11,"sub_assign","","",308,null],[11,"sub_assign","","",308,null],[11,"sub_assign","","",299,null],[11,"sub_assign","","",313,null],[11,"sub_assign","","",320,null],[11,"sub_assign","","",318,null],[11,"sub_assign","std::num","",195,null],[11,"sub_assign","","",195,null],[11,"sub_assign","std","",315,null],[11,"sub_assign","std::num","",195,null],[11,"sub_assign","std","",317,null],[11,"sub_assign","","",313,null],[11,"sub_assign","std::num","",195,null],[11,"sub_assign","std","",303,null],[11,"sub_assign","std::num","",195,null],[11,"sub_assign","","",195,null],[11,"sub_assign","","",195,null],[11,"sub_assign","std","",298,null],[11,"sub_assign","std::num","",195,null],[11,"sub_assign","std","",299,null],[11,"write_str","","",291,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","",291,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","",291,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_str","std::fmt","",412,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","",412,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","",412,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"add_assign","std","",315,null],[11,"add_assign","","",318,null],[11,"add_assign","","",303,null],[11,"add_assign","","",299,null],[11,"add_assign","","",308,null],[11,"add_assign","std::num","",195,null],[11,"add_assign","std","",308,null],[11,"add_assign","","",300,null],[11,"add_assign","std::num","",195,null],[11,"add_assign","std","",319,null],[11,"add_assign","std::num","",195,null],[11,"add_assign","","",195,null],[11,"add_assign","","",195,null],[11,"add_assign","std","",300,null],[11,"add_assign","std::num","",195,null],[11,"add_assign","","",195,null],[11,"add_assign","std","",320,null],[11,"add_assign","std::num","",195,null],[11,"add_assign","","",195,null],[11,"add_assign","std","",313,null],[11,"add_assign","","",319,null],[11,"add_assign","std::num","",195,null],[11,"add_assign","","",195,null],[11,"add_assign","","",195,null],[11,"add_assign","std","",320,null],[11,"add_assign","","",307,null],[11,"add_assign","","",307,null],[11,"add_assign","std::num","",195,null],[11,"add_assign","std","",318,null],[11,"add_assign","std::num","",195,null],[11,"add_assign","","",195,null],[11,"add_assign","","",195,null],[11,"add_assign","","",195,null],[11,"add_assign","","",195,null],[11,"add_assign","std","",317,null],[11,"add_assign","","",313,null],[11,"add_assign","std::num","",195,null],[11,"add_assign","std","",305,null],[11,"add_assign","std::num","",195,null],[11,"add_assign","std","",306,null],[11,"add_assign","","",315,null],[11,"add_assign","std::num","",195,null],[11,"add_assign","","",195,null],[11,"add_assign","","",195,null],[11,"add_assign","std","",299,null],[11,"add_assign","","",298,null],[11,"add_assign","","",305,null],[11,"add_assign","","",317,null],[11,"add_assign","","",306,null],[11,"add_assign","","",298,null],[11,"add_assign","std::num","",195,null],[11,"add_assign","std","",303,null],[11,"neg","","",320,null],[11,"neg","","",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"neg","","",303,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"neg","","",317,null],[11,"neg","std::num","",195,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"neg","","",195,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"neg","","",195,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"neg","std","",298,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"neg","","",298,null],[11,"neg","std::num","",195,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"neg","","",195,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"neg","","",195,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"neg","","",195,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"neg","std","",313,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"neg","std::num","",195,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"neg","std","",317,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"neg","","",307,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"neg","","",307,null],[11,"neg","","",319,null],[11,"neg","","",303,null],[11,"neg","std::num","",195,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"neg","std","",318,null],[11,"neg","std::num","",195,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"neg","std","",313,null],[11,"neg","","",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"neg","std::num","",195,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"neg","","",195,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"neg","std","",318,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"shr_assign","","",318,null],[11,"shr_assign","","",306,null],[11,"shr_assign","","",308,null],[11,"shr_assign","","",315,null],[11,"shr_assign","","",298,null],[11,"shr_assign","","",313,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",307,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",313,null],[11,"shr_assign","","",308,null],[11,"shr_assign","std::num","",195,null],[11,"shr_assign","std","",315,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",318,null],[11,"shr_assign","","",313,null],[11,"shr_assign","","",299,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",308,null],[11,"shr_assign","","",306,null],[11,"shr_assign","","",299,null],[11,"shr_assign","","",299,null],[11,"shr_assign","","",313,null],[11,"shr_assign","std::num","",195,null],[11,"shr_assign","std","",298,null],[11,"shr_assign","","",308,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",317,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",306,null],[11,"shr_assign","","",313,null],[11,"shr_assign","","",318,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",306,null],[11,"shr_assign","","",313,null],[11,"shr_assign","","",306,null],[11,"shr_assign","","",306,null],[11,"shr_assign","","",307,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",317,null],[11,"shr_assign","","",306,null],[11,"shr_assign","","",308,null],[11,"shr_assign","","",306,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",307,null],[11,"shr_assign","","",315,null],[11,"shr_assign","","",317,null],[11,"shr_assign","","",298,null],[11,"shr_assign","","",318,null],[11,"shr_assign","","",313,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",307,null],[11,"shr_assign","","",299,null],[11,"shr_assign","","",306,null],[11,"shr_assign","","",298,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",308,null],[11,"shr_assign","","",317,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",318,null],[11,"shr_assign","std::num","",195,null],[11,"shr_assign","std","",308,null],[11,"shr_assign","","",317,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",299,null],[11,"shr_assign","","",298,null],[11,"shr_assign","","",315,null],[11,"shr_assign","","",306,null],[11,"shr_assign","std::num","",195,null],[11,"shr_assign","std","",318,null],[11,"shr_assign","","",306,null],[11,"shr_assign","","",317,null],[11,"shr_assign","","",305,null],[11,"shr_assign","std::num","",195,null],[11,"shr_assign","std","",317,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",315,null],[11,"shr_assign","","",307,null],[11,"shr_assign","","",318,null],[11,"shr_assign","","",317,null],[11,"shr_assign","","",318,null],[11,"shr_assign","","",307,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",299,null],[11,"shr_assign","std::num","",195,null],[11,"shr_assign","std","",298,null],[11,"shr_assign","","",313,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",307,null],[11,"shr_assign","std::num","",195,null],[11,"shr_assign","std","",315,null],[11,"shr_assign","","",306,null],[11,"shr_assign","","",317,null],[11,"shr_assign","","",308,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",306,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",313,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",317,null],[11,"shr_assign","","",308,null],[11,"shr_assign","","",318,null],[11,"shr_assign","","",306,null],[11,"shr_assign","","",308,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",313,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",317,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",306,null],[11,"shr_assign","","",315,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",315,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",298,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",306,null],[11,"shr_assign","","",298,null],[11,"shr_assign","","",317,null],[11,"shr_assign","","",317,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",313,null],[11,"shr_assign","","",298,null],[11,"shr_assign","","",307,null],[11,"shr_assign","","",303,null],[11,"shr_assign","std::num","",195,null],[11,"shr_assign","std","",306,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",307,null],[11,"shr_assign","","",313,null],[11,"shr_assign","","",318,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",318,null],[11,"shr_assign","","",306,null],[11,"shr_assign","","",313,null],[11,"shr_assign","","",318,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",318,null],[11,"shr_assign","","",315,null],[11,"shr_assign","","",308,null],[11,"shr_assign","","",315,null],[11,"shr_assign","std::num","",195,null],[11,"shr_assign","std","",305,null],[11,"shr_assign","","",307,null],[11,"shr_assign","","",315,null],[11,"shr_assign","","",318,null],[11,"shr_assign","","",317,null],[11,"shr_assign","","",318,null],[11,"shr_assign","","",298,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",318,null],[11,"shr_assign","","",313,null],[11,"shr_assign","","",306,null],[11,"shr_assign","std::num","",195,null],[11,"shr_assign","std","",308,null],[11,"shr_assign","","",308,null],[11,"shr_assign","","",307,null],[11,"shr_assign","","",315,null],[11,"shr_assign","","",315,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",299,null],[11,"shr_assign","","",299,null],[11,"shr_assign","","",299,null],[11,"shr_assign","","",308,null],[11,"shr_assign","","",313,null],[11,"shr_assign","std::num","",195,null],[11,"shr_assign","std","",298,null],[11,"shr_assign","","",313,null],[11,"shr_assign","std::num","",195,null],[11,"shr_assign","std","",298,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",317,null],[11,"shr_assign","","",298,null],[11,"shr_assign","","",307,null],[11,"shr_assign","std::num","",195,null],[11,"shr_assign","std","",305,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",315,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",299,null],[11,"shr_assign","std::num","",195,null],[11,"shr_assign","std","",307,null],[11,"shr_assign","","",307,null],[11,"shr_assign","","",299,null],[11,"shr_assign","","",315,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",298,null],[11,"shr_assign","","",308,null],[11,"shr_assign","","",308,null],[11,"shr_assign","","",317,null],[11,"shr_assign","","",299,null],[11,"shr_assign","","",299,null],[11,"shr_assign","","",298,null],[11,"shr_assign","","",298,null],[11,"shr_assign","std::num","",195,null],[11,"shr_assign","std","",299,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",317,null],[11,"shr_assign","","",318,null],[11,"shr_assign","","",299,null],[11,"shr_assign","","",315,null],[11,"shr_assign","","",313,null],[11,"shr_assign","","",299,null],[11,"shr_assign","","",299,null],[11,"shr_assign","","",298,null],[11,"shr_assign","","",315,null],[11,"shr_assign","std::num","",195,null],[11,"shr_assign","std","",303,null],[11,"shr_assign","","",318,null],[11,"shr_assign","","",317,null],[11,"shr_assign","","",306,null],[11,"shr_assign","","",308,null],[11,"shr_assign","","",317,null],[11,"shr_assign","","",298,null],[11,"shr_assign","","",307,null],[11,"shr_assign","","",299,null],[11,"shr_assign","","",313,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",308,null],[11,"shr_assign","","",317,null],[11,"shr_assign","","",307,null],[11,"shr_assign","","",307,null],[11,"shr_assign","","",308,null],[11,"shr_assign","std::num","",195,null],[11,"shr_assign","std","",318,null],[11,"shr_assign","","",317,null],[11,"shr_assign","","",307,null],[11,"shr_assign","","",313,null],[11,"shr_assign","","",298,null],[11,"shr_assign","","",308,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",298,null],[11,"shr_assign","","",313,null],[11,"shr_assign","","",298,null],[11,"shr_assign","","",313,null],[11,"shr_assign","","",308,null],[11,"shr_assign","","",307,null],[11,"shr_assign","","",298,null],[11,"shr_assign","std::num","",195,null],[11,"shr_assign","std","",303,null],[11,"shr_assign","","",307,null],[11,"shr_assign","","",307,null],[11,"shr_assign","std::num","",195,null],[11,"shr_assign","std","",303,null],[11,"shr_assign","","",300,null],[11,"shr_assign","std::num","",195,null],[11,"shr_assign","std","",305,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",307,null],[11,"shr_assign","","",298,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",305,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",313,null],[11,"shr_assign","","",299,null],[11,"shr_assign","","",318,null],[11,"shr_assign","","",315,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",308,null],[11,"shr_assign","","",306,null],[11,"shr_assign","","",313,null],[11,"shr_assign","","",318,null],[11,"shr_assign","","",299,null],[11,"shr_assign","","",317,null],[11,"shr_assign","","",299,null],[11,"shr_assign","","",298,null],[11,"shr_assign","","",303,null],[11,"shr_assign","","",306,null],[11,"shr_assign","","",308,null],[11,"shr_assign","","",315,null],[11,"shr_assign","","",306,null],[11,"shr_assign","","",315,null],[11,"shr_assign","","",317,null],[11,"shr_assign","","",307,null],[11,"shr_assign","","",306,null],[11,"shr_assign","","",313,null],[11,"shr_assign","","",299,null],[11,"shr_assign","","",315,null],[11,"shr_assign","","",318,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",318,null],[11,"shr_assign","","",315,null],[11,"shr_assign","","",315,null],[11,"shr_assign","","",299,null],[11,"shr_assign","","",318,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",300,null],[11,"shr_assign","","",299,null],[11,"shr_assign","","",315,null],[11,"shr_assign","","",317,null],[11,"shr_assign","","",308,null],[11,"shr_assign","","",307,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",291,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",291,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"borrow","","",297,null],[11,"fmt","","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",319,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",320,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"index_mut","","",289,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",289,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",289,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",289,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",290,null],[11,"index_mut","","",289,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",289,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",289,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index","","",289,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",289,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",289,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index","","",289,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"str"}}],[11,"index","","",289,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",290,null],[11,"build_hasher","std::hash","",352,{"inputs":[{"name":"self"}],"output":{"name":"h"}}],[11,"sub","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"sub","","",195,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"sub","","",195,null],[11,"sub","","",195,null],[11,"sub","std","",303,null],[11,"sub","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"sub","","",195,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"sub","std","",319,null],[11,"sub","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"sub","","",195,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"sub","std","",299,null],[11,"sub","","",320,null],[11,"sub","","",313,null],[11,"sub","","",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"sub","","",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"sub","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"sub","std","",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"sub","","",307,null],[11,"sub","","",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"sub","","",317,null],[11,"sub","","",305,null],[11,"sub","","",318,null],[11,"sub","","",320,null],[11,"sub","","",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"sub","","",299,null],[11,"sub","","",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"sub","","",320,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"sub","","",318,null],[11,"sub","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"sub","std","",308,null],[11,"sub","","",298,null],[11,"sub","","",317,null],[11,"sub","","",319,null],[11,"sub","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"sub","","",195,null],[11,"sub","std","",313,null],[11,"sub","","",307,null],[11,"sub","","",298,null],[11,"sub","std::num","",195,null],[11,"sub","std","",300,null],[11,"sub","","",308,null],[11,"sub","std::num","",195,null],[11,"sub","std","",303,null],[11,"sub","","",298,null],[11,"sub","std::num","",195,null],[11,"sub","std","",305,null],[11,"sub","","",306,null],[11,"sub","","",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"sub","std::num","",195,null],[11,"sub","","",195,null],[11,"sub","std","",300,null],[11,"sub","std::num","",195,null],[11,"sub","std","",313,null],[11,"sub","","",306,null],[11,"sub","std::num","",195,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"sub","","",195,null],[11,"sub","std","",300,null],[11,"sub","","",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"sub","","",319,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"sub","","",308,null],[11,"sub","","",315,null],[11,"sub","","",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"sub","std::num","",195,null],[11,"sub","std","",303,null],[11,"sub","","",317,null],[11,"sub","","",319,null],[11,"sub","","",315,null],[11,"sub","","",305,null],[11,"sub","","",315,null],[11,"sub","","",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"sub","std::num","",195,null],[11,"sub","std","",307,null],[11,"sub","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"sub","std","",320,null],[11,"sub","","",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"sub","","",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"sub","","",318,null],[11,"sub","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"sub","std","",306,null],[11,"sub","","",299,null],[11,"fmt","","",298,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",315,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",313,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",299,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",306,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::num","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",318,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"sum","","",320,{"inputs":[{"name":"i"}],"output":{"name":"f64"}}],[11,"sum","std::num","",195,{"inputs":[{"name":"i"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"sum","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"sum","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"sum","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"sum","std","",306,{"inputs":[{"name":"i"}],"output":{"name":"usize"}}],[11,"sum","std::num","",195,{"inputs":[{"name":"i"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"sum","std","",318,{"inputs":[{"name":"i"}],"output":{"name":"i8"}}],[11,"sum","","",298,{"inputs":[{"name":"i"}],"output":{"name":"i16"}}],[11,"sum","","",317,{"inputs":[{"name":"i"}],"output":{"name":"isize"}}],[11,"sum","","",300,{"inputs":[{"name":"i"}],"output":{"name":"u8"}}],[11,"sum","std::num","",195,{"inputs":[{"name":"i"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"sum","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"sum","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"sum","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"sum","std","",300,{"inputs":[{"name":"i"}],"output":{"name":"u8"}}],[11,"sum","std::num","",195,{"inputs":[{"name":"i"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"sum","std","",308,{"inputs":[{"name":"i"}],"output":{"name":"u64"}}],[11,"sum","std::num","",195,{"inputs":[{"name":"i"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"sum","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"sum","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"sum","std","",317,{"inputs":[{"name":"i"}],"output":{"name":"isize"}}],[11,"sum","std::result","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the sum of all elements is returned.",70,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"sum","std","",318,{"inputs":[{"name":"i"}],"output":{"name":"i8"}}],[11,"sum","std::num","",195,{"inputs":[{"name":"i"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"sum","std","",313,{"inputs":[{"name":"i"}],"output":{"name":"i64"}}],[11,"sum","std::num","",195,{"inputs":[{"name":"i"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"sum","std","",299,{"inputs":[{"name":"i"}],"output":{"name":"u16"}}],[11,"sum","","",313,{"inputs":[{"name":"i"}],"output":{"name":"i64"}}],[11,"sum","std::num","",195,{"inputs":[{"name":"i"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"sum","std","",320,{"inputs":[{"name":"i"}],"output":{"name":"f64"}}],[11,"sum","","",307,{"inputs":[{"name":"i"}],"output":{"name":"i32"}}],[11,"sum","std::num","",195,{"inputs":[{"name":"i"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"sum","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"sum","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"sum","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"sum","","",195,{"inputs":[{"name":"i"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"sum","std","",303,{"inputs":[{"name":"i"}],"output":{"name":"i128"}}],[11,"sum","","",305,{"inputs":[{"name":"i"}],"output":{"name":"u32"}}],[11,"sum","std::num","",195,{"inputs":[{"name":"i"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"sum","std","",308,{"inputs":[{"name":"i"}],"output":{"name":"u64"}}],[11,"sum","","",306,{"inputs":[{"name":"i"}],"output":{"name":"usize"}}],[11,"sum","","",315,{"inputs":[{"name":"i"}],"output":{"name":"u128"}}],[11,"sum","","",307,{"inputs":[{"name":"i"}],"output":{"name":"i32"}}],[11,"sum","std::num","",195,{"inputs":[{"name":"i"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"sum","std","",319,{"inputs":[{"name":"i"}],"output":{"name":"f32"}}],[11,"sum","","",319,{"inputs":[{"name":"i"}],"output":{"name":"f32"}}],[11,"sum","","",305,{"inputs":[{"name":"i"}],"output":{"name":"u32"}}],[11,"sum","std::num","",195,{"inputs":[{"name":"i"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"sum","std","",299,{"inputs":[{"name":"i"}],"output":{"name":"u16"}}],[11,"sum","","",303,{"inputs":[{"name":"i"}],"output":{"name":"i128"}}],[11,"sum","","",315,{"inputs":[{"name":"i"}],"output":{"name":"u128"}}],[11,"sum","","",298,{"inputs":[{"name":"i"}],"output":{"name":"i16"}}],[11,"shr","","",308,null],[11,"shr","","",299,null],[11,"shr","","",303,null],[11,"shr","","",300,null],[11,"shr","","",315,null],[11,"shr","","",299,null],[11,"shr","","",299,null],[11,"shr","","",305,null],[11,"shr","","",303,null],[11,"shr","","",298,null],[11,"shr","","",303,null],[11,"shr","","",313,null],[11,"shr","","",299,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u16"}}],[11,"shr","","",306,null],[11,"shr","","",303,null],[11,"shr","","",298,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i16"}}],[11,"shr","","",305,null],[11,"shr","","",315,null],[11,"shr","","",298,null],[11,"shr","","",307,null],[11,"shr","","",298,null],[11,"shr","","",300,null],[11,"shr","","",315,null],[11,"shr","","",315,null],[11,"shr","","",317,null],[11,"shr","","",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"shr","","",307,null],[11,"shr","","",317,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"isize"}}],[11,"shr","","",308,null],[11,"shr","","",308,null],[11,"shr","","",313,null],[11,"shr","","",307,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i32"}}],[11,"shr","","",317,null],[11,"shr","","",299,null],[11,"shr","","",313,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i64"}}],[11,"shr","","",306,null],[11,"shr","","",306,null],[11,"shr","","",307,null],[11,"shr","","",318,null],[11,"shr","","",315,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u128"}}],[11,"shr","","",306,null],[11,"shr","std::num","",195,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"shr","std","",305,null],[11,"shr","","",298,null],[11,"shr","","",308,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u64"}}],[11,"shr","","",299,null],[11,"shr","","",315,null],[11,"shr","","",303,null],[11,"shr","","",305,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u32"}}],[11,"shr","","",313,null],[11,"shr","","",305,null],[11,"shr","","",300,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u8"}}],[11,"shr","","",306,null],[11,"shr","","",306,null],[11,"shr","","",300,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u8"}}],[11,"shr","","",317,null],[11,"shr","","",318,null],[11,"shr","","",315,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"shr","","",308,null],[11,"shr","","",306,null],[11,"shr","","",305,null],[11,"shr","","",318,null],[11,"shr","","",299,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u16"}}],[11,"shr","","",300,null],[11,"shr","","",298,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i16"}}],[11,"shr","","",315,null],[11,"shr","","",298,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i16"}}],[11,"shr","","",315,null],[11,"shr","","",308,null],[11,"shr","","",315,null],[11,"shr","","",313,null],[11,"shr","","",305,null],[11,"shr","","",317,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"isize"}}],[11,"shr","","",308,null],[11,"shr","","",299,null],[11,"shr","","",300,null],[11,"shr","","",315,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u128"}}],[11,"shr","","",299,null],[11,"shr","","",300,null],[11,"shr","","",303,null],[11,"shr","","",299,null],[11,"shr","","",315,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u128"}}],[11,"shr","","",298,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i16"}}],[11,"shr","","",299,null],[11,"shr","","",298,null],[11,"shr","","",303,null],[11,"shr","","",305,null],[11,"shr","","",299,null],[11,"shr","","",305,null],[11,"shr","","",315,null],[11,"shr","","",318,null],[11,"shr","","",299,null],[11,"shr","","",317,null],[11,"shr","","",303,null],[11,"shr","","",300,null],[11,"shr","","",317,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"isize"}}],[11,"shr","","",308,null],[11,"shr","","",313,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i64"}}],[11,"shr","","",308,null],[11,"shr","","",313,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i64"}}],[11,"shr","","",300,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u8"}}],[11,"shr","","",318,null],[11,"shr","","",306,null],[11,"shr","","",300,null],[11,"shr","","",315,null],[11,"shr","","",306,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"usize"}}],[11,"shr","","",315,null],[11,"shr","","",299,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u16"}}],[11,"shr","","",313,null],[11,"shr","","",318,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i8"}}],[11,"shr","","",306,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"usize"}}],[11,"shr","","",300,null],[11,"shr","","",317,null],[11,"shr","","",307,null],[11,"shr","","",318,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i8"}}],[11,"shr","","",303,null],[11,"shr","","",300,null],[11,"shr","","",307,null],[11,"shr","","",308,null],[11,"shr","","",298,null],[11,"shr","","",317,null],[11,"shr","","",318,null],[11,"shr","","",308,null],[11,"shr","","",318,null],[11,"shr","","",300,null],[11,"shr","","",318,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i8"}}],[11,"shr","","",317,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"isize"}}],[11,"shr","","",313,null],[11,"shr","","",318,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i8"}}],[11,"shr","","",300,null],[11,"shr","","",298,null],[11,"shr","","",317,null],[11,"shr","","",303,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i128"}}],[11,"shr","","",318,null],[11,"shr","","",305,null],[11,"shr","","",313,null],[11,"shr","","",300,null],[11,"shr","","",308,null],[11,"shr","","",313,null],[11,"shr","","",318,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i8"}}],[11,"shr","","",300,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u8"}}],[11,"shr","","",307,null],[11,"shr","","",299,null],[11,"shr","","",300,null],[11,"shr","","",298,null],[11,"shr","","",308,null],[11,"shr","","",305,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u32"}}],[11,"shr","","",307,null],[11,"shr","","",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"shr","","",313,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i64"}}],[11,"shr","","",298,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i16"}}],[11,"shr","","",299,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u16"}}],[11,"shr","","",305,null],[11,"shr","","",303,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i128"}}],[11,"shr","","",305,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u32"}}],[11,"shr","","",313,null],[11,"shr","","",303,null],[11,"shr","","",299,null],[11,"shr","","",300,null],[11,"shr","","",307,null],[11,"shr","","",305,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u32"}}],[11,"shr","","",308,null],[11,"shr","","",317,null],[11,"shr","","",298,null],[11,"shr","","",317,null],[11,"shr","","",308,null],[11,"shr","","",317,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"isize"}}],[11,"shr","","",318,null],[11,"shr","","",307,null],[11,"shr","","",313,null],[11,"shr","","",306,null],[11,"shr","","",318,null],[11,"shr","","",313,null],[11,"shr","","",313,null],[11,"shr","","",300,null],[11,"shr","","",315,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u128"}}],[11,"shr","","",300,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u8"}}],[11,"shr","","",303,null],[11,"shr","","",298,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i16"}}],[11,"shr","","",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i128"}}],[11,"shr","","",306,null],[11,"shr","","",300,null],[11,"shr","","",303,null],[11,"shr","","",318,null],[11,"shr","","",315,null],[11,"shr","std::num","",195,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"shr","std","",308,null],[11,"shr","","",315,null],[11,"shr","","",299,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u16"}}],[11,"shr","","",303,null],[11,"shr","","",315,null],[11,"shr","","",307,null],[11,"shr","","",307,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i32"}}],[11,"shr","","",315,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u128"}}],[11,"shr","","",300,null],[11,"shr","","",307,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i32"}}],[11,"shr","","",318,null],[11,"shr","","",298,null],[11,"shr","","",303,null],[11,"shr","","",315,null],[11,"shr","","",305,null],[11,"shr","","",318,null],[11,"shr","","",308,null],[11,"shr","","",299,null],[11,"shr","","",315,null],[11,"shr","","",315,null],[11,"shr","","",300,null],[11,"shr","","",299,null],[11,"shr","","",308,null],[11,"shr","","",307,null],[11,"shr","","",305,null],[11,"shr","","",317,null],[11,"shr","","",298,null],[11,"shr","","",300,null],[11,"shr","","",308,null],[11,"shr","","",299,null],[11,"shr","","",298,null],[11,"shr","","",298,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i16"}}],[11,"shr","","",313,null],[11,"shr","","",317,null],[11,"shr","","",305,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u32"}}],[11,"shr","","",299,null],[11,"shr","","",318,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i8"}}],[11,"shr","","",307,null],[11,"shr","","",308,null],[11,"shr","","",303,null],[11,"shr","","",305,null],[11,"shr","","",303,null],[11,"shr","","",303,null],[11,"shr","","",306,null],[11,"shr","","",299,null],[11,"shr","","",313,null],[11,"shr","","",307,null],[11,"shr","","",308,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u64"}}],[11,"shr","","",317,null],[11,"shr","","",317,null],[11,"shr","","",305,null],[11,"shr","","",315,null],[11,"shr","","",315,null],[11,"shr","","",303,null],[11,"shr","","",306,null],[11,"shr","","",318,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i8"}}],[11,"shr","","",313,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i64"}}],[11,"shr","","",308,null],[11,"shr","","",317,null],[11,"shr","std::num","",195,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"shr","std","",315,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u128"}}],[11,"shr","","",308,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u64"}}],[11,"shr","","",313,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i64"}}],[11,"shr","","",318,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i8"}}],[11,"shr","","",299,null],[11,"shr","","",305,null],[11,"shr","","",306,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"usize"}}],[11,"shr","","",305,null],[11,"shr","","",313,null],[11,"shr","","",318,null],[11,"shr","","",299,null],[11,"shr","","",300,null],[11,"shr","","",303,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i128"}}],[11,"shr","","",306,null],[11,"shr","","",308,null],[11,"shr","","",306,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"usize"}}],[11,"shr","","",299,null],[11,"shr","","",298,null],[11,"shr","","",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"shr","","",305,null],[11,"shr","","",315,null],[11,"shr","","",313,null],[11,"shr","","",298,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i16"}}],[11,"shr","","",299,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u16"}}],[11,"shr","","",305,null],[11,"shr","","",300,null],[11,"shr","","",299,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u16"}}],[11,"shr","","",315,null],[11,"shr","","",306,null],[11,"shr","","",313,null],[11,"shr","","",307,null],[11,"shr","std::num","",195,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"shr","std","",306,null],[11,"shr","","",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u8"}}],[11,"shr","","",303,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i128"}}],[11,"shr","","",300,null],[11,"shr","","",308,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u64"}}],[11,"shr","","",303,null],[11,"shr","","",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"shr","","",306,null],[11,"shr","","",317,null],[11,"shr","","",318,null],[11,"shr","","",317,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"isize"}}],[11,"shr","","",303,null],[11,"shr","","",298,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i16"}}],[11,"shr","","",308,null],[11,"shr","","",306,null],[11,"shr","","",305,null],[11,"shr","","",313,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"shr","","",317,null],[11,"shr","","",298,null],[11,"shr","","",315,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u128"}}],[11,"shr","","",317,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"isize"}}],[11,"shr","","",299,null],[11,"shr","","",305,null],[11,"shr","","",313,null],[11,"shr","","",307,null],[11,"shr","","",303,null],[11,"shr","","",303,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i128"}}],[11,"shr","","",317,null],[11,"shr","","",318,null],[11,"shr","","",298,null],[11,"shr","","",313,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i64"}}],[11,"shr","","",303,null],[11,"shr","","",307,null],[11,"shr","","",315,null],[11,"shr","","",299,null],[11,"shr","","",315,null],[11,"shr","","",317,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"isize"}}],[11,"shr","","",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"shr","","",305,null],[11,"shr","","",300,null],[11,"shr","","",318,null],[11,"shr","","",307,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i32"}}],[11,"shr","","",317,null],[11,"shr","","",300,null],[11,"shr","","",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"shr","","",298,null],[11,"shr","","",306,null],[11,"shr","","",303,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"shr","","",298,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i16"}}],[11,"shr","std::num","",195,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"shr","std","",307,null],[11,"shr","","",308,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u64"}}],[11,"shr","","",318,null],[11,"shr","","",303,null],[11,"shr","","",318,null],[11,"shr","","",308,null],[11,"shr","","",318,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i8"}}],[11,"shr","","",306,null],[11,"shr","","",298,null],[11,"shr","","",305,null],[11,"shr","","",303,null],[11,"shr","","",306,null],[11,"shr","","",299,null],[11,"shr","","",315,null],[11,"shr","","",307,null],[11,"shr","","",317,null],[11,"shr","","",306,null],[11,"shr","","",308,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u64"}}],[11,"shr","","",308,null],[11,"shr","","",300,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u8"}}],[11,"shr","","",300,null],[11,"shr","std::num","",195,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"shr","std","",300,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"shr","","",299,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u16"}}],[11,"shr","","",318,null],[11,"shr","","",298,null],[11,"shr","","",307,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i32"}}],[11,"shr","","",307,null],[11,"shr","","",313,null],[11,"shr","","",303,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i128"}}],[11,"shr","","",298,null],[11,"shr","","",313,null],[11,"shr","","",313,null],[11,"shr","","",307,null],[11,"shr","","",307,null],[11,"shr","","",303,null],[11,"shr","","",317,null],[11,"shr","","",317,null],[11,"shr","","",313,null],[11,"shr","","",308,null],[11,"shr","","",306,null],[11,"shr","","",313,null],[11,"shr","","",305,null],[11,"shr","","",298,null],[11,"shr","","",317,null],[11,"shr","","",305,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u32"}}],[11,"shr","","",306,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"usize"}}],[11,"shr","","",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"shr","std::num","",195,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"shr","std","",306,null],[11,"shr","","",315,null],[11,"shr","","",307,null],[11,"shr","","",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u32"}}],[11,"shr","","",306,null],[11,"shr","","",307,null],[11,"shr","","",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"shr","","",298,null],[11,"shr","","",299,null],[11,"shr","","",298,null],[11,"shr","","",298,null],[11,"shr","","",306,null],[11,"shr","","",298,null],[11,"shr","","",315,null],[11,"shr","","",308,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u64"}}],[11,"shr","","",299,null],[11,"shr","","",305,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u32"}}],[11,"shr","","",299,null],[11,"shr","","",306,null],[11,"shr","","",318,null],[11,"shr","","",307,null],[11,"shr","","",303,null],[11,"shr","","",303,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i128"}}],[11,"shr","","",313,null],[11,"shr","","",313,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i64"}}],[11,"shr","","",305,null],[11,"shr","","",303,null],[11,"shr","","",315,null],[11,"shr","","",307,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i32"}}],[11,"shr","","",305,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u32"}}],[11,"shr","","",308,null],[11,"shr","","",317,null],[11,"shr","","",300,null],[11,"shr","","",298,null],[11,"shr","","",317,null],[11,"shr","","",305,null],[11,"shr","","",318,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i8"}}],[11,"shr","std::num","",195,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"shr","std","",305,null],[11,"shr","","",318,null],[11,"shr","","",313,null],[11,"shr","","",298,null],[11,"shr","","",298,null],[11,"shr","","",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"shr","","",300,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u8"}}],[11,"shr","","",299,null],[11,"shr","","",308,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"shr","","",313,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i64"}}],[11,"shr","","",298,null],[11,"shr","","",315,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u128"}}],[11,"shr","","",318,null],[11,"shr","","",315,null],[11,"shr","","",299,null],[11,"shr","std::num","",195,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"shr","std","",307,null],[11,"shr","","",307,null],[11,"shr","","",299,null],[11,"shr","","",313,null],[11,"shr","","",317,null],[11,"shr","","",303,null],[11,"shr","","",318,null],[11,"shr","","",315,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u128"}}],[11,"shr","","",307,null],[11,"shr","","",307,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i32"}}],[11,"shr","","",306,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"usize"}}],[11,"shr","","",307,null],[11,"shr","","",307,null],[11,"shr","","",315,null],[11,"shr","","",306,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"usize"}}],[11,"shr","","",303,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i128"}}],[11,"shr","","",313,null],[11,"shr","","",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"shr","","",308,null],[11,"shr","","",300,null],[11,"shr","","",313,null],[11,"shr","","",299,null],[11,"shr","","",308,null],[11,"shr","","",318,null],[11,"shr","","",317,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"isize"}}],[11,"shr","","",300,null],[11,"shr","","",318,null],[11,"shr","","",303,null],[11,"shr","","",306,null],[11,"shr","","",308,null],[11,"shr","","",307,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i32"}}],[11,"shr","","",300,null],[11,"shr","","",298,null],[11,"shr","","",298,null],[11,"shr","","",300,null],[11,"shr","","",313,null],[11,"shr","","",303,null],[11,"shr","","",318,null],[11,"shr","","",318,null],[11,"shr","","",318,null],[11,"shr","","",308,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"shr","","",299,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u16"}}],[11,"shr","","",306,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"usize"}}],[11,"shr","","",315,null],[11,"shr","","",303,null],[11,"shr","","",299,null],[11,"shr","","",315,null],[11,"shr","","",300,null],[11,"shr","","",318,null],[11,"shr","","",305,null],[11,"shr","","",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"shr","","",300,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"shr","","",308,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u64"}}],[11,"shr","","",318,null],[11,"shr","","",307,null],[11,"shr","","",315,null],[11,"shr","","",317,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"isize"}}],[11,"shr","","",313,null],[11,"shr","","",300,null],[11,"shr","","",318,null],[11,"shr","","",313,null],[11,"shr","","",317,null],[11,"shr","","",298,null],[11,"shr","","",307,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i32"}}],[11,"shr","","",298,null],[11,"shr","","",308,null],[11,"shr","","",306,null],[11,"shr","std::num","",195,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"shr","std","",305,null],[11,"shr","","",317,null],[11,"shr","","",317,null],[11,"shr","","",299,null],[11,"shr","","",305,null],[11,"shr","","",307,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"shr","","",317,null],[11,"shr","","",299,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u16"}}],[11,"shr","","",307,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i32"}}],[11,"shr","","",318,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i8"}}],[11,"shr","","",299,null],[11,"shr","","",313,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i64"}}],[11,"shr","","",307,null],[11,"shr","","",308,null],[11,"shr","","",315,null],[11,"shr","","",318,null],[11,"shr","","",318,null],[11,"shr","","",307,null],[11,"shr","","",300,null],[11,"shr","","",307,null],[11,"shr","","",306,null],[11,"shr","","",313,null],[11,"shr","","",315,null],[11,"shr","","",306,null],[11,"shr","","",317,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"isize"}}],[11,"shr","","",300,null],[11,"shr","","",313,null],[11,"shr","","",307,null],[11,"shr","","",318,null],[11,"shr","","",307,null],[11,"shr","","",305,null],[11,"shr","","",303,null],[11,"shr","","",308,null],[11,"shr","","",317,null],[11,"shr","","",299,null],[11,"shr","","",315,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u128"}}],[11,"shr","","",306,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"usize"}}],[11,"shr","","",308,null],[11,"shr","","",317,null],[11,"shr","","",305,null],[11,"shr","","",300,null],[11,"shr","","",308,null],[11,"shr","","",303,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i128"}}],[11,"shr","","",313,null],[11,"shr","","",315,null],[11,"shr","","",305,null],[11,"shr","","",313,null],[11,"shr","","",300,null],[11,"shr","","",317,null],[11,"shr","","",307,null],[11,"shr","","",306,null],[11,"shr","","",306,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"shr","","",305,null],[11,"shr","","",317,null],[11,"shr","","",317,null],[11,"shr","","",308,null],[11,"shr","","",303,null],[11,"shr","","",306,null],[11,"shr","","",299,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u16"}}],[11,"shr","","",305,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u32"}}],[11,"shr","","",317,null],[11,"shr","","",298,null],[11,"shr","","",306,null],[11,"shr","","",306,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"usize"}}],[11,"shr","","",318,null],[11,"shr","","",305,null],[11,"shr","","",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"shr","","",298,null],[11,"shr","","",303,null],[11,"shr","","",303,null],[11,"shr","","",306,null],[11,"shr","","",305,null],[11,"shr","","",298,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i16"}}],[11,"shr","","",306,null],[11,"shr","","",315,null],[11,"shr","","",305,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u32"}}],[11,"shr","","",306,null],[11,"shr","","",298,null],[11,"shr","","",299,null],[11,"shr","","",308,null],[11,"shr","","",303,null],[11,"shr","","",317,null],[11,"shr","","",313,null],[11,"shr","","",305,null],[11,"shr","","",298,null],[11,"shr","","",308,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u64"}}],[11,"shr","","",300,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u8"}}],[11,"next","std::str","",338,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","std::iter","",336,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",336,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"try_fold","","",336,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",336,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"nth","","",336,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"find","","",336,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"last","","",336,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",336,null],[11,"next","std::slice","",348,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",348,null],[11,"count","","",348,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",348,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",348,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::iter","",340,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",340,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",340,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",340,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",340,null],[11,"try_fold","","",340,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",340,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","std::str","",374,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","std::char","",386,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"size_hint","","",386,null],[11,"count","","",386,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",386,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["char"],"name":"option"}}],[11,"last","","",386,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next","","",397,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"next","std::str","",337,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",337,null],[11,"next","std::slice","",403,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",403,null],[11,"next","std::str","",360,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","std::iter","",387,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",387,null],[11,"try_fold","","",387,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",387,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"find","","",387,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","",387,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","std","",291,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",291,null],[11,"nth","","",291,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","std::iter","",363,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",363,null],[11,"try_fold","","",363,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"r"}}],[11,"fold","","",363,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next","std::char","",392,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"size_hint","","",392,null],[11,"next","std::iter","",361,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",361,null],[11,"try_fold","","",361,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"next","std::option","",388,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",388,null],[11,"next","std::str","",342,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"count","","",342,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",342,null],[11,"last","","",342,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next","std::iter","",345,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",345,null],[11,"try_fold","","",345,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",345,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next","","",390,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",390,null],[11,"try_fold","","",390,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",390,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","std::str","",380,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::slice","",333,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",333,null],[11,"next","std::str","",369,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",362,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","std::iter","",356,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",356,null],[11,"next","","",376,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",376,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",376,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",376,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",376,null],[11,"try_fold","","",376,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",376,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","std::slice","",341,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",341,null],[11,"count","","",341,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",341,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",341,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_fold","","",341,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",341,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"position","","",341,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","",341,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","std::iter","",395,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",395,null],[11,"try_fold","","",395,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",395,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","std::result","",393,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",393,null],[11,"next","std::slice","",401,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",401,null],[11,"next","","",405,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",405,null],[11,"next","std::str","",364,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"size_hint","","",364,null],[11,"count","","",364,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",364,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",364,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"all","","",364,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",364,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",364,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","",364,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","",364,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","std::char","",331,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"size_hint","","",331,null],[11,"count","","",331,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",331,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next","std::ops","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"nth","","",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","std::slice","",328,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",328,null],[11,"next","","",354,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",354,null],[11,"count","","",354,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",354,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",354,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_fold","","",354,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",354,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"position","","",354,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","",354,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","","",373,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",373,null],[11,"count","","",373,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",373,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",373,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::iter","",357,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",357,null],[11,"next","","Overflow Behavior",349,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",349,null],[11,"nth","","",349,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",349,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"try_fold","","",349,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",349,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","std::ops","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"nth","","",53,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max","","",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::slice","",404,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",404,null],[11,"next","std::iter","",329,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",329,null],[11,"count","","",329,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"try_fold","","",329,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",329,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","std::str","",410,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","std::option","",402,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",402,null],[11,"next","std::str","",368,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","std::iter","",398,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",398,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",398,null],[11,"try_fold","","",398,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"next","std::result","",332,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",332,null],[11,"next","std::iter","",383,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",383,null],[11,"try_fold","","",383,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",383,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","","",389,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",389,null],[11,"next","","",339,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",339,null],[11,"try_fold","","",339,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"next","std::slice","",351,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",351,null],[11,"next","std::iter","",358,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",358,null],[11,"next","std::slice","",406,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",406,null],[11,"next","std::ops","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"nth","","",39,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::iter","",340,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",340,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",340,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",340,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",340,null],[11,"try_fold","","",340,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",340,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","std::str","",382,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",370,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",409,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",409,null],[11,"next","std::slice","",384,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",384,null],[11,"count","","",384,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",384,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",384,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::iter","",330,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",330,null],[11,"next","","",347,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",347,null],[11,"next","","",346,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",346,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",346,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",346,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",346,null],[11,"try_fold","","",346,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",346,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","std::str","",378,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",378,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",378,null],[11,"last","","",378,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::slice","",350,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",350,null],[11,"count","","",350,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",350,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",350,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::option","",372,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",372,null],[11,"next","std::result","",394,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",394,null],[11,"next","std::iter","",353,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",353,null],[11,"try_fold","","",353,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",353,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","std::slice","",344,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",344,null],[11,"count","","",344,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",344,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",344,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"resume","std","",291,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[11,"fmt","","",318,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",298,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",299,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",315,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",306,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",313,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::num","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"len","std::iter","",395,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",395,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::char","",331,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","std::iter","",363,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",363,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std","",291,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",291,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","std::slice","",354,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",384,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::str","",364,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",364,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::iter","",387,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",387,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",345,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",345,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","std::slice","",344,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::iter","",347,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","std::char","",386,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","std::iter","",349,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",349,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",340,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",340,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","std::slice","",341,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::iter","",330,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bitxor","std","",298,null],[11,"bitxor","","",308,null],[11,"bitxor","std::num","",195,null],[11,"bitxor","std","",300,null],[11,"bitxor","","",317,null],[11,"bitxor","","",302,null],[11,"bitxor","","",308,null],[11,"bitxor","","",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"bitxor","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"bitxor","std","",305,null],[11,"bitxor","","",315,null],[11,"bitxor","","",298,null],[11,"bitxor","","",313,null],[11,"bitxor","","",298,null],[11,"bitxor","","",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"bitxor","std::num","",195,null],[11,"bitxor","","",195,null],[11,"bitxor","std","",315,null],[11,"bitxor","std::num","",195,null],[11,"bitxor","","",195,null],[11,"bitxor","std","",313,null],[11,"bitxor","","",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"bitxor","","",302,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"bitxor","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"bitxor","","",195,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"bitxor","std","",307,null],[11,"bitxor","","",306,null],[11,"bitxor","","",300,null],[11,"bitxor","","",300,null],[11,"bitxor","","",306,null],[11,"bitxor","","",317,null],[11,"bitxor","","",313,null],[11,"bitxor","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"bitxor","","",195,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"bitxor","","",195,null],[11,"bitxor","std","",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"bitxor","","",302,null],[11,"bitxor","","",307,null],[11,"bitxor","std::num","",195,null],[11,"bitxor","std","",299,null],[11,"bitxor","std::num","",195,null],[11,"bitxor","std","",318,null],[11,"bitxor","","",308,null],[11,"bitxor","","",317,null],[11,"bitxor","","",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"bitxor","","",318,null],[11,"bitxor","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"bitxor","std","",303,null],[11,"bitxor","","",306,null],[11,"bitxor","std::num","",195,null],[11,"bitxor","","",195,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"bitxor","std","",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"bitxor","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"bitxor","std","",303,null],[11,"bitxor","","",318,null],[11,"bitxor","","",307,null],[11,"bitxor","","",299,null],[11,"bitxor","","",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"bitxor","","",299,null],[11,"bitxor","","",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"bitxor","std::num","",195,null],[11,"bitxor","","",195,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"bitxor","std","",305,null],[11,"bitxor","","",302,null],[11,"bitxor","","",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"bitxor","","",315,null],[11,"bitxor","","",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"bitxor","","",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"bitxor","std::num","",195,null],[11,"bitxor","std","",303,null],[11,"bitxor","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"bitxor","","",195,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"bitxor","std","",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"bitxor","std::num","",195,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"bitxor","std","",305,null],[11,"bitxor","std::num","",195,null],[11,"not","std","",318,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"not","","",300,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"not","","",298,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"not","std::num","",195,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"not","std","",299,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"not","","",300,null],[11,"not","std::num","",195,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"not","","",195,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"not","","",195,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"not","std","",307,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"not","","",306,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"not","","",305,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"not","std::num","",195,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"not","std","",302,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"not","","",303,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"not","","",308,null],[11,"not","","",318,null],[11,"not","","",299,null],[11,"not","std::num","",195,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"not","","",195,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"not","std","",308,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"not","","",305,null],[11,"not","","",306,null],[11,"not","std::num","",195,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"not","std","",313,null],[11,"not","","",302,null],[11,"not","","",317,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"not","std::num","",195,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"not","","",195,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"not","std","",317,null],[11,"not","","",315,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"not","","",315,null],[11,"not","","",298,null],[11,"not","","",313,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"not","std::num","",195,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"not","std","",303,null],[11,"not","","",307,null],[11,"not","std::num","",195,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"write","std::hash","",377,null],[11,"finish","","",377,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",399,null],[11,"finish","","",399,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"finish","std","",291,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",291,null],[11,"write_u8","","",291,null],[11,"write_u16","","",291,null],[11,"write_u32","","",291,null],[11,"write_u64","","",291,null],[11,"write_u128","","",291,null],[11,"write_usize","","",291,null],[11,"write_i8","","",291,null],[11,"write_i16","","",291,null],[11,"write_i32","","",291,null],[11,"write_i64","","",291,null],[11,"write_i128","","",291,null],[11,"write_isize","","",291,null],[11,"write","std::hash","",400,null],[11,"finish","","",400,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"call","std","",291,null],[11,"hash","std::convert","",131,null],[11,"hash","std","",296,null],[11,"hash","","",295,null],[11,"hash","std::option","",71,null],[11,"hash","std","",296,null],[11,"hash","","",296,null],[11,"hash","std::mem","",325,null],[11,"hash","std","",302,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",297,null],[11,"hash","","",296,null],[11,"hash","std::option","",312,null],[11,"hash","std","",296,null],[11,"hash","","",309,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",295,null],[11,"hash","","",297,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","std::num","",195,null],[11,"hash","std","",296,null],[11,"hash","","",297,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",297,null],[11,"hash","std::ops","",28,null],[11,"hash","std","",296,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",288,null],[11,"hash","","",290,null],[11,"hash","","",297,null],[11,"hash","","",295,null],[11,"hash","","",297,null],[11,"hash","","",296,null],[11,"hash","","",297,null],[11,"hash","","",296,null],[11,"hash","","",297,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",297,null],[11,"hash","","",296,null],[11,"hash","","",295,null],[11,"hash","std::ops","",321,null],[11,"hash","std","",296,null],[11,"hash","","",297,null],[11,"hash","std::ops","",43,null],[11,"hash","std","",296,null],[11,"hash","","",299,null],[11,"hash_slice","","",299,null],[11,"hash","","",303,null],[11,"hash_slice","","",303,null],[11,"hash","","",297,null],[11,"hash","std::ops","",39,null],[11,"hash","std","",296,null],[11,"hash","","",296,null],[11,"hash","","",297,null],[11,"hash","","",300,null],[11,"hash_slice","","",300,null],[11,"hash","","",296,null],[11,"hash","","",297,null],[11,"hash","","",296,null],[11,"hash","","",308,null],[11,"hash_slice","","",308,null],[11,"hash","","",295,null],[11,"hash","","",297,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",305,null],[11,"hash_slice","","",305,null],[11,"hash","","",297,null],[11,"hash","","",315,null],[11,"hash_slice","","",315,null],[11,"hash","std::ops","",49,null],[11,"hash","std","",298,null],[11,"hash_slice","","",298,null],[11,"hash","","",296,null],[11,"hash","","",295,null],[11,"hash","","",295,null],[11,"hash","","",296,null],[11,"hash","","",295,null],[11,"hash","","",289,null],[11,"hash","","",291,null],[11,"hash","","",296,null],[11,"hash","std::result","",70,null],[11,"hash","std","",297,null],[11,"hash","","",297,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",297,null],[11,"hash","","",310,null],[11,"hash","","",309,null],[11,"hash","","",291,null],[11,"hash","","",318,null],[11,"hash_slice","","",318,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",297,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",297,null],[11,"hash","","",296,null],[11,"hash","","",317,null],[11,"hash_slice","","",317,null],[11,"hash","","",296,null],[11,"hash","std::fmt","",126,null],[11,"hash","std","",296,null],[11,"hash","","",313,null],[11,"hash_slice","","",313,null],[11,"hash","","",297,null],[11,"hash","","",296,null],[11,"hash","","",297,null],[11,"hash","","",297,null],[11,"hash","","",296,null],[11,"hash","","",307,null],[11,"hash_slice","","",307,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","std::ops","",42,null],[11,"hash","std::any","",316,null],[11,"hash","std","",296,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",297,null],[11,"hash","","",297,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","std::ops","",53,null],[11,"hash","std::marker","",301,null],[11,"hash","std","",296,null],[11,"hash","","",295,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","std::mem","",293,null],[11,"hash","std","",297,null],[11,"hash","","",297,null],[11,"hash","","",297,null],[11,"hash","","",296,null],[11,"hash","","",297,null],[11,"hash","","",295,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",306,null],[11,"hash_slice","","",306,null],[11,"hash","","",296,null],[11,"hash","std::cmp","",3,null],[11,"hash","std","",296,null],[11,"hash","","",295,null],[11,"hash","","",297,null],[11,"hash","","",297,null],[11,"hash","","",297,null],[11,"hash","","",296,null],[11,"hash","","",297,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",296,null],[11,"hash","","",295,null],[11,"next_back","std::str::pattern","",411,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",411,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",411,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",391,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",391,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",379,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",379,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",379,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",359,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",359,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_at","std","",290,null],[11,"iter","","",290,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"split","","",290,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"split"}}],[11,"rsplit","","",290,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"rsplit"}}],[11,"splitn","","",290,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitn"}}],[11,"rsplitn","","",290,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitn"}}],[11,"windows","","",290,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"windows"}}],[11,"chunks","","",290,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"exact_chunks","","",290,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"exactchunks"}}],[11,"get","","",290,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"first","","",290,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_first","","",290,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_last","","",290,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"last","","",290,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_unchecked","","",290,null],[11,"as_ptr","","",290,null],[11,"binary_search_by","","",290,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["usize","usize"],"name":"result"}}],[11,"len","","",290,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_mut","","",290,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"split_at_mut","","",290,null],[11,"iter_mut","","",290,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"last_mut","","",290,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"first_mut","","",290,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_first_mut","","",290,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_last_mut","","",290,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_mut","","",290,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"splitmut"}}],[11,"rsplit_mut","","",290,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"rsplitmut"}}],[11,"splitn_mut","","",290,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitnmut"}}],[11,"rsplitn_mut","","",290,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitnmut"}}],[11,"chunks_mut","","",290,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[11,"exact_chunks_mut","","",290,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"exactchunksmut"}}],[11,"swap","","",290,null],[11,"reverse","","",290,null],[11,"get_unchecked_mut","","",290,null],[11,"as_mut_ptr","","",290,null],[11,"contains","","",290,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"starts_with","","",290,null],[11,"ends_with","","",290,null],[11,"binary_search","","",290,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["usize","usize"],"name":"result"}}],[11,"rotate_left","","",290,null],[11,"rotate_right","","",290,null],[11,"clone_from_slice","","",290,null],[11,"copy_from_slice","","",290,null],[11,"swap_with_slice","","",290,null],[11,"binary_search_by_key","","",290,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"generics":["usize","usize"],"name":"result"}}],[11,"sort_unstable","","",290,null],[11,"sort_unstable_by","","",290,null],[11,"sort_unstable_by_key","","",290,null],[11,"rem","","",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"rem","std::num","",195,null],[11,"rem","std","",307,null],[11,"rem","","",313,null],[11,"rem","","",305,null],[11,"rem","","",307,null],[11,"rem","","",317,null],[11,"rem","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"rem","std","",299,null],[11,"rem","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"rem","std","",298,null],[11,"rem","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"rem","std","",308,null],[11,"rem","std::num","",195,null],[11,"rem","std","",298,null],[11,"rem","","",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"rem","","",300,null],[11,"rem","std::num","",195,null],[11,"rem","","",195,null],[11,"rem","std","",318,null],[11,"rem","","",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"rem","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"rem","std","",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"rem","","",300,null],[11,"rem","","",300,null],[11,"rem","","",317,null],[11,"rem","","",320,null],[11,"rem","std::num","",195,null],[11,"rem","std","",306,null],[11,"rem","","",299,null],[11,"rem","","",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"rem","std::num","",195,null],[11,"rem","std","",318,null],[11,"rem","","",298,null],[11,"rem","","",305,null],[11,"rem","std::num","",195,null],[11,"rem","std","",318,null],[11,"rem","","",305,null],[11,"rem","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"rem","std","",320,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"rem","","",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"rem","","",317,null],[11,"rem","","",303,null],[11,"rem","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"rem","std","",319,null],[11,"rem","","",313,null],[11,"rem","","",315,null],[11,"rem","","",320,null],[11,"rem","","",308,null],[11,"rem","","",320,null],[11,"rem","","",319,null],[11,"rem","std::num","",195,null],[11,"rem","","",195,null],[11,"rem","std","",313,null],[11,"rem","","",299,null],[11,"rem","","",319,null],[11,"rem","std::num","",195,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"rem","std","",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"rem","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"rem","std","",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"rem","std::num","",195,null],[11,"rem","std","",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"rem","","",303,null],[11,"rem","","",303,null],[11,"rem","","",315,null],[11,"rem","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"rem","","",195,null],[11,"rem","std","",306,null],[11,"rem","","",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"rem","","",308,null],[11,"rem","","",307,null],[11,"rem","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"rem","std","",306,null],[11,"rem","","",315,null],[11,"rem","","",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"rem","","",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"rem","std::num","",195,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"rem","","",195,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"rem","","",195,null],[11,"rem","std","",319,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"steps_between","","",315,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"generics":["usize"],"name":"option"}}],[11,"add_usize","","",315,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u128"],"name":"option"}}],[11,"replace_one","","",315,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"replace_zero","","",315,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"add_one","","",315,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"sub_one","","",315,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"steps_between","","",298,{"inputs":[{"name":"i16"},{"name":"i16"}],"output":{"generics":["usize"],"name":"option"}}],[11,"add_usize","","",298,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i16"],"name":"option"}}],[11,"replace_one","","",298,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"replace_zero","","",298,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"add_one","","",298,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"sub_one","","",298,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"steps_between","","",318,{"inputs":[{"name":"i8"},{"name":"i8"}],"output":{"generics":["usize"],"name":"option"}}],[11,"add_usize","","",318,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i8"],"name":"option"}}],[11,"replace_one","","",318,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"replace_zero","","",318,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"add_one","","",318,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"sub_one","","",318,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"steps_between","","",303,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"generics":["usize"],"name":"option"}}],[11,"add_usize","","",303,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i128"],"name":"option"}}],[11,"replace_one","","",303,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"replace_zero","","",303,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"add_one","","",303,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"sub_one","","",303,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"steps_between","","",313,{"inputs":[{"name":"i64"},{"name":"i64"}],"output":{"generics":["usize"],"name":"option"}}],[11,"add_usize","","",313,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"option"}}],[11,"replace_one","","",313,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"replace_zero","","",313,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"add_one","","",313,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"sub_one","","",313,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"steps_between","","",317,{"inputs":[{"name":"isize"},{"name":"isize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"add_usize","","",317,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["isize"],"name":"option"}}],[11,"replace_one","","",317,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"replace_zero","","",317,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"add_one","","",317,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"sub_one","","",317,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"steps_between","","",308,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"generics":["usize"],"name":"option"}}],[11,"add_usize","","",308,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"option"}}],[11,"replace_one","","",308,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"replace_zero","","",308,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"add_one","","",308,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"sub_one","","",308,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"steps_between","","",305,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"generics":["usize"],"name":"option"}}],[11,"add_usize","","",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u32"],"name":"option"}}],[11,"replace_one","","",305,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"replace_zero","","",305,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"add_one","","",305,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"sub_one","","",305,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"steps_between","","",299,{"inputs":[{"name":"u16"},{"name":"u16"}],"output":{"generics":["usize"],"name":"option"}}],[11,"add_usize","","",299,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u16"],"name":"option"}}],[11,"replace_one","","",299,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"replace_zero","","",299,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"add_one","","",299,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"sub_one","","",299,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"steps_between","","",307,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"generics":["usize"],"name":"option"}}],[11,"add_usize","","",307,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i32"],"name":"option"}}],[11,"replace_one","","",307,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"replace_zero","","",307,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"add_one","","",307,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"sub_one","","",307,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"steps_between","","",300,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"generics":["usize"],"name":"option"}}],[11,"add_usize","","",300,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u8"],"name":"option"}}],[11,"replace_one","","",300,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"replace_zero","","",300,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"add_one","","",300,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"sub_one","","",300,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"steps_between","","",306,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"add_usize","","",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"replace_one","","",306,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"replace_zero","","",306,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add_one","","",306,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"sub_one","","",306,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"mul","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"mul","","",195,null],[11,"mul","std","",320,null],[11,"mul","","",313,null],[11,"mul","","",308,null],[11,"mul","","",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"mul","std::num","",195,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"mul","std","",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"mul","std::num","",195,null],[11,"mul","std","",300,null],[11,"mul","","",303,null],[11,"mul","","",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"mul","","",307,null],[11,"mul","","",317,null],[11,"mul","","",320,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"mul","","",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"mul","","",305,null],[11,"mul","","",319,null],[11,"mul","","",315,null],[11,"mul","std::num","",195,null],[11,"mul","","",195,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"mul","","",195,null],[11,"mul","","",195,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"mul","std","",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"mul","std::num","",195,null],[11,"mul","std","",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"mul","","",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"mul","","",300,null],[11,"mul","std::num","",195,null],[11,"mul","","",195,null],[11,"mul","std","",313,null],[11,"mul","","",299,null],[11,"mul","","",305,null],[11,"mul","","",307,null],[11,"mul","","",318,null],[11,"mul","std::num","",195,null],[11,"mul","","",195,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"mul","std","",318,null],[11,"mul","","",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"mul","","",303,null],[11,"mul","","",303,null],[11,"mul","","",317,null],[11,"mul","","",306,null],[11,"mul","","",319,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"mul","std::num","",195,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"mul","std","",315,null],[11,"mul","std::num","",195,null],[11,"mul","std","",319,null],[11,"mul","","",315,null],[11,"mul","","",307,null],[11,"mul","","",299,null],[11,"mul","std::num","",195,null],[11,"mul","std","",318,null],[11,"mul","","",306,null],[11,"mul","","",319,null],[11,"mul","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"mul","std","",317,null],[11,"mul","","",320,null],[11,"mul","","",298,null],[11,"mul","","",308,null],[11,"mul","","",313,null],[11,"mul","","",299,null],[11,"mul","","",308,null],[11,"mul","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"mul","","",195,null],[11,"mul","std","",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"mul","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"mul","std","",320,null],[11,"mul","std::num","",195,null],[11,"mul","std","",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"mul","","",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"mul","","",306,null],[11,"mul","","",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"mul","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"mul","std","",298,null],[11,"mul","","",305,null],[11,"mul","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"mul","","",195,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"mul","std","",300,null],[11,"mul","","",298,null],[11,"fmt","","",320,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",319,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",313,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",318,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::num","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",317,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",315,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",306,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",298,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",299,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"shl","","",306,null],[11,"shl","","",306,null],[11,"shl","","",306,null],[11,"shl","","",313,null],[11,"shl","","",298,null],[11,"shl","","",307,null],[11,"shl","","",299,null],[11,"shl","","",308,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u64"}}],[11,"shl","","",318,null],[11,"shl","","",315,null],[11,"shl","","",306,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"usize"}}],[11,"shl","","",306,null],[11,"shl","","",308,null],[11,"shl","","",315,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"shl","","",313,null],[11,"shl","","",308,null],[11,"shl","","",318,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i8"}}],[11,"shl","","",300,null],[11,"shl","","",307,null],[11,"shl","","",298,null],[11,"shl","","",305,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u32"}}],[11,"shl","","",313,null],[11,"shl","","",300,null],[11,"shl","","",303,null],[11,"shl","","",315,null],[11,"shl","","",315,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u128"}}],[11,"shl","","",308,null],[11,"shl","","",317,null],[11,"shl","","",318,null],[11,"shl","","",298,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i16"}}],[11,"shl","","",315,null],[11,"shl","","",300,null],[11,"shl","","",317,null],[11,"shl","","",306,null],[11,"shl","","",300,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u8"}}],[11,"shl","","",307,null],[11,"shl","","",318,null],[11,"shl","","",305,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u32"}}],[11,"shl","","",313,null],[11,"shl","","",299,null],[11,"shl","","",307,null],[11,"shl","","",313,null],[11,"shl","","",313,null],[11,"shl","","",313,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i64"}}],[11,"shl","","",303,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i128"}}],[11,"shl","","",307,null],[11,"shl","","",313,null],[11,"shl","","",317,null],[11,"shl","","",306,null],[11,"shl","std::num","",195,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"shl","std","",300,null],[11,"shl","","",306,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"usize"}}],[11,"shl","","",307,null],[11,"shl","","",299,null],[11,"shl","","",305,null],[11,"shl","","",315,null],[11,"shl","","",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"shl","","",307,null],[11,"shl","","",313,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i64"}}],[11,"shl","","",300,null],[11,"shl","","",315,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u128"}}],[11,"shl","","",317,null],[11,"shl","","",303,null],[11,"shl","","",313,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i64"}}],[11,"shl","","",303,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i128"}}],[11,"shl","","",300,null],[11,"shl","","",306,null],[11,"shl","","",318,null],[11,"shl","","",298,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i16"}}],[11,"shl","","",308,null],[11,"shl","","",317,null],[11,"shl","","",307,null],[11,"shl","","",298,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i16"}}],[11,"shl","","",306,null],[11,"shl","","",317,null],[11,"shl","","",308,null],[11,"shl","","",305,null],[11,"shl","","",303,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"shl","","",317,null],[11,"shl","","",303,null],[11,"shl","","",306,null],[11,"shl","","",308,null],[11,"shl","","",305,null],[11,"shl","","",317,null],[11,"shl","","",318,null],[11,"shl","","",306,null],[11,"shl","","",300,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u8"}}],[11,"shl","","",307,null],[11,"shl","","",307,null],[11,"shl","","",318,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i8"}}],[11,"shl","","",300,null],[11,"shl","","",318,null],[11,"shl","","",306,null],[11,"shl","","",305,null],[11,"shl","","",298,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i16"}}],[11,"shl","","",305,null],[11,"shl","","",317,null],[11,"shl","","",317,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"isize"}}],[11,"shl","","",300,null],[11,"shl","","",303,null],[11,"shl","","",315,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u128"}}],[11,"shl","","",298,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i16"}}],[11,"shl","","",308,null],[11,"shl","","",306,null],[11,"shl","","",299,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u16"}}],[11,"shl","","",300,null],[11,"shl","","",315,null],[11,"shl","","",306,null],[11,"shl","","",307,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"shl","","",300,null],[11,"shl","","",299,null],[11,"shl","","",298,null],[11,"shl","","",306,null],[11,"shl","std::num","",195,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"shl","std","",307,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i32"}}],[11,"shl","","",299,null],[11,"shl","","",307,null],[11,"shl","","",299,null],[11,"shl","","",313,null],[11,"shl","","",313,null],[11,"shl","","",305,null],[11,"shl","","",298,null],[11,"shl","","",315,null],[11,"shl","","",313,null],[11,"shl","","",300,null],[11,"shl","","",298,null],[11,"shl","","",315,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u128"}}],[11,"shl","","",315,null],[11,"shl","","",298,null],[11,"shl","","",300,null],[11,"shl","","",305,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u32"}}],[11,"shl","std::num","",195,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"shl","std","",299,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u16"}}],[11,"shl","","",299,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u16"}}],[11,"shl","","",317,null],[11,"shl","","",298,null],[11,"shl","","",299,null],[11,"shl","","",306,null],[11,"shl","","",317,null],[11,"shl","","",303,null],[11,"shl","","",308,null],[11,"shl","","",308,null],[11,"shl","","",315,null],[11,"shl","","",298,null],[11,"shl","","",305,null],[11,"shl","","",299,null],[11,"shl","","",315,null],[11,"shl","","",317,null],[11,"shl","","",303,null],[11,"shl","","",306,null],[11,"shl","","",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"shl","","",315,null],[11,"shl","","",298,null],[11,"shl","","",303,null],[11,"shl","","",315,null],[11,"shl","","",313,null],[11,"shl","","",306,null],[11,"shl","","",317,null],[11,"shl","","",318,null],[11,"shl","","",306,null],[11,"shl","","",299,null],[11,"shl","","",313,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i64"}}],[11,"shl","","",306,null],[11,"shl","","",315,null],[11,"shl","","",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"shl","","",313,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i64"}}],[11,"shl","","",299,null],[11,"shl","","",298,null],[11,"shl","","",303,null],[11,"shl","","",299,null],[11,"shl","","",307,null],[11,"shl","","",300,null],[11,"shl","","",313,null],[11,"shl","","",299,null],[11,"shl","","",318,null],[11,"shl","","",307,null],[11,"shl","","",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"shl","","",305,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u32"}}],[11,"shl","","",298,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i16"}}],[11,"shl","","",299,null],[11,"shl","","",318,null],[11,"shl","","",318,null],[11,"shl","","",298,null],[11,"shl","","",317,null],[11,"shl","","",298,null],[11,"shl","","",300,null],[11,"shl","","",303,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i128"}}],[11,"shl","","",318,null],[11,"shl","","",318,null],[11,"shl","","",315,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u128"}}],[11,"shl","","",300,null],[11,"shl","","",308,null],[11,"shl","std::num","",195,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"shl","std","",299,null],[11,"shl","","",303,null],[11,"shl","","",305,null],[11,"shl","","",298,null],[11,"shl","","",317,null],[11,"shl","","",308,null],[11,"shl","","",315,null],[11,"shl","","",308,null],[11,"shl","","",317,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"isize"}}],[11,"shl","","",298,null],[11,"shl","","",298,null],[11,"shl","","",318,null],[11,"shl","","",303,null],[11,"shl","","",308,null],[11,"shl","","",313,null],[11,"shl","","",317,null],[11,"shl","","",305,null],[11,"shl","","",307,null],[11,"shl","","",298,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i16"}}],[11,"shl","","",299,null],[11,"shl","","",317,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"isize"}}],[11,"shl","","",318,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i8"}}],[11,"shl","","",303,null],[11,"shl","","",298,null],[11,"shl","","",305,null],[11,"shl","","",315,null],[11,"shl","","",317,null],[11,"shl","","",299,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u16"}}],[11,"shl","","",313,null],[11,"shl","","",313,null],[11,"shl","","",305,null],[11,"shl","","",308,null],[11,"shl","","",306,null],[11,"shl","","",308,null],[11,"shl","","",313,null],[11,"shl","","",307,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i32"}}],[11,"shl","","",303,null],[11,"shl","","",315,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u128"}}],[11,"shl","","",306,null],[11,"shl","","",299,null],[11,"shl","","",315,null],[11,"shl","","",317,null],[11,"shl","","",308,null],[11,"shl","","",313,null],[11,"shl","","",298,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i16"}}],[11,"shl","","",298,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i16"}}],[11,"shl","","",300,null],[11,"shl","","",303,null],[11,"shl","","",318,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i8"}}],[11,"shl","","",303,null],[11,"shl","","",313,null],[11,"shl","","",305,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u32"}}],[11,"shl","","",308,null],[11,"shl","","",300,null],[11,"shl","","",298,null],[11,"shl","","",305,null],[11,"shl","","",308,null],[11,"shl","","",315,null],[11,"shl","","",306,null],[11,"shl","","",308,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u64"}}],[11,"shl","","",303,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i128"}}],[11,"shl","","",315,null],[11,"shl","","",308,null],[11,"shl","","",317,null],[11,"shl","","",308,null],[11,"shl","","",318,null],[11,"shl","","",307,null],[11,"shl","","",313,null],[11,"shl","","",318,null],[11,"shl","","",307,null],[11,"shl","","",318,null],[11,"shl","","",313,null],[11,"shl","","",307,null],[11,"shl","","",305,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u32"}}],[11,"shl","","",298,null],[11,"shl","","",298,null],[11,"shl","","",299,null],[11,"shl","","",305,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u32"}}],[11,"shl","","",303,null],[11,"shl","","",305,null],[11,"shl","","",300,null],[11,"shl","","",307,null],[11,"shl","","",317,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"isize"}}],[11,"shl","","",315,null],[11,"shl","","",300,null],[11,"shl","","",305,null],[11,"shl","","",305,null],[11,"shl","","",308,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u64"}}],[11,"shl","","",315,null],[11,"shl","","",300,null],[11,"shl","","",318,null],[11,"shl","","",303,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i128"}}],[11,"shl","","",307,null],[11,"shl","","",303,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i128"}}],[11,"shl","","",303,null],[11,"shl","","",318,null],[11,"shl","","",303,null],[11,"shl","","",305,null],[11,"shl","","",308,null],[11,"shl","","",317,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"isize"}}],[11,"shl","","",303,null],[11,"shl","","",318,null],[11,"shl","","",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"shl","","",313,null],[11,"shl","","",317,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"isize"}}],[11,"shl","","",317,null],[11,"shl","std::num","",195,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"shl","std","",300,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u8"}}],[11,"shl","","",307,null],[11,"shl","","",300,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u8"}}],[11,"shl","","",317,null],[11,"shl","","",300,null],[11,"shl","","",298,null],[11,"shl","","",299,null],[11,"shl","","",318,null],[11,"shl","","",303,null],[11,"shl","","",313,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i64"}}],[11,"shl","","",300,null],[11,"shl","","",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"shl","","",307,null],[11,"shl","","",298,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i16"}}],[11,"shl","","",308,null],[11,"shl","std::num","",195,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"shl","std","",307,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i32"}}],[11,"shl","","",299,null],[11,"shl","","",317,null],[11,"shl","","",298,null],[11,"shl","","",303,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i128"}}],[11,"shl","","",305,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u32"}}],[11,"shl","","",300,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"shl","","",318,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i8"}}],[11,"shl","","",306,null],[11,"shl","","",305,null],[11,"shl","","",305,null],[11,"shl","","",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"shl","","",318,null],[11,"shl","std::num","",195,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"shl","std","",315,null],[11,"shl","","",308,null],[11,"shl","","",307,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i32"}}],[11,"shl","","",305,null],[11,"shl","","",299,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u16"}}],[11,"shl","","",307,null],[11,"shl","","",308,null],[11,"shl","","",300,null],[11,"shl","","",305,null],[11,"shl","","",306,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"usize"}}],[11,"shl","","",315,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u128"}}],[11,"shl","","",298,null],[11,"shl","","",317,null],[11,"shl","","",306,null],[11,"shl","","",313,null],[11,"shl","","",305,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u32"}}],[11,"shl","","",308,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u64"}}],[11,"shl","","",299,null],[11,"shl","","",317,null],[11,"shl","","",300,null],[11,"shl","","",317,null],[11,"shl","","",315,null],[11,"shl","","",308,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"shl","","",303,null],[11,"shl","","",317,null],[11,"shl","","",308,null],[11,"shl","","",306,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"usize"}}],[11,"shl","","",306,null],[11,"shl","","",315,null],[11,"shl","","",299,null],[11,"shl","","",317,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"isize"}}],[11,"shl","","",305,null],[11,"shl","","",315,null],[11,"shl","","",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"shl","","",300,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u8"}}],[11,"shl","","",313,null],[11,"shl","","",303,null],[11,"shl","","",306,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"usize"}}],[11,"shl","","",298,null],[11,"shl","","",305,null],[11,"shl","","",299,null],[11,"shl","","",306,null],[11,"shl","","",313,null],[11,"shl","","",317,null],[11,"shl","","",305,null],[11,"shl","","",318,null],[11,"shl","","",308,null],[11,"shl","","",303,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i128"}}],[11,"shl","","",308,null],[11,"shl","","",305,null],[11,"shl","","",303,null],[11,"shl","","",315,null],[11,"shl","","",299,null],[11,"shl","","",305,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u32"}}],[11,"shl","","",317,null],[11,"shl","","",313,null],[11,"shl","","",306,null],[11,"shl","","",315,null],[11,"shl","","",318,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i8"}}],[11,"shl","","",305,null],[11,"shl","","",305,null],[11,"shl","","",303,null],[11,"shl","","",300,null],[11,"shl","","",300,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"u8"}}],[11,"shl","","",299,null],[11,"shl","","",315,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u128"}}],[11,"shl","","",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"shl","","",300,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u8"}}],[11,"shl","","",318,null],[11,"shl","","",315,null],[11,"shl","","",317,null],[11,"shl","","",318,null],[11,"shl","","",318,null],[11,"shl","","",313,null],[11,"shl","","",318,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"i8"}}],[11,"shl","","",305,null],[11,"shl","","",315,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u128"}}],[11,"shl","","",308,null],[11,"shl","","",305,null],[11,"shl","","",298,null],[11,"shl","","",298,null],[11,"shl","","",313,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"i64"}}],[11,"shl","","",308,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u64"}}],[11,"shl","","",306,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"usize"}}],[11,"shl","","",305,null],[11,"shl","","",318,null],[11,"shl","","",308,null],[11,"shl","","",313,null],[11,"shl","","",308,null],[11,"shl","","",303,null],[11,"shl","","",299,null],[11,"shl","","",308,null],[11,"shl","","",305,null],[11,"shl","","",305,null],[11,"shl","","",318,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i8"}}],[11,"shl","","",317,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"isize"}}],[11,"shl","","",298,null],[11,"shl","","",305,null],[11,"shl","","",300,null],[11,"shl","","",299,null],[11,"shl","","",299,null],[11,"shl","","",315,null],[11,"shl","","",298,null],[11,"shl","","",300,null],[11,"shl","","",298,null],[11,"shl","","",300,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"shl","","",318,null],[11,"shl","","",313,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i64"}}],[11,"shl","","",307,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i32"}}],[11,"shl","","",313,null],[11,"shl","","",300,null],[11,"shl","","",300,null],[11,"shl","","",318,null],[11,"shl","","",315,null],[11,"shl","","",306,null],[11,"shl","","",305,null],[11,"shl","","",318,null],[11,"shl","","",306,null],[11,"shl","","",306,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"usize"}}],[11,"shl","","",299,null],[11,"shl","","",306,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"usize"}}],[11,"shl","","",303,null],[11,"shl","","",315,null],[11,"shl","","",307,null],[11,"shl","","",299,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u16"}}],[11,"shl","","",305,null],[11,"shl","","",317,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"isize"}}],[11,"shl","","",306,null],[11,"shl","","",318,null],[11,"shl","","",298,null],[11,"shl","","",308,null],[11,"shl","","",299,null],[11,"shl","","",313,null],[11,"shl","std::num","",195,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"shl","","",195,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"shl","std","",317,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"isize"}}],[11,"shl","","",300,null],[11,"shl","","",308,null],[11,"shl","","",307,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i32"}}],[11,"shl","","",306,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"usize"}}],[11,"shl","","",306,null],[11,"shl","","",305,null],[11,"shl","","",303,null],[11,"shl","","",300,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u8"}}],[11,"shl","","",303,null],[11,"shl","","",317,null],[11,"shl","","",313,null],[11,"shl","","",298,null],[11,"shl","","",307,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i32"}}],[11,"shl","","",306,null],[11,"shl","","",299,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u16"}}],[11,"shl","","",318,null],[11,"shl","","",308,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"shl","","",300,null],[11,"shl","","",308,null],[11,"shl","","",318,null],[11,"shl","","",300,null],[11,"shl","","",299,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u16"}}],[11,"shl","","",308,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u64"}}],[11,"shl","","",303,null],[11,"shl","","",308,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"u64"}}],[11,"shl","","",303,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i128"}}],[11,"shl","","",298,null],[11,"shl","","",317,null],[11,"shl","","",317,null],[11,"shl","","",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"shl","","",303,null],[11,"shl","","",303,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i128"}}],[11,"shl","","",315,null],[11,"shl","","",299,null],[11,"shl","","",307,null],[11,"shl","","",298,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i16"}}],[11,"shl","","",305,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"u32"}}],[11,"shl","","",313,null],[11,"shl","","",315,null],[11,"shl","","",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"shl","","",318,null],[11,"shl","","",299,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u16"}}],[11,"shl","","",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"shl","","",307,null],[11,"shl","","",303,null],[11,"shl","","",318,null],[11,"shl","","",318,null],[11,"shl","","",313,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"i64"}}],[11,"shl","","",317,null],[11,"shl","","",306,null],[11,"shl","","",299,null],[11,"shl","","",306,null],[11,"shl","","",313,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i64"}}],[11,"shl","","",299,null],[11,"shl","","",300,null],[11,"shl","","",300,null],[11,"shl","","",300,null],[11,"shl","","",315,null],[11,"shl","","",307,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"i32"}}],[11,"shl","","",298,null],[11,"shl","","",308,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u64"}}],[11,"shl","","",303,null],[11,"shl","","",303,null],[11,"shl","","",298,null],[11,"shl","","",317,null],[11,"shl","","",303,null],[11,"shl","","",313,null],[11,"shl","","",313,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"shl","","",307,null],[11,"shl","","",299,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"u16"}}],[11,"shl","","",303,null],[11,"shl","","",307,null],[11,"shl","","",318,null],[11,"shl","","",306,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"usize"}}],[11,"shl","","",299,null],[11,"shl","","",307,null],[11,"shl","","",317,null],[11,"shl","","",315,null],[11,"shl","","",299,null],[11,"shl","","",317,null],[11,"shl","","",315,null],[11,"shl","std::num","",195,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"shl","std","",307,null],[11,"shl","","",307,null],[11,"shl","","",306,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"shl","","",313,null],[11,"shl","","",307,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i32"}}],[11,"shl","","",307,null],[11,"shl","","",307,null],[11,"shl","","",306,null],[11,"shl","","",315,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"u128"}}],[11,"shl","","",298,null],[11,"shl","","",299,null],[11,"shl","","",308,null],[11,"shl","","",300,null],[11,"shl","","",299,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u16"}}],[11,"shl","","",300,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"u8"}}],[11,"shl","","",298,null],[11,"shl","","",315,null],[11,"shl","","",307,null],[11,"shl","","",306,null],[11,"shl","","",318,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"i8"}}],[11,"shl","","",318,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i8"}}],[11,"shl","","",318,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i8"}}],[11,"shl","","",308,null],[11,"shl","","",308,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u64"}}],[11,"shl","","",303,null],[11,"shl","","",307,null],[11,"shl","","",305,null],[11,"shl","","",313,null],[11,"shl","","",307,null],[11,"shl","","",313,null],[11,"shl","","",298,null],[11,"shl","","",307,null],[11,"shl","","",317,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"isize"}}],[11,"shl","","",313,null],[11,"shl","","",299,null],[11,"shl","","",315,null],[11,"shl","","",307,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i32"}}],[11,"shl","","",303,null],[11,"fmt","","",319,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",306,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::cell","",294,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::char","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",331,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::fmt","",408,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::convert","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",311,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::fmt","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::cell","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",315,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::num","",326,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::str","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::num","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::cell","",292,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",318,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::char","",386,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::str","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",298,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::char","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",299,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",320,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::char","",392,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::num","",327,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",288,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",302,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::num","",371,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std","",313,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",289,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"try_from","","",318,{"inputs":[{"name":"u8"}],"output":{"generics":["i8","tryfrominterror"],"name":"result"}}],[11,"try_from","","",313,{"inputs":[{"name":"i128"}],"output":{"generics":["i64","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",297,null],[11,"try_from","","",299,{"inputs":[{"name":"i64"}],"output":{"generics":["u16","tryfrominterror"],"name":"result"}}],[11,"try_from","","",318,{"inputs":[{"name":"u64"}],"output":{"generics":["i8","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",298,{"inputs":[{"name":"usize"}],"output":{"generics":["i16","tryfrominterror"],"name":"result"}}],[11,"try_from","","",300,{"inputs":[{"name":"u16"}],"output":{"generics":["u8","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",317,{"inputs":[{"name":"u64"}],"output":{"generics":["isize","tryfrominterror"],"name":"result"}}],[11,"try_from","","",299,{"inputs":[{"name":"i8"}],"output":{"generics":["u16","tryfrominterror"],"name":"result"}}],[11,"try_from","","",298,{"inputs":[{"name":"isize"}],"output":{"generics":["i16","tryfrominterror"],"name":"result"}}],[11,"try_from","","",298,{"inputs":[{"name":"i128"}],"output":{"generics":["i16","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",315,{"inputs":[{"name":"i32"}],"output":{"generics":["u128","tryfrominterror"],"name":"result"}}],[11,"try_from","","",318,{"inputs":[{"name":"usize"}],"output":{"generics":["i8","tryfrominterror"],"name":"result"}}],[11,"try_from","","",300,{"inputs":[{"name":"i128"}],"output":{"generics":["u8","tryfrominterror"],"name":"result"}}],[11,"try_from","","",303,{"inputs":[{"name":"usize"}],"output":{"generics":["i128"],"name":"result"}}],[11,"try_from","","",318,{"inputs":[{"name":"i32"}],"output":{"generics":["i8","tryfrominterror"],"name":"result"}}],[11,"try_from","","",315,{"inputs":[{"name":"i8"}],"output":{"generics":["u128","tryfrominterror"],"name":"result"}}],[11,"try_from","","",308,{"inputs":[{"name":"i8"}],"output":{"generics":["u64","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",298,{"inputs":[{"name":"i32"}],"output":{"generics":["i16","tryfrominterror"],"name":"result"}}],[11,"try_from","","",318,{"inputs":[{"name":"i64"}],"output":{"generics":["i8","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",307,{"inputs":[{"name":"isize"}],"output":{"generics":["i32","tryfrominterror"],"name":"result"}}],[11,"try_from","","",307,{"inputs":[{"name":"u128"}],"output":{"generics":["i32","tryfrominterror"],"name":"result"}}],[11,"try_from","","",300,{"inputs":[{"name":"isize"}],"output":{"generics":["u8","tryfrominterror"],"name":"result"}}],[11,"try_from","","",313,{"inputs":[{"name":"u128"}],"output":{"generics":["i64","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",300,{"inputs":[{"name":"i16"}],"output":{"generics":["u8","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",297,null],[11,"try_from","","",297,null],[11,"try_from","","",297,null],[11,"try_from","","",298,{"inputs":[{"name":"i64"}],"output":{"generics":["i16","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",318,{"inputs":[{"name":"u32"}],"output":{"generics":["i8","tryfrominterror"],"name":"result"}}],[11,"try_from","","",306,{"inputs":[{"name":"i64"}],"output":{"generics":["usize","tryfrominterror"],"name":"result"}}],[11,"try_from","","",318,{"inputs":[{"name":"u16"}],"output":{"generics":["i8","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",297,null],[11,"try_from","","",297,null],[11,"try_from","","",308,{"inputs":[{"name":"isize"}],"output":{"generics":["u64","tryfrominterror"],"name":"result"}}],[11,"try_from","","",300,{"inputs":[{"name":"i64"}],"output":{"generics":["u8","tryfrominterror"],"name":"result"}}],[11,"try_from","","",299,{"inputs":[{"name":"i16"}],"output":{"generics":["u16","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",297,null],[11,"try_from","","",297,null],[11,"try_from","","",308,{"inputs":[{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",306,{"inputs":[{"name":"i8"}],"output":{"generics":["usize","tryfrominterror"],"name":"result"}}],[11,"try_from","","",299,{"inputs":[{"name":"i32"}],"output":{"generics":["u16","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",305,{"inputs":[{"name":"usize"}],"output":{"generics":["u32","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",306,{"inputs":[{"name":"u16"}],"output":{"generics":["usize"],"name":"result"}}],[11,"try_from","","",300,{"inputs":[{"name":"u32"}],"output":{"generics":["u8","tryfrominterror"],"name":"result"}}],[11,"try_from","","",298,{"inputs":[{"name":"u32"}],"output":{"generics":["i16","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",300,{"inputs":[{"name":"usize"}],"output":{"generics":["u8","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",303,{"inputs":[{"name":"u128"}],"output":{"generics":["i128","tryfrominterror"],"name":"result"}}],[11,"try_from","","",315,{"inputs":[{"name":"usize"}],"output":{"generics":["u128"],"name":"result"}}],[11,"try_from","","",317,{"inputs":[{"name":"i128"}],"output":{"generics":["isize","tryfrominterror"],"name":"result"}}],[11,"try_from","","",306,{"inputs":[{"name":"i128"}],"output":{"generics":["usize","tryfrominterror"],"name":"result"}}],[11,"try_from","","",318,{"inputs":[{"name":"isize"}],"output":{"generics":["i8","tryfrominterror"],"name":"result"}}],[11,"try_from","","",305,{"inputs":[{"name":"isize"}],"output":{"generics":["u32","tryfrominterror"],"name":"result"}}],[11,"try_from","","",307,{"inputs":[{"name":"i64"}],"output":{"generics":["i32","tryfrominterror"],"name":"result"}}],[11,"try_from","","",299,{"inputs":[{"name":"usize"}],"output":{"generics":["u16","tryfrominterror"],"name":"result"}}],[11,"try_from","","",307,{"inputs":[{"name":"u32"}],"output":{"generics":["i32","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",317,{"inputs":[{"name":"u8"}],"output":{"generics":["isize"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",306,{"inputs":[{"name":"i16"}],"output":{"generics":["usize","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",315,{"inputs":[{"name":"i128"}],"output":{"generics":["u128","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",305,{"inputs":[{"name":"i64"}],"output":{"generics":["u32","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",297,null],[11,"try_from","","",315,{"inputs":[{"name":"isize"}],"output":{"generics":["u128","tryfrominterror"],"name":"result"}}],[11,"try_from","","",298,{"inputs":[{"name":"u128"}],"output":{"generics":["i16","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",300,{"inputs":[{"name":"u64"}],"output":{"generics":["u8","tryfrominterror"],"name":"result"}}],[11,"try_from","","",306,{"inputs":[{"name":"u64"}],"output":{"generics":["usize"],"name":"result"}}],[11,"try_from","","",317,{"inputs":[{"name":"i64"}],"output":{"generics":["isize"],"name":"result"}}],[11,"try_from","","",308,{"inputs":[{"name":"i64"}],"output":{"generics":["u64","tryfrominterror"],"name":"result"}}],[11,"try_from","","",308,{"inputs":[{"name":"i16"}],"output":{"generics":["u64","tryfrominterror"],"name":"result"}}],[11,"try_from","","",306,{"inputs":[{"name":"isize"}],"output":{"generics":["usize","tryfrominterror"],"name":"result"}}],[11,"try_from","","",300,{"inputs":[{"name":"i8"}],"output":{"generics":["u8","tryfrominterror"],"name":"result"}}],[11,"try_from","","",305,{"inputs":[{"name":"i32"}],"output":{"generics":["u32","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",297,null],[11,"try_from","","",318,{"inputs":[{"name":"i16"}],"output":{"generics":["i8","tryfrominterror"],"name":"result"}}],[11,"try_from","","",317,{"inputs":[{"name":"u128"}],"output":{"generics":["isize","tryfrominterror"],"name":"result"}}],[11,"try_from","","",299,{"inputs":[{"name":"isize"}],"output":{"generics":["u16","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",297,null],[11,"try_from","","",297,null],[11,"try_from","","",300,{"inputs":[{"name":"i32"}],"output":{"generics":["u8","tryfrominterror"],"name":"result"}}],[11,"try_from","","",315,{"inputs":[{"name":"i16"}],"output":{"generics":["u128","tryfrominterror"],"name":"result"}}],[11,"try_from","","",306,{"inputs":[{"name":"u32"}],"output":{"generics":["usize"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",307,{"inputs":[{"name":"i128"}],"output":{"generics":["i32","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",308,{"inputs":[{"name":"i128"}],"output":{"generics":["u64","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",297,null],[11,"try_from","","",297,null],[11,"try_from","","",315,{"inputs":[{"name":"i64"}],"output":{"generics":["u128","tryfrominterror"],"name":"result"}}],[11,"try_from","","",308,{"inputs":[{"name":"u128"}],"output":{"generics":["u64","tryfrominterror"],"name":"result"}}],[11,"try_from","","",303,{"inputs":[{"name":"isize"}],"output":{"generics":["i128"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",298,{"inputs":[{"name":"u64"}],"output":{"generics":["i16","tryfrominterror"],"name":"result"}}],[11,"try_from","","",318,{"inputs":[{"name":"i128"}],"output":{"generics":["i8","tryfrominterror"],"name":"result"}}],[11,"try_from","","",288,{"inputs":[{"name":"u32"}],"output":{"generics":["char"],"name":"result"}}],[11,"try_from","","",299,{"inputs":[{"name":"i128"}],"output":{"generics":["u16","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",297,null],[11,"try_from","","",305,{"inputs":[{"name":"i128"}],"output":{"generics":["u32","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",297,null],[11,"try_from","","",306,{"inputs":[{"name":"u128"}],"output":{"generics":["usize","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",317,{"inputs":[{"name":"u16"}],"output":{"generics":["isize"],"name":"result"}}],[11,"try_from","","",305,{"inputs":[{"name":"u64"}],"output":{"generics":["u32","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",297,null],[11,"try_from","","",318,{"inputs":[{"name":"u128"}],"output":{"generics":["i8","tryfrominterror"],"name":"result"}}],[11,"try_from","","",305,{"inputs":[{"name":"u128"}],"output":{"generics":["u32","tryfrominterror"],"name":"result"}}],[11,"try_from","","",313,{"inputs":[{"name":"isize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"try_from","","",305,{"inputs":[{"name":"i8"}],"output":{"generics":["u32","tryfrominterror"],"name":"result"}}],[11,"try_from","","",306,{"inputs":[{"name":"i32"}],"output":{"generics":["usize","tryfrominterror"],"name":"result"}}],[11,"try_from","","",298,{"inputs":[{"name":"u16"}],"output":{"generics":["i16","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",297,null],[11,"try_from","","",299,{"inputs":[{"name":"u32"}],"output":{"generics":["u16","tryfrominterror"],"name":"result"}}],[11,"try_from","","",317,{"inputs":[{"name":"i32"}],"output":{"generics":["isize"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",305,{"inputs":[{"name":"i16"}],"output":{"generics":["u32","tryfrominterror"],"name":"result"}}],[11,"try_from","","",313,{"inputs":[{"name":"u64"}],"output":{"generics":["i64","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",307,{"inputs":[{"name":"u64"}],"output":{"generics":["i32","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",317,{"inputs":[{"name":"i16"}],"output":{"generics":["isize"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",317,{"inputs":[{"name":"usize"}],"output":{"generics":["isize","tryfrominterror"],"name":"result"}}],[11,"try_from","","",299,{"inputs":[{"name":"u128"}],"output":{"generics":["u16","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",297,null],[11,"try_from","","",297,null],[11,"try_from","","",297,null],[11,"try_from","","",297,null],[11,"try_from","","",313,{"inputs":[{"name":"usize"}],"output":{"generics":["i64","tryfrominterror"],"name":"result"}}],[11,"try_from","","",317,{"inputs":[{"name":"u32"}],"output":{"generics":["isize"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",299,{"inputs":[{"name":"u64"}],"output":{"generics":["u16","tryfrominterror"],"name":"result"}}],[11,"try_from","","",300,{"inputs":[{"name":"u128"}],"output":{"generics":["u8","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",308,{"inputs":[{"name":"i32"}],"output":{"generics":["u64","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",297,null],[11,"try_from","","",307,{"inputs":[{"name":"usize"}],"output":{"generics":["i32","tryfrominterror"],"name":"result"}}],[11,"try_from","","",297,null],[11,"try_from","","",297,null],[11,"bitand","","",317,null],[11,"bitand","","",315,null],[11,"bitand","","",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"bitand","","",300,null],[11,"bitand","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"bitand","","",195,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"bitand","std","",307,null],[11,"bitand","","",305,null],[11,"bitand","","",300,null],[11,"bitand","","",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"bitand","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"bitand","std","",306,null],[11,"bitand","","",306,null],[11,"bitand","std::num","",195,null],[11,"bitand","std","",305,null],[11,"bitand","","",302,null],[11,"bitand","","",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"bitand","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"bitand","std","",299,null],[11,"bitand","","",303,null],[11,"bitand","","",318,null],[11,"bitand","","",313,null],[11,"bitand","std::num","",195,null],[11,"bitand","std","",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"bitand","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"bitand","","",195,null],[11,"bitand","std","",298,null],[11,"bitand","","",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"bitand","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"bitand","","",195,null],[11,"bitand","","",195,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"bitand","std","",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"bitand","","",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"bitand","","",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"bitand","","",298,null],[11,"bitand","","",299,null],[11,"bitand","","",299,null],[11,"bitand","","",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"bitand","","",300,null],[11,"bitand","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"bitand","std","",308,null],[11,"bitand","","",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"bitand","std::num","",195,null],[11,"bitand","std","",306,null],[11,"bitand","","",298,null],[11,"bitand","","",303,null],[11,"bitand","std::num","",195,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"bitand","","",195,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"bitand","std","",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"bitand","std::num","",195,null],[11,"bitand","std","",307,null],[11,"bitand","","",302,null],[11,"bitand","","",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"bitand","std::num","",195,null],[11,"bitand","","",195,null],[11,"bitand","","",195,null],[11,"bitand","std","",308,null],[11,"bitand","","",315,null],[11,"bitand","","",313,null],[11,"bitand","","",305,null],[11,"bitand","","",317,null],[11,"bitand","","",302,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"bitand","","",303,null],[11,"bitand","std::num","",195,null],[11,"bitand","","",195,null],[11,"bitand","std","",302,null],[11,"bitand","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"bitand","std","",315,null],[11,"bitand","std::num","",195,null],[11,"bitand","std","",307,null],[11,"bitand","std::num","",195,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"bitand","std","",317,null],[11,"bitand","","",313,null],[11,"bitand","","",318,null],[11,"bitand","","",318,null],[11,"bitand","","",308,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",291,{"inputs":[{"name":"self"}],"output":{"name":"u"}}],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",290,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"as_mut","","",297,null],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",290,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",290,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","std::result","Returns a consuming iterator over the possibly contained value.",70,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","std::option","Returns a consuming iterator over the possibly contained value.",71,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",297,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"call_once","","",291,null],[11,"call_once","","",291,null],[11,"default","","Returns the default value of `0`",317,{"inputs":[],"output":{"name":"isize"}}],[11,"default","","",297,null],[11,"default","","",297,null],[11,"default","","",297,null],[11,"default","","Returns the default value of `0`",315,{"inputs":[],"output":{"name":"u128"}}],[11,"default","std::cell","Creates a `RefCell<T>`, with the `Default` value for T.",304,{"inputs":[],"output":{"name":"refcell"}}],[11,"default","std","",297,null],[11,"default","std::sync::atomic","",396,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"default","std","",297,null],[11,"default","","",297,null],[11,"default","","",297,null],[11,"default","","",297,null],[11,"default","","Returns the default value of `0`",318,{"inputs":[],"output":{"name":"i8"}}],[11,"default","","Returns the default value of `0`",298,{"inputs":[],"output":{"name":"i16"}}],[11,"default","","",297,null],[11,"default","","",297,null],[11,"default","","Returns the default value of `0`",305,{"inputs":[],"output":{"name":"u32"}}],[11,"default","","",297,null],[11,"default","std::sync::atomic","Creates a null `AtomicPtr<T>`.",322,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"default","std::fmt","",126,{"inputs":[],"output":{"name":"error"}}],[11,"default","std::cell","Creates an `UnsafeCell`, with the `Default` value for T.",365,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"default","std","",297,null],[11,"default","","",297,null],[11,"default","std::hash","",400,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"default","std","",297,null],[11,"default","","",297,null],[11,"default","std::sync::atomic","",385,{"inputs":[],"output":{"name":"atomici8"}}],[11,"default","std","Returns the default value of `0`",313,{"inputs":[],"output":{"name":"i64"}}],[11,"default","","",297,null],[11,"default","","Returns the default value of `0`",306,{"inputs":[],"output":{"name":"usize"}}],[11,"default","","Returns the default value of `0`",308,{"inputs":[],"output":{"name":"u64"}}],[11,"default","","",297,null],[11,"default","","",297,null],[11,"default","std::hash","",399,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"default","std::sync::atomic","",335,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"default","std","",295,null],[11,"default","std::sync::atomic","",334,{"inputs":[],"output":{"name":"atomici32"}}],[11,"default","std","Returns the default value of `0`",303,{"inputs":[],"output":{"name":"i128"}}],[11,"default","std::sync::atomic","",407,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"default","std","",297,null],[11,"default","","",297,null],[11,"default","","",297,null],[11,"default","","Creates a mutable empty slice.",290,null],[11,"default","","Returns the default value of `0`",307,{"inputs":[],"output":{"name":"i32"}}],[11,"default","","",295,null],[11,"default","","",295,null],[11,"default","","",297,null],[11,"default","std::iter","",347,{"inputs":[],"output":{"name":"empty"}}],[11,"default","std","",295,null],[11,"default","std::num","",195,{"inputs":[],"output":{"name":"wrapping"}}],[11,"default","std","Creates an empty slice.",290,null],[11,"default","std::sync::atomic","",367,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"default","std","",297,null],[11,"default","","",297,null],[11,"default","","",297,null],[11,"default","","",295,null],[11,"default","","",297,null],[11,"default","std::hash","",352,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"default","std","Returns the default value of `0`",300,{"inputs":[],"output":{"name":"u8"}}],[11,"default","","",297,null],[11,"default","","Returns the default value of `false`",302,{"inputs":[],"output":{"name":"bool"}}],[11,"default","","",297,null],[11,"default","","",295,null],[11,"default","std::marker","",301,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"default","std::hash","",377,{"inputs":[],"output":{"name":"siphasher"}}],[11,"default","std::cell","Creates a `Cell<T>`, with the `Default` value for T.",314,{"inputs":[],"output":{"name":"cell"}}],[11,"default","std::sync::atomic","",355,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"default","std","Returns the default value of `0.0`",320,{"inputs":[],"output":{"name":"f64"}}],[11,"default","","",295,null],[11,"default","","",295,null],[11,"default","","",297,null],[11,"default","","",295,null],[11,"default","","",297,null],[11,"default","","",297,null],[11,"default","","",295,null],[11,"default","std::sync::atomic","Creates an `AtomicBool` initialized to `false`.",366,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",381,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"default","","",375,{"inputs":[],"output":{"name":"atomici64"}}],[11,"default","std","",295,null],[11,"default","","Returns the default value of `0.0`",319,{"inputs":[],"output":{"name":"f32"}}],[11,"default","","",297,null],[11,"default","std::sync::atomic","",343,{"inputs":[],"output":{"name":"atomici16"}}],[11,"default","std::option","Returns [`None`].",71,{"inputs":[],"output":{"name":"option"}}],[11,"default","std","",297,null],[11,"default","","Returns the default value of `\\x00`",288,{"inputs":[],"output":{"name":"char"}}],[11,"default","","Returns the default value of `()`",310,null],[11,"default","std::mem","",293,{"inputs":[],"output":{"name":"manuallydrop"}}],[11,"default","std","Creates an empty str",289,{"inputs":[],"output":{"name":"str"}}],[11,"default","","Returns the default value of `0`",299,{"inputs":[],"output":{"name":"u16"}}],[11,"default","","",295,null],[11,"deref_mut","","",291,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","std::cell","",294,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","std::mem","",293,null],[11,"haystack","std::str::pattern","",359,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",359,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",359,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",411,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",411,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",411,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",411,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",391,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",391,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",391,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",379,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",379,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",379,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",379,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","std::ptr","",324,{"inputs":[{"name":"self"}],"output":{"name":"unique"}}],[11,"clone","std::ops","",321,{"inputs":[{"name":"self"}],"output":{"name":"rangefull"}}],[11,"clone","std::slice","",333,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"clone","std::fmt","",126,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","std::char","",130,{"inputs":[{"name":"self"}],"output":{"name":"parsecharerror"}}],[11,"clone","std::ops","",39,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","std::iter","",346,{"inputs":[{"name":"self"}],"output":{"name":"skip"}}],[11,"clone","std::str","",120,{"inputs":[{"name":"self"}],"output":{"name":"parseboolerror"}}],[11,"clone","std::cmp","",3,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","std::str::pattern","",379,{"inputs":[{"name":"self"}],"output":{"name":"charslicesearcher"}}],[11,"clone","std::str","",410,{"inputs":[{"name":"self"}],"output":{"name":"matches"}}],[11,"clone","std::iter","",357,{"inputs":[{"name":"self"}],"output":{"name":"stepby"}}],[11,"clone","std::result","",394,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","std::iter","",358,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"clone","std::ops","",43,{"inputs":[{"name":"self"}],"output":{"name":"rangetoinclusive"}}],[11,"clone","std::hash","",352,{"inputs":[{"name":"self"}],"output":{"name":"buildhasherdefault"}}],[11,"clone","std::any","",316,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[11,"clone","std::num","",326,{"inputs":[{"name":"self"}],"output":{"name":"parsefloaterror"}}],[11,"clone","std::str","",342,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"clone","std::num","",371,{"inputs":[{"name":"self"}],"output":{"name":"tryfrominterror"}}],[11,"clone","std::str","",370,{"inputs":[{"name":"self"}],"output":{"name":"rsplitn"}}],[11,"clone","std::slice","",373,{"inputs":[{"name":"self"}],"output":{"name":"windows"}}],[11,"clone","std::str","",362,{"inputs":[{"name":"self"}],"output":{"name":"splitn"}}],[11,"clone","std::iter","",339,{"inputs":[{"name":"self"}],"output":{"name":"scan"}}],[11,"clone","std::option","",388,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","std::slice","",351,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","","",348,{"inputs":[{"name":"self"}],"output":{"name":"chunks"}}],[11,"clone","std::iter","",353,{"inputs":[{"name":"self"}],"output":{"name":"flatmap"}}],[11,"clone","std::str","",382,{"inputs":[{"name":"self"}],"output":{"name":"matchindices"}}],[11,"clone","std::mem","",293,{"inputs":[{"name":"self"}],"output":{"name":"manuallydrop"}}],[11,"clone_from","","",293,null],[11,"clone","std::num","",194,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[11,"clone","std::char","",129,{"inputs":[{"name":"self"}],"output":{"name":"chartryfromerror"}}],[11,"clone","std::num","",327,{"inputs":[{"name":"self"}],"output":{"name":"parseinterror"}}],[11,"clone","std::iter","",398,{"inputs":[{"name":"self"}],"output":{"name":"take"}}],[11,"clone","std::str::pattern","",411,{"inputs":[{"name":"self"}],"output":{"name":"charpredicatesearcher"}}],[11,"clone","std::ops","",42,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[11,"clone","std::str::pattern","",391,{"inputs":[{"name":"self"}],"output":{"name":"strsearcher"}}],[11,"clone","std::iter","",363,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"clone","std::ptr","",323,{"inputs":[{"name":"self"}],"output":{"name":"nonnull"}}],[11,"clone","std::str","",360,{"inputs":[{"name":"self"}],"output":{"name":"rsplitterminator"}}],[11,"clone","std::result","",70,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","std::hash","",399,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"clone","std::option","",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","std::str","",121,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"clone","std::iter","",387,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"clone","std::str","",364,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone","std::iter","",361,{"inputs":[{"name":"self"}],"output":{"name":"takewhile"}}],[11,"clone","","",330,{"inputs":[{"name":"self"}],"output":{"name":"once"}}],[11,"clone","std::option","",372,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","std::sync::atomic","",245,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","std::slice","",341,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","std::char","",386,{"inputs":[{"name":"self"}],"output":{"name":"escapedefault"}}],[11,"clone","std::iter","",340,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"clone","std::str","",369,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"clone","std::mem","",325,{"inputs":[{"name":"self"}],"output":{"name":"discriminant"}}],[11,"clone","std::raw","",69,{"inputs":[{"name":"self"}],"output":{"name":"traitobject"}}],[11,"clone","std::marker","",301,{"inputs":[{"name":"self"}],"output":{"name":"phantomdata"}}],[11,"clone","std::char","",331,{"inputs":[{"name":"self"}],"output":{"name":"escapeunicode"}}],[11,"clone","std::ops","",28,{"inputs":[{"name":"self"}],"output":{"name":"rangefrom"}}],[11,"clone","std::fmt","",408,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"clone","std::str","",374,{"inputs":[{"name":"self"}],"output":{"name":"splitterminator"}}],[11,"clone","std::hash","",377,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"clone","std::iter","",356,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"clone","std::cell","",304,{"inputs":[{"name":"self"}],"output":{"name":"refcell"}}],[11,"clone","std::char","",392,{"inputs":[{"name":"self"}],"output":{"name":"escapedebug"}}],[11,"clone","std::slice","",384,{"inputs":[{"name":"self"}],"output":{"name":"exactchunks"}}],[11,"clone","std::ops","",53,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"rangeto"}}],[11,"clone","std::str::pattern","",359,{"inputs":[{"name":"self"}],"output":{"name":"charsearcher"}}],[11,"clone","std::str","",368,{"inputs":[{"name":"self"}],"output":{"name":"rmatches"}}],[11,"clone","std::hash","",400,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"clone","std::option","",312,{"inputs":[{"name":"self"}],"output":{"name":"noneerror"}}],[11,"clone","std::iter","",345,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"clone","std::cell","",314,{"inputs":[{"name":"self"}],"output":{"name":"cell"}}],[11,"clone","std::iter","",336,{"inputs":[{"name":"self"}],"output":{"name":"chain"}}],[11,"clone","","",349,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"clone","std::result","",393,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","std::convert","",131,{"inputs":[{"name":"self"}],"output":{"name":"infallible"}}],[11,"clone","std::iter","",383,{"inputs":[{"name":"self"}],"output":{"name":"skipwhile"}}],[11,"clone","","",390,{"inputs":[{"name":"self"}],"output":{"name":"filtermap"}}],[11,"clone","std::str::pattern","",90,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"clone","std::str","",378,{"inputs":[{"name":"self"}],"output":{"name":"charindices"}}],[11,"clone","","",338,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","std::iter","",389,{"inputs":[{"name":"self"}],"output":{"name":"repeat"}}],[11,"clone","std::char","",397,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf8"}}],[11,"clone","std::iter","",347,{"inputs":[{"name":"self"}],"output":{"name":"empty"}}],[11,"clone","","",376,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"clone","","",329,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"clone","std::num","",195,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"clone","std::iter","",395,{"inputs":[{"name":"self"}],"output":{"name":"inspect"}}],[11,"clone","std::str","",337,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"clone","","",380,{"inputs":[{"name":"self"}],"output":{"name":"rmatchindices"}}],[11,"clone","","",409,{"inputs":[{"name":"self"}],"output":{"name":"linesany"}}],[11,"partial_cmp","std","",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"le","","",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"ge","","",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"gt","","",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","std::mem","",293,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",293,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"le","","",293,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"gt","","",293,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"ge","","",293,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"partial_cmp","std","",302,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",296,null],[11,"partial_cmp","std::option","",312,{"inputs":[{"name":"self"},{"name":"noneerror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","std","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","std::cmp","",3,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","std","",319,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",319,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"le","","",319,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"ge","","",319,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"gt","","",319,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",288,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",288,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"le","","",288,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"ge","","",288,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"gt","","",288,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",295,null],[11,"lt","","",295,null],[11,"le","","",295,null],[11,"ge","","",295,null],[11,"gt","","",295,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"le","","",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"ge","","",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"gt","","",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",311,null],[11,"partial_cmp","std::marker","",301,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","std","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"le","","",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"ge","","",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gt","","",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",309,null],[11,"lt","","",309,null],[11,"le","","",309,null],[11,"gt","","",309,null],[11,"ge","","",309,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",289,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",295,null],[11,"lt","","",295,null],[11,"le","","",295,null],[11,"ge","","",295,null],[11,"gt","","",295,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","std::result","",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"partial_cmp","std","",296,null],[11,"partial_cmp","","",320,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",320,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"le","","",320,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"ge","","",320,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"gt","","",320,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",295,null],[11,"lt","","",295,null],[11,"le","","",295,null],[11,"ge","","",295,null],[11,"gt","","",295,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","std::cell","",314,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",314,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"le","","",314,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"gt","","",314,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"ge","","",314,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"partial_cmp","std","",296,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"bool"}}],[11,"le","","",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"bool"}}],[11,"ge","","",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"bool"}}],[11,"gt","","",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",309,null],[11,"lt","","",309,null],[11,"le","","",309,null],[11,"gt","","",309,null],[11,"ge","","",309,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",295,null],[11,"lt","","",295,null],[11,"le","","",295,null],[11,"ge","","",295,null],[11,"gt","","",295,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","std::cell","",304,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",304,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"le","","",304,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"gt","","",304,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"ge","","",304,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"partial_cmp","std","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"le","","",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"ge","","",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"gt","","",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",295,null],[11,"lt","","",295,null],[11,"le","","",295,null],[11,"ge","","",295,null],[11,"gt","","",295,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","std::option","",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","std","",295,null],[11,"lt","","",295,null],[11,"le","","",295,null],[11,"ge","","",295,null],[11,"gt","","",295,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"le","","",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"ge","","",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"gt","","",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",295,null],[11,"lt","","",295,null],[11,"le","","",295,null],[11,"ge","","",295,null],[11,"gt","","",295,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","std::ops","",42,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",42,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"le","","",42,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"gt","","",42,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"ge","","",42,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"partial_cmp","std","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",295,null],[11,"lt","","",295,null],[11,"le","","",295,null],[11,"ge","","",295,null],[11,"gt","","",295,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","std::cmp","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"partial_cmp","std","",296,null],[11,"partial_cmp","","",310,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",295,null],[11,"lt","","",295,null],[11,"le","","",295,null],[11,"ge","","",295,null],[11,"gt","","",295,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","std::num","",195,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",195,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",195,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",195,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",195,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"partial_cmp","std","",296,null],[11,"partial_cmp","","",290,null],[11,"partial_cmp","","",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"le","","",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"ge","","",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"gt","","",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"le","","",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"ge","","",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"gt","","",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"le","","",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"ge","","",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"gt","","",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",291,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",291,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"le","","",291,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ge","","",291,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"gt","","",291,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","std::any","",316,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",316,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"le","","",316,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"gt","","",316,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ge","","",316,{"inputs":[{"name":"self"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"partial_cmp","std","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",291,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",291,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"le","","",291,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ge","","",291,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"gt","","",291,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"le","","",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"ge","","",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"gt","","",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",295,null],[11,"lt","","",295,null],[11,"le","","",295,null],[11,"ge","","",295,null],[11,"gt","","",295,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"le","","",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"ge","","",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"gt","","",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","std::convert","",131,{"inputs":[{"name":"self"},{"name":"infallible"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","std","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",295,null],[11,"lt","","",295,null],[11,"le","","",295,null],[11,"ge","","",295,null],[11,"gt","","",295,null],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",295,null],[11,"lt","","",295,null],[11,"le","","",295,null],[11,"ge","","",295,null],[11,"gt","","",295,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","std::fmt","",126,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","std","",296,null],[11,"partial_cmp","","",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"le","","",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"ge","","",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"gt","","",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",296,null],[11,"partial_cmp","","",297,null],[11,"lt","","",297,null],[11,"le","","",297,null],[11,"ge","","",297,null],[11,"gt","","",297,null],[11,"partial_cmp","","",296,null],[11,"as_mut","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","std::vec","",137,null],[11,"as_mut","","",137,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_iter","std::collections::btree_set","Gets an iterator for moving out the `BTreeSet`'s contents.",413,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std::collections::btree_map","",414,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std::collections::linked_list","Consumes the list into an iterator yielding elements by value.",415,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std::vec","Creates a consuming iterator, that is, one that moves each value out of the vector (from start to end). The vector cannot be used after calling this.",137,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std::collections::binary_heap","Creates a consuming iterator, that is, one that moves each value out of the binary heap in arbitrary order. The binary heap cannot be used after calling this.",416,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","std::collections::vec_deque","Consumes the `VecDeque` into a front-to-back iterator yielding elements by value.",417,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"call_once","std::boxed","",119,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",119,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"eq","std::collections::vec_deque","",417,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",417,null],[11,"eq","std","",289,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",289,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","std::boxed","",119,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std","",289,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",289,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","","",417,null],[11,"eq","std::string","",141,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::heap","",418,{"inputs":[{"name":"self"},{"name":"cannotreallocinplace"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections","",105,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","","",417,null],[11,"eq","","",417,null],[11,"eq","","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","std::heap","",419,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"ne","","",419,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"eq","std::borrow","",74,null],[11,"ne","","",74,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::string","",141,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","std::sync","Equality for two `Arc`s.",420,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Arc`s.",420,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","std::borrow","",74,null],[11,"ne","","",74,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","std::collections::btree_map","",414,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","","",417,null],[11,"eq","","",417,null],[11,"eq","","",417,null],[11,"eq","","",417,null],[11,"eq","","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","std::string","",141,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","","",417,null],[11,"eq","std","",289,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",289,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","","",417,null],[11,"eq","std::rc","Equality for two `Rc`s.",138,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc`s.",138,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"eq","std","",289,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",289,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","","",417,null],[11,"eq","","",417,null],[11,"eq","","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","std::collections::linked_list","",415,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",415,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","","",417,null],[11,"eq","","",417,null],[11,"eq","","",417,null],[11,"eq","","",417,null],[11,"eq","std::collections::btree_set","",413,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",413,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::heap","",277,{"inputs":[{"name":"self"},{"name":"allocerr"}],"output":{"name":"bool"}}],[11,"ne","","",277,{"inputs":[{"name":"self"},{"name":"allocerr"}],"output":{"name":"bool"}}],[11,"eq","std::string","",124,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","","",417,null],[11,"eq","","",417,null],[11,"eq","","",417,null],[11,"eq","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","std::collections::vec_deque","",417,null],[11,"eq","","",417,null],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"eq","std::string","",141,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","std::vec","",137,null],[11,"ne","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"add","std::borrow","",74,null],[11,"add","std::string","",141,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"add","std::borrow","",74,null],[11,"index","std::collections::vec_deque","",417,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index","std::string","",141,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index","std::vec","",137,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","std::string","",141,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index","","",141,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"str"}}],[11,"index","","",141,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",141,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","std::vec","",137,null],[11,"index","std::string","",141,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","std::vec","",137,null],[11,"index","","",137,null],[11,"index","","",137,null],[11,"index","","",137,null],[11,"index","std::collections::btree_map","",414,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"index","std::vec","",137,null],[11,"fmt","std::collections::vec_deque","",421,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::btree_set","",422,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::vec_deque","",417,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",423,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",424,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::btree_map","",425,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",414,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::vec_deque","",426,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::btree_map","",427,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::boxed","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::heap","",277,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::linked_list","",428,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::vec","",429,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::sync","",430,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::heap","",431,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::linked_list","",432,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::vec","",433,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::binary_heap","",434,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::vec_deque","",435,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::btree_set","",413,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::binary_heap","",436,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::linked_list","",415,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::vec_deque","",437,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::binary_heap","",416,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::linked_list","",438,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::binary_heap","",439,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::btree_map","",440,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::binary_heap","",441,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::vec","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",442,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::linked_list","",443,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::btree_set","",444,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",445,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",446,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::linked_list","",447,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::btree_map","",448,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::heap","",276,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::btree_set","",449,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::btree_map","",450,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::rc","",451,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::binary_heap","",452,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::heap","",419,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::vec","",453,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::btree_set","",454,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::string","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::btree_map","",455,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",456,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",457,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::btree_set","",458,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::string","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::linked_list","",459,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::btree_map","",460,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::rc","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::heap","",418,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::str","",461,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::string","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",462,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::vec","",463,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::string","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::collections::btree_map","",464,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::sync","",420,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::rc","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::sync","",420,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::string","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::string","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::heap","",277,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",418,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::boxed","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::string","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_owned","std","",290,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone_into","","",290,null],[11,"to_owned","","",289,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone_into","","",289,null],[11,"finalize","std::boxed","",119,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","std::collections::linked_list","",428,{"inputs":[{"name":"self"}],"output":{"name":"frontplace"}}],[11,"make_place","std::boxed","",465,{"inputs":[{"name":"self"}],"output":{"name":"intermediatebox"}}],[11,"make_place","std::vec","",442,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"make_place","std::collections::linked_list","",447,{"inputs":[{"name":"self"}],"output":{"name":"backplace"}}],[11,"make_place","std::collections::vec_deque","",437,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"make_place","","",426,{"inputs":[{"name":"self"}],"output":{"name":"placefront"}}],[11,"deref_mut","std::collections::binary_heap","",452,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","std::string","",141,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","std::vec","",137,null],[11,"deref_mut","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"default","std::collections::vec_deque","Creates an empty `VecDeque<T>`.",417,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"default","std::collections::btree_set","Makes an empty `BTreeSet<T>` with a reasonable choice of B.",413,{"inputs":[],"output":{"name":"btreeset"}}],[11,"default","std::string","Creates an empty `String`.",141,{"inputs":[],"output":{"name":"string"}}],[11,"default","std::borrow","Creates an owned Cow<'a, B> with the default value for the contained owned value.",74,{"inputs":[],"output":{"name":"cow"}}],[11,"default","std::boxed","",119,{"inputs":[],"output":{"generics":["str"],"name":"box"}}],[11,"default","std::heap","",431,{"inputs":[],"output":{"name":"heap"}}],[11,"default","std::collections::binary_heap","Creates an empty `BinaryHeap<T>`.",416,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"default","std::rc","Creates a new `Rc<T>`, with the `Default` value for `T`.",138,{"inputs":[],"output":{"name":"rc"}}],[11,"default","std::collections::btree_map","Creates an empty `BTreeMap<K, V>`.",414,{"inputs":[],"output":{"name":"btreemap"}}],[11,"default","std::boxed","Creates a `Box<T>`, with the `Default` value for T.",119,{"inputs":[],"output":{"name":"box"}}],[11,"default","std::rc","Constructs a new `Weak<T>`, allocating memory for `T` without initializing it. Calling [`upgrade`] on the return value always gives [`None`].",451,{"inputs":[],"output":{"name":"weak"}}],[11,"default","std::collections::linked_list","Creates an empty `LinkedList<T>`.",415,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"default","std::sync","Constructs a new `Weak<T>`, allocating memory for `T` without initializing it. Calling [`upgrade`] on the return value always gives [`None`].",430,{"inputs":[],"output":{"name":"weak"}}],[11,"default","std::boxed","",119,{"inputs":[],"output":{"name":"box"}}],[11,"default","std::vec","Creates an empty `Vec<T>`.",137,{"inputs":[],"output":{"name":"vec"}}],[11,"default","std::sync","Creates a new `Arc<T>`, with the `Default` value for `T`.",420,{"inputs":[],"output":{"name":"arc"}}],[11,"to_string","std::borrow","",74,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_string","std::string","",141,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_string","std","",289,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"partial_cmp","std::boxed","",119,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",119,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",119,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",119,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",119,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::string","",141,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",141,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",141,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",141,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",141,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::rc","Partial comparison for two `Rc`s.",138,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc`s.",138,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less than or equal to' comparison for two `Rc`s.",138,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc`s.",138,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater than or equal to' comparison for two `Rc`s.",138,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::collections::linked_list","",415,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","std::collections::btree_map","",414,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","std::sync","Partial comparison for two `Arc`s.",420,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","Less-than comparison for two `Arc`s.",420,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","'Less than or equal to' comparison for two `Arc`s.",420,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Arc`s.",420,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater than or equal to' comparison for two `Arc`s.",420,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::collections::btree_set","",413,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",413,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",413,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",413,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",413,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::collections::vec_deque","",417,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","std::vec","",137,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","std::collections::btree_set","",454,{"inputs":[{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"clone","std::collections","",105,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"clone","std::collections::btree_set","",458,{"inputs":[{"name":"self"}],"output":{"name":"intersection"}}],[11,"clone","std::sync","Makes a clone of the `Arc` pointer.",420,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"clone","std::rc","Makes a clone of the `Rc` pointer.",138,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"clone","std::collections::btree_set","",422,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","","",444,{"inputs":[{"name":"self"}],"output":{"name":"difference"}}],[11,"clone","std::collections::vec_deque","",423,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","std::collections::btree_map","",414,{"inputs":[{"name":"self"}],"output":{"name":"btreemap"}}],[11,"clone","std::str","",461,{"inputs":[{"name":"self"}],"output":{"name":"encodeutf16"}}],[11,"clone","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","std::heap","",431,{"inputs":[{"name":"self"}],"output":{"name":"heap"}}],[11,"clone","std::collections::binary_heap","",416,{"inputs":[{"name":"self"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",416,null],[11,"clone","std::collections::btree_set","",445,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","std::heap","",418,{"inputs":[{"name":"self"}],"output":{"name":"cannotreallocinplace"}}],[11,"clone","std::collections::linked_list","",432,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","std::string","",141,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone_from","","",141,null],[11,"clone","std::heap","",419,{"inputs":[{"name":"self"}],"output":{"name":"layout"}}],[11,"clone","std::collections::linked_list","",415,{"inputs":[{"name":"self"}],"output":{"name":"linkedlist"}}],[11,"clone","std::vec","",137,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone_from","","",137,null],[11,"clone","std::collections::vec_deque","",421,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","std::collections::btree_map","",464,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","std::sync","Makes a clone of the `Weak` pointer that points to the same value.",430,{"inputs":[{"name":"self"}],"output":{"name":"weak"}}],[11,"clone","std::collections::btree_map","",450,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","std::vec","",429,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","std::boxed","",465,{"inputs":[{"name":"self"}],"output":{"name":"exchangeheapsingleton"}}],[11,"clone","std::borrow","",74,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"clone_from","","",74,null],[11,"clone","std::collections::btree_map","",460,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"clone","std::collections::linked_list","",438,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","std::heap","",277,{"inputs":[{"name":"self"}],"output":{"name":"allocerr"}}],[11,"clone","std::collections::btree_map","",440,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"clone","std::rc","Makes a clone of the `Weak` pointer that points to the same value.",451,{"inputs":[{"name":"self"}],"output":{"name":"weak"}}],[11,"clone","std::collections::btree_set","",413,{"inputs":[{"name":"self"}],"output":{"name":"btreeset"}}],[11,"clone","std::collections::binary_heap","",441,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","std::collections::vec_deque","",417,{"inputs":[{"name":"self"}],"output":{"name":"vecdeque"}}],[11,"clone","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"box"}}],[11,"clone","std::string","",124,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"clone","std::boxed","Returns a new box with a `clone()` of this box's contents.",119,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",119,null],[11,"clone","std::collections::btree_set","",446,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"clone","std::collections::binary_heap","",436,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"next_back","std::collections::vec_deque","",435,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::btree_set","",449,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::linked_list","",432,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::btree_map","",427,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::string","",462,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next_back","std::collections::linked_list","",443,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::btree_map","",425,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::btree_set","",422,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::linked_list","",438,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::vec","",463,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::binary_heap","",436,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::vec_deque","",421,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",421,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","std::vec","",429,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::binary_heap","",441,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::btree_map","",450,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::binary_heap","",434,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::btree_set","",445,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::btree_map","",456,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",457,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::vec_deque","",423,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::vec","",453,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::btree_map","",464,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","std::collections::vec_deque","",424,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rfold","","",424,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","std::collections::btree_map","",460,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",440,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"finish","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",119,null],[11,"write_u8","","",119,null],[11,"write_u16","","",119,null],[11,"write_u32","","",119,null],[11,"write_u64","","",119,null],[11,"write_u128","","",119,null],[11,"write_usize","","",119,null],[11,"write_i8","","",119,null],[11,"write_i16","","",119,null],[11,"write_i32","","",119,null],[11,"write_i64","","",119,null],[11,"write_i128","","",119,null],[11,"write_isize","","",119,null],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::sync","",420,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::rc","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cmp","std::collections::vec_deque","",417,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"cmp","std::collections::btree_map","",414,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"cmp","std::sync","Comparison for two `Arc`s.",420,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"cmp","std::collections::linked_list","",415,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"cmp","std::borrow","",74,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"cmp","std::string","",141,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"cmp","std::collections::btree_set","",413,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"cmp","std::rc","Comparison for two `Rc`s.",138,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"cmp","std::vec","",137,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"cmp","std::boxed","",119,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"finalize","std::collections::vec_deque","",426,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"finalize","std::vec","",442,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"finalize","std::collections::linked_list","",428,null],[11,"finalize","std::collections::vec_deque","",437,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"finalize","std::collections::binary_heap","",439,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"finalize","std::collections::linked_list","",447,null],[11,"finalize","std::boxed","",466,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"borrow_mut","std::vec","",137,null],[11,"borrow_mut","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"alloc","std::heap","",431,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["allocerr"],"name":"result"}}],[11,"oom","","",431,null],[11,"dealloc","","",431,null],[11,"usable_size","","",431,null],[11,"realloc","","",431,null],[11,"alloc_zeroed","","",431,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["allocerr"],"name":"result"}}],[11,"alloc_excess","","",431,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["excess","allocerr"],"name":"result"}}],[11,"realloc_excess","","",431,null],[11,"grow_in_place","","",431,null],[11,"shrink_in_place","","",431,null],[11,"pointer","std::vec","",442,null],[11,"pointer","std::collections::vec_deque","",437,null],[11,"pointer","std::collections::linked_list","",447,null],[11,"pointer","","",428,null],[11,"pointer","std::collections::vec_deque","",426,null],[11,"pointer","std::boxed","",466,null],[11,"pointer","std::collections::binary_heap","",439,null],[11,"make_place","std::boxed","",466,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"write_str","std::string","",141,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","",141,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"add_assign","","",141,null],[11,"add_assign","std::borrow","",74,null],[11,"add_assign","","",74,null],[11,"extend","std::collections::btree_set","",413,null],[11,"extend","std::collections::vec_deque","",417,null],[11,"extend","std::collections::binary_heap","",416,null],[11,"extend","","",416,null],[11,"extend","std::collections::btree_set","",413,null],[11,"extend","std::string","",141,null],[11,"extend","","",141,null],[11,"extend","std::vec","",137,null],[11,"extend","std::string","",141,null],[11,"extend","std::vec","",137,null],[11,"extend","std::collections::btree_map","",414,null],[11,"extend","std::collections::vec_deque","",417,null],[11,"extend","std::collections::btree_map","",414,null],[11,"extend","std::string","",141,null],[11,"extend","std::collections::linked_list","",415,null],[11,"extend","","",415,null],[11,"extend","std::string","",141,null],[11,"next","std::collections::vec_deque","",435,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",435,null],[11,"next","std::collections::btree_set","",446,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",446,null],[11,"next","","",458,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",458,null],[11,"next","std::collections::linked_list","",459,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",459,null],[11,"next","std::collections::btree_map","",464,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",464,null],[11,"next","std::collections::binary_heap","",434,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",434,null],[11,"next","std::collections::vec_deque","",421,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",421,null],[11,"fold","","",421,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",119,null],[11,"nth","","",119,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","std::collections::btree_set","",422,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",444,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",444,null],[11,"next","std::collections::linked_list","",432,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",432,null],[11,"next","std::collections::btree_set","",445,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",445,null],[11,"next","std::collections::vec_deque","",423,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",423,null],[11,"next","std::collections::btree_map","",425,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",425,null],[11,"next","std::vec","",463,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",463,null],[11,"next","","",429,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",429,null],[11,"count","","",429,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","std::collections::btree_map","",457,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",457,null],[11,"next","std::collections::btree_set","",454,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",454,null],[11,"next","std::collections::linked_list","",443,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",443,null],[11,"next","std::collections::btree_map","",427,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",427,null],[11,"next","std::collections::binary_heap","",441,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",441,null],[11,"next","std::collections::vec_deque","",424,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",424,null],[11,"fold","","",424,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next","std::collections::linked_list","",438,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",438,null],[11,"next","std::str","",461,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"size_hint","","",461,null],[11,"next","std::collections::btree_map","",440,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",440,null],[11,"next","std::vec","",453,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",453,null],[11,"next","std::collections::binary_heap","",436,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",436,null],[11,"next","std::collections::btree_set","",449,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",449,null],[11,"next","std::collections::btree_map","",456,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::vec","",433,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",433,null],[11,"next","std::collections::btree_map","",460,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",460,null],[11,"next","","",450,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","std::string","",462,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"size_hint","","",462,null],[11,"start","std::ops","",321,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",321,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","std","",295,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",295,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","std::ops","",39,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","std","",295,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",295,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","std::ops","",49,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",43,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",43,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"len","std::collections::btree_map","",440,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","std::vec","",453,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",429,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::collections::btree_map","",460,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","std::collections::binary_heap","",441,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::collections::btree_map","",425,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","std::collections::btree_set","",449,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","std::collections::binary_heap","",436,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",119,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","std::collections::vec_deque","",421,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::collections::btree_set","",445,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","std::collections::btree_map","",457,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","std::collections::vec_deque","",423,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",424,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","std::collections::binary_heap","",434,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","std::collections::btree_map","",464,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",427,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"resume","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[11,"from_str","std::string","",141,{"inputs":[{"name":"str"}],"output":{"generics":["string","parseerror"],"name":"result"}}],[11,"borrow","std::vec","",137,null],[11,"borrow","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","std::borrow","",74,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"borrow","std::string","",141,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"borrow","std::rc","",138,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","std::sync","",420,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"index_mut","std::vec","",137,null],[11,"index_mut","std::string","",141,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","std::vec","",137,null],[11,"index_mut","","",137,null],[11,"index_mut","","",137,null],[11,"index_mut","std::collections::vec_deque","",417,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","std::string","",141,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",141,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index_mut","std::vec","",137,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","std::string","",141,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",141,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index_mut","std::vec","",137,null],[11,"index_mut","","",137,null],[11,"index_mut","std::string","",141,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeto"}],"output":{"name":"str"}}],[11,"hash","std::rc","",138,null],[11,"hash","std::collections::vec_deque","",417,null],[11,"hash","std::vec","",137,null],[11,"hash","std::collections","",105,null],[11,"hash","std::collections::btree_map","",414,null],[11,"hash","std::borrow","",74,null],[11,"hash","std::string","",141,null],[11,"hash","std::collections::linked_list","",415,null],[11,"hash","std::boxed","",119,null],[11,"hash","std::sync","",420,null],[11,"hash","std::collections::btree_set","",413,null],[11,"drop","std::collections::linked_list","",415,null],[11,"drop","std::string","",462,null],[11,"drop","std::vec","",429,null],[11,"drop","std::collections::linked_list","",459,null],[11,"drop","std::collections::btree_map","",414,null],[11,"drop","std::vec","",453,null],[11,"drop","std::collections::btree_map","",427,null],[11,"drop","std::boxed","",119,null],[11,"drop","std::collections::vec_deque","",417,null],[11,"drop","std::rc","Drops the `Weak` pointer.",451,null],[11,"drop","std::vec","",463,null],[11,"drop","std::collections::binary_heap","",452,null],[11,"drop","std::rc","Drops the `Rc`.",138,null],[11,"drop","std::collections::vec_deque","",435,null],[11,"drop","std::sync","Drops the `Arc`.",420,null],[11,"drop","std::vec","",433,null],[11,"drop","std::sync","Drops the `Weak` pointer.",430,null],[11,"drop","std::boxed","",466,null],[11,"drop","std::vec","",137,null],[11,"deref","std::collections::binary_heap","",452,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","std::borrow","",74,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"deref","std::rc","",138,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"len","std","Returns the length of `self`.",289,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if `self` has a length of zero bytes.",289,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_char_boundary","","Checks that `index`-th byte lies at the start and/or end of a UTF-8 code point sequence.",289,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"as_bytes","","Converts a string slice to a byte slice. To convert the byte slice back into a string slice, use the [`str::from_utf8`] function.",289,null],[11,"as_bytes_mut","","Converts a mutable string slice to a mutable byte slice. To convert the mutable byte slice back into a mutable string slice, use the [`str::from_utf8_mut`] function.",289,null],[11,"as_ptr","","Converts a string slice to a raw pointer.",289,null],[11,"get","","Returns a subslice of `str`.",289,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable subslice of `str`.",289,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_unchecked","","Returns a unchecked subslice of `str`.",289,null],[11,"get_unchecked_mut","","Returns a mutable, unchecked subslice of `str`.",289,null],[11,"slice_unchecked","","Creates a string slice from another string slice, bypassing safety checks.",289,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"str"}}],[11,"slice_mut_unchecked","","Creates a string slice from another string slice, bypassing safety checks. This is generally not recommended, use with caution! For a safe alternative see [`str`] and [`IndexMut`].",289,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"str"}}],[11,"split_at","","Divide one string slice into two at an index.",289,null],[11,"split_at_mut","","Divide one mutable string slice into two at an index.",289,null],[11,"chars","","Returns an iterator over the [`char`]s of a string slice.",289,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"char_indices","","Returns an iterator over the [`char`]s of a string slice, and their positions.",289,{"inputs":[{"name":"self"}],"output":{"name":"charindices"}}],[11,"bytes","","An iterator over the bytes of a string slice.",289,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"split_whitespace","","Split a string slice by whitespace.",289,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"lines","","An iterator over the lines of a string, as string slices.",289,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"lines_any","","An iterator over the lines of a string.",289,{"inputs":[{"name":"self"}],"output":{"name":"linesany"}}],[11,"encode_utf16","","Returns an iterator of `u16` over the string encoded as UTF-16.",289,{"inputs":[{"name":"self"}],"output":{"name":"encodeutf16"}}],[11,"contains","","Returns `true` if the given pattern matches a sub-slice of this string slice.",289,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"starts_with","","Returns `true` if the given pattern matches a prefix of this string slice.",289,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Returns `true` if the given pattern matches a suffix of this string slice.",289,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"find","","Returns the byte index of the first character of this string slice that matches the pattern.",289,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rfind","","Returns the byte index of the last character of this string slice that matches the pattern.",289,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"split","","An iterator over substrings of this string slice, separated by characters matched by a pattern.",289,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"split"}}],[11,"rsplit","","An iterator over substrings of the given string slice, separated by characters matched by a pattern and yielded in reverse order.",289,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"rsplit"}}],[11,"split_terminator","","An iterator over substrings of the given string slice, separated by characters matched by a pattern.",289,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"splitterminator"}}],[11,"rsplit_terminator","","An iterator over substrings of `self`, separated by characters matched by a pattern and yielded in reverse order.",289,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"rsplitterminator"}}],[11,"splitn","","An iterator over substrings of the given string slice, separated by a pattern, restricted to returning at most `n` items.",289,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitn"}}],[11,"rsplitn","","An iterator over substrings of this string slice, separated by a pattern, starting from the end of the string, restricted to returning at most `n` items.",289,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitn"}}],[11,"matches","","An iterator over the disjoint matches of a pattern within the given string slice.",289,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"matches"}}],[11,"rmatches","","An iterator over the disjoint matches of a pattern within this string slice, yielded in reverse order.",289,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"rmatches"}}],[11,"match_indices","","An iterator over the disjoint matches of a pattern within this string slice as well as the index that the match starts at.",289,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"matchindices"}}],[11,"rmatch_indices","","An iterator over the disjoint matches of a pattern within `self`, yielded in reverse order along with the index of the match.",289,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"rmatchindices"}}],[11,"trim","","Returns a string slice with leading and trailing whitespace removed.",289,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"trim_left","","Returns a string slice with leading whitespace removed.",289,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"trim_right","","Returns a string slice with trailing whitespace removed.",289,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"trim_matches","","Returns a string slice with all prefixes and suffixes that match a pattern repeatedly removed.",289,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"str"}}],[11,"trim_left_matches","","Returns a string slice with all prefixes that match a pattern repeatedly removed.",289,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"str"}}],[11,"trim_right_matches","","Returns a string slice with all suffixes that match a pattern repeatedly removed.",289,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"str"}}],[11,"parse","","Parses this string slice into another type.",289,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_boxed_bytes","","Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.",289,{"inputs":[{"generics":["str"],"name":"box"}],"output":{"name":"box"}}],[11,"replace","","Replaces all matches of a pattern with another string.",289,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"}],"output":{"name":"string"}}],[11,"replacen","","Replaces first N matches of a pattern with another string.",289,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"usize"}],"output":{"name":"string"}}],[11,"to_lowercase","","Returns the lowercase equivalent of this string slice, as a new [`String`].",289,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_uppercase","","Returns the uppercase equivalent of this string slice, as a new [`String`].",289,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"escape_debug","","Escapes each char in `s` with [`char::escape_debug`].",289,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"escape_default","","Escapes each char in `s` with [`char::escape_default`].",289,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"escape_unicode","","Escapes each char in `s` with [`char::escape_unicode`].",289,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"into_string","","Converts a [`Box<str>`] into a [`String`] without copying or allocating.",289,{"inputs":[{"generics":["str"],"name":"box"}],"output":{"name":"string"}}],[11,"repeat","","Create a [`String`] by repeating a string `n` times.",289,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[11,"is_ascii","","Checks if all characters in this string are within the ASCII range.",289,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","Returns a copy of this string where each character is mapped to its ASCII upper case equivalent.",289,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_ascii_lowercase","","Returns a copy of this string where each character is mapped to its ASCII lower case equivalent.",289,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq_ignore_ascii_case","","Checks that two strings are an ASCII case-insensitive match.",289,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","Converts this string to its ASCII upper case equivalent in-place.",289,null],[11,"make_ascii_lowercase","","Converts this string to its ASCII lower case equivalent in-place.",289,null],[11,"deref","std::string","",141,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","std::sync","",420,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"len","std","Returns the number of elements in the slice.",290,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the slice has a length of 0.",290,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"first","","Returns the first element of the slice, or `None` if it is empty.",290,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"first_mut","","Returns a mutable pointer to the first element of the slice, or `None` if it is empty.",290,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_first","","Returns the first and all the rest of the elements of the slice, or `None` if it is empty.",290,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_first_mut","","Returns the first and all the rest of the elements of the slice, or `None` if it is empty.",290,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_last","","Returns the last and all the rest of the elements of the slice, or `None` if it is empty.",290,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_last_mut","","Returns the last and all the rest of the elements of the slice, or `None` if it is empty.",290,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"last","","Returns the last element of the slice, or `None` if it is empty.",290,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"last_mut","","Returns a mutable pointer to the last item in the slice.",290,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get","","Returns a reference to an element or subslice depending on the type of index.",290,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to an element or subslice depending on the type of index (see [`get`]) or `None` if the index is out of bounds.",290,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_unchecked","","Returns a reference to an element or subslice, without doing bounds checking.",290,null],[11,"get_unchecked_mut","","Returns a mutable reference to an element or subslice, without doing bounds checking.",290,null],[11,"as_ptr","","Returns a raw pointer to the slice's buffer.",290,null],[11,"as_mut_ptr","","Returns an unsafe mutable pointer to the slice's buffer.",290,null],[11,"swap","","Swaps two elements in the slice.",290,null],[11,"reverse","","Reverses the order of elements in the slice, in place.",290,null],[11,"iter","","Returns an iterator over the slice.",290,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator that allows modifying each value.",290,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"windows","","Returns an iterator over all contiguous windows of length `size`. The windows overlap. If the slice is shorter than `size`, the iterator returns no values.",290,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"windows"}}],[11,"chunks","","Returns an iterator over `chunk_size` elements of the slice at a time. The chunks are slices and do not overlap. If `chunk_size` does not divide the length of the slice, then the last chunk will not have length `chunk_size`.",290,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"exact_chunks","","Returns an iterator over `chunk_size` elements of the slice at a time. The chunks are slices and do not overlap. If `chunk_size` does not divide the length of the slice, then the last up to `chunk_size-1` elements will be omitted.",290,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"exactchunks"}}],[11,"chunks_mut","","Returns an iterator over `chunk_size` elements of the slice at a time. The chunks are mutable slices, and do not overlap. If `chunk_size` does not divide the length of the slice, then the last chunk will not have length `chunk_size`.",290,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[11,"exact_chunks_mut","","Returns an iterator over `chunk_size` elements of the slice at a time. The chunks are mutable slices, and do not overlap. If `chunk_size` does not divide the length of the slice, then the last up to `chunk_size-1` elements will be omitted.",290,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"exactchunksmut"}}],[11,"split_at","","Divides one slice into two at an index.",290,null],[11,"split_at_mut","","Divides one mutable slice into two at an index.",290,null],[11,"split","","Returns an iterator over subslices separated by elements that match `pred`. The matched element is not contained in the subslices.",290,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"split"}}],[11,"split_mut","","Returns an iterator over mutable subslices separated by elements that match `pred`. The matched element is not contained in the subslices.",290,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"splitmut"}}],[11,"rsplit","","Returns an iterator over subslices separated by elements that match `pred`, starting at the end of the slice and working backwards. The matched element is not contained in the subslices.",290,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"rsplit"}}],[11,"rsplit_mut","","Returns an iterator over mutable subslices separated by elements that match `pred`, starting at the end of the slice and working backwards. The matched element is not contained in the subslices.",290,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"rsplitmut"}}],[11,"splitn","","Returns an iterator over subslices separated by elements that match `pred`, limited to returning at most `n` items. The matched element is not contained in the subslices.",290,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"splitn"}}],[11,"splitn_mut","","Returns an iterator over subslices separated by elements that match `pred`, limited to returning at most `n` items. The matched element is not contained in the subslices.",290,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"splitnmut"}}],[11,"rsplitn","","Returns an iterator over subslices separated by elements that match `pred` limited to returning at most `n` items. This starts at the end of the slice and works backwards.  The matched element is not contained in the subslices.",290,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"rsplitn"}}],[11,"rsplitn_mut","","Returns an iterator over subslices separated by elements that match `pred` limited to returning at most `n` items. This starts at the end of the slice and works backwards. The matched element is not contained in the subslices.",290,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"rsplitnmut"}}],[11,"contains","","Returns `true` if the slice contains an element with the given value.",290,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"starts_with","","Returns `true` if `needle` is a prefix of the slice.",290,null],[11,"ends_with","","Returns `true` if `needle` is a suffix of the slice.",290,null],[11,"binary_search","","Binary searches this sorted slice for a given element.",290,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["usize","usize"],"name":"result"}}],[11,"binary_search_by","","Binary searches this sorted slice with a comparator function.",290,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["usize","usize"],"name":"result"}}],[11,"binary_search_by_key","","Binary searches this sorted slice with a key extraction function.",290,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"generics":["usize","usize"],"name":"result"}}],[11,"sort","","Sorts the slice.",290,null],[11,"sort_by","","Sorts the slice with a comparator function.",290,null],[11,"sort_by_key","","Sorts the slice with a key extraction function.",290,null],[11,"sort_unstable","","Sorts the slice, but may not preserve the order of equal elements.",290,null],[11,"sort_unstable_by","","Sorts the slice with a comparator function, but may not preserve the order of equal elements.",290,null],[11,"sort_unstable_by_key","","Sorts the slice with a key extraction function, but may not preserve the order of equal elements.",290,null],[11,"rotate_left","","Rotates the slice in-place such that the first `mid` elements of the slice move to the end while the last `self.len() - mid` elements move to the front. After calling `rotate_left`, the element previously at index `mid` will become the first element in the slice.",290,null],[11,"rotate","","",290,null],[11,"rotate_right","","Rotates the slice in-place such that the first `self.len() - k` elements of the slice move to the end while the last `k` elements move to the front. After calling `rotate_right`, the element previously at index `self.len() - k` will become the first element in the slice.",290,null],[11,"clone_from_slice","","Copies the elements from `src` into `self`.",290,null],[11,"copy_from_slice","","Copies all elements from `src` into `self`, using a memcpy.",290,null],[11,"swap_with_slice","","Swaps all elements in `self` with those in `other`.",290,null],[11,"to_vec","","Copies `self` into a new `Vec`.",290,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_vec","","Converts `self` into a vector without clones or allocation.",290,{"inputs":[{"name":"box"}],"output":{"name":"vec"}}],[11,"deref","std::vec","",137,null],[11,"from","std::rc","",138,{"inputs":[{"name":"vec"}],"output":{"name":"rc"}}],[11,"from","std::sync","",420,{"inputs":[{"name":"box"}],"output":{"name":"arc"}}],[11,"from","std::vec","",137,{"inputs":[{"name":"string"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from","std::rc","",138,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"rc"}}],[11,"from","std::sync","",420,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"from","std::string","",141,{"inputs":[{"generics":["str"],"name":"box"}],"output":{"name":"string"}}],[11,"from","std::borrow","",74,null],[11,"from","std::collections::vec_deque","",417,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","std::boxed","",119,null],[11,"from","std::rc","",138,{"inputs":[{"name":"box"}],"output":{"name":"rc"}}],[11,"from","std::vec","",137,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from","std::sync","",420,null],[11,"from","std::vec","",137,null],[11,"from","std::rc","",138,null],[11,"from","std::boxed","",119,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from","std::vec","",137,{"inputs":[{"name":"box"}],"output":{"name":"vec"}}],[11,"from","std::borrow","",74,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from","std::collections::binary_heap","",416,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","std::boxed","",119,{"inputs":[{"generics":["str"],"name":"box"}],"output":{"name":"box"}}],[11,"from","","",119,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"box"}}],[11,"from","std::rc","",138,{"inputs":[{"name":"string"}],"output":{"generics":["str"],"name":"rc"}}],[11,"from","std::sync","",420,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"arc"}}],[11,"from","","",420,{"inputs":[{"name":"vec"}],"output":{"name":"arc"}}],[11,"from","std::borrow","",74,{"inputs":[{"name":"string"}],"output":{"generics":["str"],"name":"cow"}}],[11,"from","std::vec","",137,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"from","","",137,null],[11,"from","std::string","",141,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","std::vec","",137,{"inputs":[{"name":"str"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from","std::borrow","",74,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"cow"}}],[11,"from","std::string","",141,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"string"}}],[11,"from","std::rc","",138,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"from","std::boxed","",119,{"inputs":[{"name":"string"}],"output":{"generics":["str"],"name":"box"}}],[11,"from","std::sync","",420,{"inputs":[{"name":"string"}],"output":{"generics":["str"],"name":"arc"}}],[11,"from","std::boxed","",119,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"from","std::vec","",137,{"inputs":[{"name":"cow"}],"output":{"name":"vec"}}],[11,"from_iter","std::borrow","",74,{"inputs":[{"name":"i"}],"output":{"generics":["str"],"name":"cow"}}],[11,"from_iter","std::collections::btree_map","",414,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"from_iter","std::collections::vec_deque","",417,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"from_iter","std::string","",141,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",141,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","std::borrow","",74,{"inputs":[{"name":"i"}],"output":{"generics":["str"],"name":"cow"}}],[11,"from_iter","std::string","",141,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","std::vec","",137,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"from_iter","std::string","",141,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","std::collections::binary_heap","",416,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"from_iter","std::borrow","",74,{"inputs":[{"name":"i"}],"output":{"generics":["str"],"name":"cow"}}],[11,"from_iter","std::string","",141,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","std::collections::btree_set","",413,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"from_iter","std::borrow","",74,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","std::collections::linked_list","",415,{"inputs":[{"name":"i"}],"output":{"name":"linkedlist"}}],[11,"as_ref","std::rc","",138,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","std::borrow","",74,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","std::boxed","",119,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","std::sync","",420,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","std::vec","",137,null],[11,"as_ref","std::string","",141,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","std::vec","",137,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_ref","std::string","",141,null],[11,"concat","std","",290,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"join","","",290,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"vec"}}],[11,"connect","","",290,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"vec"}}],[11,"concat","","",290,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"join","","",290,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"connect","","",290,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"eq","std::char","",125,{"inputs":[{"name":"self"},{"name":"decodeutf16error"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"self"},{"name":"decodeutf16error"}],"output":{"name":"bool"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"next_back","std::str","",467,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"split_whitespace","std","",289,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"is_whitespace","","",289,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_alphanumeric","","",289,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"trim","","",289,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"trim_left","","",289,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"trim_right","","",289,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","std::str","",467,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","std::char","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",468,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",469,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",470,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",468,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",469,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cmp","","",95,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"ordering"}}],[11,"next","","",470,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"size_hint","","",470,null],[11,"next","","",469,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next","std::str","",467,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","std::char","",468,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"partial_cmp","","",95,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",95,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"le","","",95,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"gt","","",95,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"ge","","",95,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf16error"}}],[11,"clone","","",470,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf16"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"unicodeversion"}}],[11,"clone","std::str","",467,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"alloc","std::heap","",471,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["allocerr"],"name":"result"}}],[11,"alloc_zeroed","","",471,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["allocerr"],"name":"result"}}],[11,"dealloc","","",471,null],[11,"realloc","","",471,null],[11,"oom","","",471,null],[11,"usable_size","","",471,null],[11,"alloc_excess","","",471,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["excess","allocerr"],"name":"result"}}],[11,"realloc_excess","","",471,null],[11,"grow_in_place","","",471,null],[11,"shrink_in_place","","",471,null],[11,"min_value","std","Returns the smallest value that can be represented by this integer type.",317,{"inputs":[],"output":{"name":"isize"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",317,{"inputs":[],"output":{"name":"isize"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",317,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["isize","parseinterror"],"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",317,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",317,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",317,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",317,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",317,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"isize"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",317,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"isize"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",317,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",317,{"inputs":[{"name":"isize"}],"output":{"name":"isize"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",317,{"inputs":[{"name":"isize"}],"output":{"name":"isize"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",317,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",317,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"checked_add","","Checked integer addition. Computes `self + rhs`, returning `None` if overflow occurred.",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"generics":["isize"],"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - rhs`, returning `None` if overflow occurred.",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"generics":["isize"],"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * rhs`, returning `None` if overflow occurred.",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"generics":["isize"],"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / rhs`, returning `None` if `rhs == 0` or the division results in overflow.",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"generics":["isize"],"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % rhs`, returning `None` if `rhs == 0` or the division results in overflow.",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"generics":["isize"],"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if `self == MIN`.",317,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",317,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["isize"],"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",317,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["isize"],"name":"option"}}],[11,"checked_abs","","Checked absolute value. Computes `self.abs()`, returning `None` if `self == MIN`.",317,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + rhs`, saturating at the numeric bounds instead of overflowing.",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - rhs`, saturating at the numeric bounds instead of overflowing.",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * rhs`, saturating at the numeric bounds instead of overflowing.",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + rhs`, wrapping around at the boundary of the type.",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - rhs`, wrapping around at the boundary of the type.",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * rhs`, wrapping around at the boundary of the type.",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / rhs`, wrapping around at the boundary of the type.",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % rhs`, wrapping around at the boundary of the type.",317,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"isize"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",317,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",317,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"isize"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",317,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"isize"}}],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes `self.abs()`, wrapping around at the boundary of the type.",317,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",317,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",317,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",317,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",317,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",317,null],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum value.",317,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",317,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",317,null],[11,"overflowing_abs","","Computes the absolute value of `self`.",317,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",317,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"isize"}}],[11,"abs","","Computes the absolute value of `self`.",317,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"signum","","Returns a number representing sign of `self`.",317,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",317,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",317,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",318,{"inputs":[],"output":{"name":"i8"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",318,{"inputs":[],"output":{"name":"i8"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",318,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["i8","parseinterror"],"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",318,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",318,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",318,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",318,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",318,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i8"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",318,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i8"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",318,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",318,{"inputs":[{"name":"i8"}],"output":{"name":"i8"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",318,{"inputs":[{"name":"i8"}],"output":{"name":"i8"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",318,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",318,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"checked_add","","Checked integer addition. Computes `self + rhs`, returning `None` if overflow occurred.",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"generics":["i8"],"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - rhs`, returning `None` if overflow occurred.",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"generics":["i8"],"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * rhs`, returning `None` if overflow occurred.",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"generics":["i8"],"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / rhs`, returning `None` if `rhs == 0` or the division results in overflow.",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"generics":["i8"],"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % rhs`, returning `None` if `rhs == 0` or the division results in overflow.",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"generics":["i8"],"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if `self == MIN`.",318,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",318,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["i8"],"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",318,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["i8"],"name":"option"}}],[11,"checked_abs","","Checked absolute value. Computes `self.abs()`, returning `None` if `self == MIN`.",318,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + rhs`, saturating at the numeric bounds instead of overflowing.",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - rhs`, saturating at the numeric bounds instead of overflowing.",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * rhs`, saturating at the numeric bounds instead of overflowing.",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + rhs`, wrapping around at the boundary of the type.",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - rhs`, wrapping around at the boundary of the type.",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * rhs`, wrapping around at the boundary of the type.",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / rhs`, wrapping around at the boundary of the type.",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % rhs`, wrapping around at the boundary of the type.",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"i8"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",318,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",318,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i8"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",318,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i8"}}],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes `self.abs()`, wrapping around at the boundary of the type.",318,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",318,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",318,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",318,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",318,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",318,null],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum value.",318,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",318,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",318,null],[11,"overflowing_abs","","Computes the absolute value of `self`.",318,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",318,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i8"}}],[11,"abs","","Computes the absolute value of `self`.",318,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"signum","","Returns a number representing sign of `self`.",318,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",318,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",318,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",298,{"inputs":[],"output":{"name":"i16"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",298,{"inputs":[],"output":{"name":"i16"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",298,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["i16","parseinterror"],"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",298,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",298,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",298,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",298,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",298,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i16"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",298,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i16"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",298,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",298,{"inputs":[{"name":"i16"}],"output":{"name":"i16"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",298,{"inputs":[{"name":"i16"}],"output":{"name":"i16"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",298,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",298,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"checked_add","","Checked integer addition. Computes `self + rhs`, returning `None` if overflow occurred.",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"generics":["i16"],"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - rhs`, returning `None` if overflow occurred.",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"generics":["i16"],"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * rhs`, returning `None` if overflow occurred.",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"generics":["i16"],"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / rhs`, returning `None` if `rhs == 0` or the division results in overflow.",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"generics":["i16"],"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % rhs`, returning `None` if `rhs == 0` or the division results in overflow.",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"generics":["i16"],"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if `self == MIN`.",298,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",298,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["i16"],"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",298,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["i16"],"name":"option"}}],[11,"checked_abs","","Checked absolute value. Computes `self.abs()`, returning `None` if `self == MIN`.",298,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + rhs`, saturating at the numeric bounds instead of overflowing.",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - rhs`, saturating at the numeric bounds instead of overflowing.",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * rhs`, saturating at the numeric bounds instead of overflowing.",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + rhs`, wrapping around at the boundary of the type.",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - rhs`, wrapping around at the boundary of the type.",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * rhs`, wrapping around at the boundary of the type.",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / rhs`, wrapping around at the boundary of the type.",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % rhs`, wrapping around at the boundary of the type.",298,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"i16"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",298,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",298,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i16"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",298,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i16"}}],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes `self.abs()`, wrapping around at the boundary of the type.",298,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",298,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",298,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",298,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",298,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",298,null],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum value.",298,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",298,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",298,null],[11,"overflowing_abs","","Computes the absolute value of `self`.",298,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",298,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i16"}}],[11,"abs","","Computes the absolute value of `self`.",298,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"signum","","Returns a number representing sign of `self`.",298,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",298,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",298,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",307,{"inputs":[],"output":{"name":"i32"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",307,{"inputs":[],"output":{"name":"i32"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",307,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["i32","parseinterror"],"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",307,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",307,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",307,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",307,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",307,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",307,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",307,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",307,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",307,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",307,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",307,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"checked_add","","Checked integer addition. Computes `self + rhs`, returning `None` if overflow occurred.",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["i32"],"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - rhs`, returning `None` if overflow occurred.",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["i32"],"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * rhs`, returning `None` if overflow occurred.",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["i32"],"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / rhs`, returning `None` if `rhs == 0` or the division results in overflow.",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["i32"],"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % rhs`, returning `None` if `rhs == 0` or the division results in overflow.",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["i32"],"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if `self == MIN`.",307,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",307,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["i32"],"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",307,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["i32"],"name":"option"}}],[11,"checked_abs","","Checked absolute value. Computes `self.abs()`, returning `None` if `self == MIN`.",307,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + rhs`, saturating at the numeric bounds instead of overflowing.",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - rhs`, saturating at the numeric bounds instead of overflowing.",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * rhs`, saturating at the numeric bounds instead of overflowing.",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + rhs`, wrapping around at the boundary of the type.",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - rhs`, wrapping around at the boundary of the type.",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * rhs`, wrapping around at the boundary of the type.",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / rhs`, wrapping around at the boundary of the type.",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % rhs`, wrapping around at the boundary of the type.",307,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",307,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",307,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",307,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes `self.abs()`, wrapping around at the boundary of the type.",307,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",307,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",307,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",307,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",307,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",307,null],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum value.",307,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",307,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",307,null],[11,"overflowing_abs","","Computes the absolute value of `self`.",307,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",307,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"abs","","Computes the absolute value of `self`.",307,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"signum","","Returns a number representing sign of `self`.",307,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",307,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",307,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",313,{"inputs":[],"output":{"name":"i64"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",313,{"inputs":[],"output":{"name":"i64"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",313,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["i64","parseinterror"],"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",313,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",313,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",313,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",313,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",313,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i64"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",313,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i64"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",313,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",313,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",313,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",313,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",313,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"checked_add","","Checked integer addition. Computes `self + rhs`, returning `None` if overflow occurred.",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"generics":["i64"],"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - rhs`, returning `None` if overflow occurred.",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"generics":["i64"],"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * rhs`, returning `None` if overflow occurred.",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"generics":["i64"],"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / rhs`, returning `None` if `rhs == 0` or the division results in overflow.",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"generics":["i64"],"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % rhs`, returning `None` if `rhs == 0` or the division results in overflow.",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"generics":["i64"],"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if `self == MIN`.",313,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",313,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["i64"],"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",313,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["i64"],"name":"option"}}],[11,"checked_abs","","Checked absolute value. Computes `self.abs()`, returning `None` if `self == MIN`.",313,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + rhs`, saturating at the numeric bounds instead of overflowing.",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - rhs`, saturating at the numeric bounds instead of overflowing.",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * rhs`, saturating at the numeric bounds instead of overflowing.",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + rhs`, wrapping around at the boundary of the type.",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - rhs`, wrapping around at the boundary of the type.",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * rhs`, wrapping around at the boundary of the type.",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / rhs`, wrapping around at the boundary of the type.",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % rhs`, wrapping around at the boundary of the type.",313,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",313,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",313,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i64"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",313,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i64"}}],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes `self.abs()`, wrapping around at the boundary of the type.",313,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",313,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",313,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",313,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",313,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",313,null],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum value.",313,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",313,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",313,null],[11,"overflowing_abs","","Computes the absolute value of `self`.",313,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",313,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i64"}}],[11,"abs","","Computes the absolute value of `self`.",313,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"signum","","Returns a number representing sign of `self`.",313,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",313,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",313,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",303,{"inputs":[],"output":{"name":"i128"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",303,{"inputs":[],"output":{"name":"i128"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",303,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["i128","parseinterror"],"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",303,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",303,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",303,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",303,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",303,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",303,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",303,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",303,{"inputs":[{"name":"i128"}],"output":{"name":"i128"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",303,{"inputs":[{"name":"i128"}],"output":{"name":"i128"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",303,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",303,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"checked_add","","Checked integer addition. Computes `self + rhs`, returning `None` if overflow occurred.",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"generics":["i128"],"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - rhs`, returning `None` if overflow occurred.",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"generics":["i128"],"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * rhs`, returning `None` if overflow occurred.",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"generics":["i128"],"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / rhs`, returning `None` if `rhs == 0` or the division results in overflow.",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"generics":["i128"],"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % rhs`, returning `None` if `rhs == 0` or the division results in overflow.",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"generics":["i128"],"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if `self == MIN`.",303,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",303,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["i128"],"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",303,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["i128"],"name":"option"}}],[11,"checked_abs","","Checked absolute value. Computes `self.abs()`, returning `None` if `self == MIN`.",303,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + rhs`, saturating at the numeric bounds instead of overflowing.",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - rhs`, saturating at the numeric bounds instead of overflowing.",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * rhs`, saturating at the numeric bounds instead of overflowing.",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + rhs`, wrapping around at the boundary of the type.",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - rhs`, wrapping around at the boundary of the type.",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * rhs`, wrapping around at the boundary of the type.",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / rhs`, wrapping around at the boundary of the type.",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % rhs`, wrapping around at the boundary of the type.",303,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",303,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",303,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",303,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"wrapping_abs","","Wrapping (modular) absolute value. Computes `self.abs()`, wrapping around at the boundary of the type.",303,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",303,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",303,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",303,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",303,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",303,null],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum value.",303,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",303,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",303,null],[11,"overflowing_abs","","Computes the absolute value of `self`.",303,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",303,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"abs","","Computes the absolute value of `self`.",303,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"signum","","Returns a number representing sign of `self`.",303,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.",303,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.",303,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",306,{"inputs":[],"output":{"name":"usize"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",306,{"inputs":[],"output":{"name":"usize"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",306,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["usize","parseinterror"],"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",306,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",306,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",306,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",306,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",306,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",306,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",306,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",306,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",306,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",306,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",306,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"checked_add","","Checked integer addition. Computes `self + rhs`, returning `None` if overflow occurred.",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - rhs`, returning `None` if overflow occurred.",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * rhs`, returning `None` if overflow occurred.",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / rhs`, returning `None` if `rhs == 0`.",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % rhs`, returning `None` if `rhs == 0`.",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` unless `self == 0`.",306,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",306,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["usize"],"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",306,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["usize"],"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + rhs`, saturating at the numeric bounds instead of overflowing.",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - rhs`, saturating at the numeric bounds instead of overflowing.",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * rhs`, saturating at the numeric bounds instead of overflowing.",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + rhs`, wrapping around at the boundary of the type.",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - rhs`, wrapping around at the boundary of the type.",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * rhs`, wrapping around at the boundary of the type.",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / rhs`. Wrapped division on unsigned types is just normal division. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % rhs`. Wrapped remainder calculation on unsigned types is just the regular remainder calculation. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",306,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",306,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",306,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",306,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",306,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",306,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",306,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",306,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",306,null],[11,"overflowing_neg","","Negates self in an overflowing fashion.",306,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",306,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",306,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",306,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",306,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.",306,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If the next power of two is greater than the type's maximum value, `None` is returned, otherwise the power of two is wrapped in `Some`.",306,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",300,{"inputs":[],"output":{"name":"u8"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",300,{"inputs":[],"output":{"name":"u8"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",300,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["u8","parseinterror"],"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",300,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",300,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",300,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",300,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",300,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",300,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",300,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",300,{"inputs":[{"name":"u8"}],"output":{"name":"u8"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",300,{"inputs":[{"name":"u8"}],"output":{"name":"u8"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",300,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",300,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"checked_add","","Checked integer addition. Computes `self + rhs`, returning `None` if overflow occurred.",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["u8"],"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - rhs`, returning `None` if overflow occurred.",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["u8"],"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * rhs`, returning `None` if overflow occurred.",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["u8"],"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / rhs`, returning `None` if `rhs == 0`.",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["u8"],"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % rhs`, returning `None` if `rhs == 0`.",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["u8"],"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` unless `self == 0`.",300,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",300,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",300,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + rhs`, saturating at the numeric bounds instead of overflowing.",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - rhs`, saturating at the numeric bounds instead of overflowing.",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * rhs`, saturating at the numeric bounds instead of overflowing.",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + rhs`, wrapping around at the boundary of the type.",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - rhs`, wrapping around at the boundary of the type.",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * rhs`, wrapping around at the boundary of the type.",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / rhs`. Wrapped division on unsigned types is just normal division. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % rhs`. Wrapped remainder calculation on unsigned types is just the regular remainder calculation. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",300,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",300,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",300,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",300,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",300,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",300,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",300,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",300,null],[11,"overflowing_neg","","Negates self in an overflowing fashion.",300,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",300,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",300,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",300,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.",300,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If the next power of two is greater than the type's maximum value, `None` is returned, otherwise the power of two is wrapped in `Some`.",300,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"is_ascii","","Checks if the value is within the ASCII range.",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","Makes a copy of the value in its ASCII upper case equivalent.",300,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"to_ascii_lowercase","","Makes a copy of the value in its ASCII lower case equivalent.",300,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"eq_ignore_ascii_case","","Checks that two values are an ASCII case-insensitive match.",300,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","Converts this value to its ASCII upper case equivalent in-place.",300,null],[11,"make_ascii_lowercase","","Converts this value to its ASCII lower case equivalent in-place.",300,null],[11,"is_ascii_alphabetic","","Checks if the value is an ASCII alphabetic character:",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_uppercase","","Checks if the value is an ASCII uppercase character: U+0041 'A' ... U+005A 'Z'.",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_lowercase","","Checks if the value is an ASCII lowercase character: U+0061 'a' ... U+007A 'z'.",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_alphanumeric","","Checks if the value is an ASCII alphanumeric character:",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_digit","","Checks if the value is an ASCII decimal digit: U+0030 '0' ... U+0039 '9'.",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_hexdigit","","Checks if the value is an ASCII hexadecimal digit:",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_punctuation","","Checks if the value is an ASCII punctuation character:",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_graphic","","Checks if the value is an ASCII graphic character: U+0021 '@' ... U+007E '~'.",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_whitespace","","Checks if the value is an ASCII whitespace character: U+0020 SPACE, U+0009 HORIZONTAL TAB, U+000A LINE FEED, U+000C FORM FEED, or U+000D CARRIAGE RETURN.",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_control","","Checks if the value is an ASCII control character: U+0000 NUL ... U+001F UNIT SEPARATOR, or U+007F DELETE. Note that most ASCII whitespace characters are control characters, but SPACE is not.",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",299,{"inputs":[],"output":{"name":"u16"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",299,{"inputs":[],"output":{"name":"u16"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",299,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["u16","parseinterror"],"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",299,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",299,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",299,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",299,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",299,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u16"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",299,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u16"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",299,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",299,{"inputs":[{"name":"u16"}],"output":{"name":"u16"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",299,{"inputs":[{"name":"u16"}],"output":{"name":"u16"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",299,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",299,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"checked_add","","Checked integer addition. Computes `self + rhs`, returning `None` if overflow occurred.",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["u16"],"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - rhs`, returning `None` if overflow occurred.",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["u16"],"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * rhs`, returning `None` if overflow occurred.",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["u16"],"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / rhs`, returning `None` if `rhs == 0`.",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["u16"],"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % rhs`, returning `None` if `rhs == 0`.",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["u16"],"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` unless `self == 0`.",299,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",299,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u16"],"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",299,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u16"],"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + rhs`, saturating at the numeric bounds instead of overflowing.",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - rhs`, saturating at the numeric bounds instead of overflowing.",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * rhs`, saturating at the numeric bounds instead of overflowing.",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + rhs`, wrapping around at the boundary of the type.",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - rhs`, wrapping around at the boundary of the type.",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * rhs`, wrapping around at the boundary of the type.",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / rhs`. Wrapped division on unsigned types is just normal division. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % rhs`. Wrapped remainder calculation on unsigned types is just the regular remainder calculation. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",299,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"u16"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",299,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",299,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u16"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",299,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u16"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",299,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",299,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",299,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",299,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",299,null],[11,"overflowing_neg","","Negates self in an overflowing fashion.",299,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",299,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",299,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",299,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u16"}}],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",299,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.",299,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If the next power of two is greater than the type's maximum value, `None` is returned, otherwise the power of two is wrapped in `Some`.",299,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",305,{"inputs":[],"output":{"name":"u32"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",305,{"inputs":[],"output":{"name":"u32"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",305,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["u32","parseinterror"],"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",305,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",305,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",305,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",305,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",305,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",305,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",305,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",305,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",305,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"checked_add","","Checked integer addition. Computes `self + rhs`, returning `None` if overflow occurred.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u32"],"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - rhs`, returning `None` if overflow occurred.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u32"],"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * rhs`, returning `None` if overflow occurred.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u32"],"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / rhs`, returning `None` if `rhs == 0`.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u32"],"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % rhs`, returning `None` if `rhs == 0`.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u32"],"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` unless `self == 0`.",305,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u32"],"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u32"],"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + rhs`, saturating at the numeric bounds instead of overflowing.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - rhs`, saturating at the numeric bounds instead of overflowing.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * rhs`, saturating at the numeric bounds instead of overflowing.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + rhs`, wrapping around at the boundary of the type.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - rhs`, wrapping around at the boundary of the type.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * rhs`, wrapping around at the boundary of the type.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / rhs`. Wrapped division on unsigned types is just normal division. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % rhs`. Wrapped remainder calculation on unsigned types is just the regular remainder calculation. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",305,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",305,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",305,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",305,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",305,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",305,null],[11,"overflowing_neg","","Negates self in an overflowing fashion.",305,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",305,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",305,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",305,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.",305,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If the next power of two is greater than the type's maximum value, `None` is returned, otherwise the power of two is wrapped in `Some`.",305,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",308,{"inputs":[],"output":{"name":"u64"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",308,{"inputs":[],"output":{"name":"u64"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",308,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["u64","parseinterror"],"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",308,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",308,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",308,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",308,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",308,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",308,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",308,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",308,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",308,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",308,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",308,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"checked_add","","Checked integer addition. Computes `self + rhs`, returning `None` if overflow occurred.",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["u64"],"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - rhs`, returning `None` if overflow occurred.",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["u64"],"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * rhs`, returning `None` if overflow occurred.",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["u64"],"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / rhs`, returning `None` if `rhs == 0`.",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["u64"],"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % rhs`, returning `None` if `rhs == 0`.",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["u64"],"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` unless `self == 0`.",308,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",308,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u64"],"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",308,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u64"],"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + rhs`, saturating at the numeric bounds instead of overflowing.",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - rhs`, saturating at the numeric bounds instead of overflowing.",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * rhs`, saturating at the numeric bounds instead of overflowing.",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + rhs`, wrapping around at the boundary of the type.",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - rhs`, wrapping around at the boundary of the type.",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * rhs`, wrapping around at the boundary of the type.",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / rhs`. Wrapped division on unsigned types is just normal division. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % rhs`. Wrapped remainder calculation on unsigned types is just the regular remainder calculation. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",308,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",308,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",308,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",308,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",308,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",308,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",308,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",308,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",308,null],[11,"overflowing_neg","","Negates self in an overflowing fashion.",308,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",308,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",308,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",308,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",308,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.",308,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If the next power of two is greater than the type's maximum value, `None` is returned, otherwise the power of two is wrapped in `Some`.",308,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",315,{"inputs":[],"output":{"name":"u128"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",315,{"inputs":[],"output":{"name":"u128"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",315,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["u128","parseinterror"],"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",315,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",315,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",315,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",315,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`, wrapping the truncated bits to the end of the resulting integer.",315,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",315,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",315,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"from_be","","Converts an integer from big endian to the target's endianness.",315,{"inputs":[{"name":"u128"}],"output":{"name":"u128"}}],[11,"from_le","","Converts an integer from little endian to the target's endianness.",315,{"inputs":[{"name":"u128"}],"output":{"name":"u128"}}],[11,"to_be","","Converts `self` to big endian from the target's endianness.",315,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"to_le","","Converts `self` to little endian from the target's endianness.",315,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"checked_add","","Checked integer addition. Computes `self + rhs`, returning `None` if overflow occurred.",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"generics":["u128"],"name":"option"}}],[11,"checked_sub","","Checked integer subtraction. Computes `self - rhs`, returning `None` if overflow occurred.",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"generics":["u128"],"name":"option"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * rhs`, returning `None` if overflow occurred.",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"generics":["u128"],"name":"option"}}],[11,"checked_div","","Checked integer division. Computes `self / rhs`, returning `None` if `rhs == 0`.",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"generics":["u128"],"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % rhs`, returning `None` if `rhs == 0`.",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"generics":["u128"],"name":"option"}}],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` unless `self == 0`.",315,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"option"}}],[11,"checked_shl","","Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",315,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u128"],"name":"option"}}],[11,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is larger than or equal to the number of bits in `self`.",315,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u128"],"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + rhs`, saturating at the numeric bounds instead of overflowing.",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - rhs`, saturating at the numeric bounds instead of overflowing.",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * rhs`, saturating at the numeric bounds instead of overflowing.",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + rhs`, wrapping around at the boundary of the type.",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - rhs`, wrapping around at the boundary of the type.",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * rhs`, wrapping around at the boundary of the type.",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / rhs`. Wrapped division on unsigned types is just normal division. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % rhs`. Wrapped remainder calculation on unsigned types is just the regular remainder calculation. There's no way wrapping could ever happen. This function exists, so that all operations are accounted for in the wrapping operations.",315,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",315,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",315,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",315,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"overflowing_add","","Calculates `self` + `rhs`",315,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",315,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",315,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",315,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",315,null],[11,"overflowing_neg","","Negates self in an overflowing fashion.",315,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",315,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",315,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",315,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",315,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.",315,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If the next power of two is greater than the type's maximum value, `None` is returned, otherwise the power of two is wrapped in `Some`.",315,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"option"}}],[11,"is_digit","","Checks if a `char` is a digit in the given radix.",288,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"to_digit","","Converts a `char` to a digit in the given radix.",288,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u32"],"name":"option"}}],[11,"escape_unicode","","Returns an iterator that yields the hexadecimal Unicode escape of a character as `char`s.",288,{"inputs":[{"name":"self"}],"output":{"name":"escapeunicode"}}],[11,"escape_debug","","Returns an iterator that yields the literal escape code of a character as `char`s.",288,{"inputs":[{"name":"self"}],"output":{"name":"escapedebug"}}],[11,"escape_default","","Returns an iterator that yields the literal escape code of a character as `char`s.",288,{"inputs":[{"name":"self"}],"output":{"name":"escapedefault"}}],[11,"len_utf8","","Returns the number of bytes this `char` would need if encoded in UTF-8.",288,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len_utf16","","Returns the number of 16-bit code units this `char` would need if encoded in UTF-16.",288,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encode_utf8","","Encodes this character as UTF-8 into the provided byte buffer, and then returns the subslice of the buffer that contains the encoded character.",288,null],[11,"encode_utf16","","Encodes this character as UTF-16 into the provided `u16` buffer, and then returns the subslice of the buffer that contains the encoded character.",288,null],[11,"is_alphabetic","","Returns true if this `char` is an alphabetic code point, and false if not.",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_xid_start","","Returns true if this `char` satisfies the 'XID_Start' Unicode property, and false otherwise.",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_xid_continue","","Returns true if this `char` satisfies the 'XID_Continue' Unicode property, and false otherwise.",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_lowercase","","Returns true if this `char` is lowercase, and false otherwise.",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_uppercase","","Returns true if this `char` is uppercase, and false otherwise.",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_whitespace","","Returns true if this `char` is whitespace, and false otherwise.",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_alphanumeric","","Returns true if this `char` is alphanumeric, and false otherwise.",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_control","","Returns true if this `char` is a control code point, and false otherwise.",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_numeric","","Returns true if this `char` is numeric, and false otherwise.",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_lowercase","","Returns an iterator that yields the lowercase equivalent of a `char` as one or more `char`s.",288,{"inputs":[{"name":"self"}],"output":{"name":"tolowercase"}}],[11,"to_uppercase","","Returns an iterator that yields the uppercase equivalent of a `char` as one or more `char`s.",288,{"inputs":[{"name":"self"}],"output":{"name":"touppercase"}}],[11,"is_ascii","","Checks if the value is within the ASCII range.",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","Makes a copy of the value in its ASCII upper case equivalent.",288,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"to_ascii_lowercase","","Makes a copy of the value in its ASCII lower case equivalent.",288,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"eq_ignore_ascii_case","","Checks that two values are an ASCII case-insensitive match.",288,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","Converts this type to its ASCII upper case equivalent in-place.",288,null],[11,"make_ascii_lowercase","","Converts this type to its ASCII lower case equivalent in-place.",288,null],[11,"is_ascii_alphabetic","","Checks if the value is an ASCII alphabetic character:",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_uppercase","","Checks if the value is an ASCII uppercase character: U+0041 'A' ... U+005A 'Z'.",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_lowercase","","Checks if the value is an ASCII lowercase character: U+0061 'a' ... U+007A 'z'.",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_alphanumeric","","Checks if the value is an ASCII alphanumeric character:",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_digit","","Checks if the value is an ASCII decimal digit: U+0030 '0' ... U+0039 '9'.",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_hexdigit","","Checks if the value is an ASCII hexadecimal digit:",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_punctuation","","Checks if the value is an ASCII punctuation character:",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_graphic","","Checks if the value is an ASCII graphic character: U+0021 '@' ... U+007E '~'.",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_whitespace","","Checks if the value is an ASCII whitespace character: U+0020 SPACE, U+0009 HORIZONTAL TAB, U+000A LINE FEED, U+000C FORM FEED, or U+000D CARRIAGE RETURN.",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_control","","Checks if the value is an ASCII control character: U+0000 NUL ... U+001F UNIT SEPARATOR, or U+007F DELETE. Note that most ASCII whitespace characters are control characters, but SPACE is not.",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii","","Checks if all bytes in this slice are within the ASCII range.",290,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","Returns a vector containing a copy of this slice where each byte is mapped to its ASCII upper case equivalent.",290,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_ascii_lowercase","","Returns a vector containing a copy of this slice where each byte is mapped to its ASCII lower case equivalent.",290,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"eq_ignore_ascii_case","","Checks that two slices are an ASCII case-insensitive match.",290,null],[11,"make_ascii_uppercase","","Converts this slice to its ASCII upper case equivalent in-place.",290,null],[11,"make_ascii_lowercase","","Converts this slice to its ASCII lower case equivalent in-place.",290,null],[11,"is_null","","Returns `true` if the pointer is null.",309,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Returns `None` if the pointer is null, or else returns a reference to the value wrapped in `Some`.",309,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"offset","","Calculates the offset from a pointer.",309,null],[11,"wrapping_offset","","Calculates the offset from a pointer using wrapping arithmetic.",309,null],[11,"offset_to","","Calculates the distance between two pointers. The returned value is in units of T: the distance in bytes is divided by `mem::size_of::<T>()`.",309,null],[11,"add","","Calculates the offset from a pointer (convenience for `.offset(count as isize)`).",309,null],[11,"sub","","Calculates the offset from a pointer (convenience for `.offset((count as isize).wrapping_neg())`).",309,null],[11,"wrapping_add","","Calculates the offset from a pointer using wrapping arithmetic. (convenience for `.wrapping_offset(count as isize)`)",309,null],[11,"wrapping_sub","","Calculates the offset from a pointer using wrapping arithmetic. (convenience for `.wrapping_offset((count as isize).wrapping_sub())`)",309,null],[11,"read","","Reads the value from `self` without moving it. This leaves the memory in `self` unchanged.",309,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read_volatile","","Performs a volatile read of the value from `self` without moving it. This leaves the memory in `self` unchanged.",309,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read_unaligned","","Reads the value from `self` without moving it. This leaves the memory in `self` unchanged.",309,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"copy_to","","Copies `count * size_of<T>` bytes from `self` to `dest`. The source and destination may overlap.",309,null],[11,"copy_to_nonoverlapping","","Copies `count * size_of<T>` bytes from `self` to `dest`. The source and destination may not overlap.",309,null],[11,"align_offset","","Computes the byte offset that needs to be applied in order to make the pointer aligned to `align`. If it is not possible to align the pointer, the implementation returns `usize::max_value()`.",309,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"is_null","","Returns `true` if the pointer is null.",309,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Returns `None` if the pointer is null, or else returns a reference to the value wrapped in `Some`.",309,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"offset","","Calculates the offset from a pointer.",309,null],[11,"wrapping_offset","","Calculates the offset from a pointer using wrapping arithmetic. `count` is in units of T; e.g. a `count` of 3 represents a pointer offset of `3 * size_of::<T>()` bytes.",309,null],[11,"as_mut","","Returns `None` if the pointer is null, or else returns a mutable reference to the value wrapped in `Some`.",309,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"offset_to","","Calculates the distance between two pointers. The returned value is in units of T: the distance in bytes is divided by `mem::size_of::<T>()`.",309,null],[11,"align_offset","","Computes the byte offset that needs to be applied in order to make the pointer aligned to `align`. If it is not possible to align the pointer, the implementation returns `usize::max_value()`.",309,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"add","","Calculates the offset from a pointer (convenience for `.offset(count as isize)`).",309,null],[11,"sub","","Calculates the offset from a pointer (convenience for `.offset((count as isize).wrapping_neg())`).",309,null],[11,"wrapping_add","","Calculates the offset from a pointer using wrapping arithmetic. (convenience for `.wrapping_offset(count as isize)`)",309,null],[11,"wrapping_sub","","Calculates the offset from a pointer using wrapping arithmetic. (convenience for `.wrapping_offset((count as isize).wrapping_sub())`)",309,null],[11,"read","","Reads the value from `self` without moving it. This leaves the memory in `self` unchanged.",309,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read_volatile","","Performs a volatile read of the value from `self` without moving it. This leaves the memory in `self` unchanged.",309,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read_unaligned","","Reads the value from `self` without moving it. This leaves the memory in `self` unchanged.",309,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"copy_to","","Copies `count * size_of<T>` bytes from `self` to `dest`. The source and destination may overlap.",309,null],[11,"copy_to_nonoverlapping","","Copies `count * size_of<T>` bytes from `self` to `dest`. The source and destination may not overlap.",309,null],[11,"copy_from","","Copies `count * size_of<T>` bytes from `src` to `self`. The source and destination may overlap.",309,null],[11,"copy_from_nonoverlapping","","Copies `count * size_of<T>` bytes from `src` to `self`. The source and destination may not overlap.",309,null],[11,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",309,null],[11,"write","","Overwrites a memory location with the given value without reading or dropping the old value.",309,null],[11,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::<T>()` bytes of memory starting at `self` to `val`.",309,null],[11,"write_volatile","","Performs a volatile write of a memory location with the given value without reading or dropping the old value.",309,null],[11,"write_unaligned","","Overwrites a memory location with the given value without reading or dropping the old value.",309,null],[11,"replace","","Replaces the value at `self` with `src`, returning the old value, without dropping either.",309,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"swap","","Swaps the values at two mutable locations of the same type, without deinitializing either. They may overlap, unlike `mem::swap` which is otherwise equivalent.",309,null],[11,"of","std::any","Returns the `TypeId` of the type this generic function has been instantiated with.",316,{"inputs":[],"output":{"name":"typeid"}}],[11,"get","std::cell","Returns a copy of the contained value.",314,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Creates a new `Cell` containing the given value.",314,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",314,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",314,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",314,null],[11,"swap","","Swaps the values of two Cells. Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.",314,null],[11,"replace","","Replaces the contained value, and returns it.",314,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"into_inner","","Unwraps the value.",314,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"take","","Takes the value of the cell, leaving `Default::default()` in its place.",314,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Creates a new `RefCell` containing `value`.",304,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",304,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"replace","","Replaces the wrapped value with a new one, returning the old value, without deinitializing either one.",304,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace_with","","Replaces the wrapped value with a new one computed from `f`, returning the old value, without deinitializing either one.",304,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"swap","","Swaps the wrapped value of `self` with the wrapped value of `other`, without deinitializing either one.",304,null],[11,"borrow","","Immutably borrows the wrapped value.",304,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"try_borrow","","Immutably borrows the wrapped value, returning an error if the value is currently mutably borrowed.",304,{"inputs":[{"name":"self"}],"output":{"generics":["ref","borrowerror"],"name":"result"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",304,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[11,"try_borrow_mut","","Mutably borrows the wrapped value, returning an error if the value is currently borrowed.",304,{"inputs":[{"name":"self"}],"output":{"generics":["refmut","borrowmuterror"],"name":"result"}}],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",304,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",304,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",292,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",292,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum variant.",294,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified value.",365,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",365,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",365,null],[11,"reverse","std::cmp","Reverses the `Ordering`.",3,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"then","","Chains two orderings.",3,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"then_with","","Chains the ordering with the given function.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"ordering"}}],[11,"new","std::hash","Creates a new `SipHasher13` with the two initial keys set to 0.",399,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",399,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",377,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",377,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",400,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",400,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"peek","std::iter","Returns a reference to the next() value without advancing the iterator.",376,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","std::mem","Wrap a value to be manually dropped.",293,{"inputs":[{"name":"t"}],"output":{"name":"manuallydrop"}}],[11,"into_inner","","Extract the value from the ManuallyDrop container.",293,{"inputs":[{"name":"manuallydrop"}],"output":{"name":"t"}}],[11,"drop","","Manually drops the contained value.",293,null],[11,"contains","std::ops","Returns `true` if `item` is contained in the range.",28,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",39,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",43,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",49,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",53,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"empty","std::ptr","Creates a new `Unique` that is dangling, but well-aligned.",324,{"inputs":[],"output":{"name":"unique"}}],[11,"new_unchecked","","Creates a new `Unique`.",324,null],[11,"new","","Creates a new `Unique` if `ptr` is non-null.",324,null],[11,"as_ptr","","Acquires the underlying `*mut` pointer.",324,null],[11,"as_ref","","Dereferences the content.",324,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","Mutably dereferences the content.",324,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"dangling","","Creates a new `NonNull` that is dangling, but well-aligned.",323,{"inputs":[],"output":{"name":"nonnull"}}],[11,"new_unchecked","","Creates a new `NonNull`.",323,null],[11,"new","","Creates a new `NonNull` if `ptr` is non-null.",323,null],[11,"as_ptr","","Acquires the underlying `*mut` pointer.",323,null],[11,"as_ref","","Dereferences the content.",323,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","Mutably dereferences the content.",323,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_ok","std::result","Returns `true` if the result is [`Ok`].",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_err","","Returns `true` if the result is [`Err`].",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to [`Option<T>`].",70,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to [`Option<E>`].",70,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`.",70,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`.",70,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a contained [`Ok`] value, leaving an [`Err`] value untouched.",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained [`Err`] value, leaving an [`Ok`] value untouched.",70,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",70,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",70,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",70,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",70,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an [`Ok`]. Else, it returns `optb`.",70,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an [`Ok`]. If the value is an [`Err`] then it calls `op` with its value.",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an [`Ok`].",70,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an [`Ok`].",70,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an [`Err`].",70,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"expect_err","","Unwraps a result, yielding the content of an [`Err`].",70,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"e"}}],[11,"unwrap_or_default","","Returns the contained value or a default",70,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"transpose","","Transposes a `Result` of an `Option` into an `Option` of a `Result`.",70,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"is_some","std::option","Returns `true` if the option is a [`Some`] value.",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a [`None`] value.",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a [`Some`].",71,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is [`Some(v)`].",71,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",71,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any), or returns the provided default (if not).",71,{"inputs":[{"name":"self"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a default (if not).",71,{"inputs":[{"name":"self"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err)`].",71,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err())`].",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",71,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",71,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns [`None`] if the option is [`None`], otherwise returns `optb`.",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns [`None`] if the option is [`None`], otherwise calls `f` with the wrapped value and returns the result.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"filter","","Returns `None` if the option is `None`, otherwise calls `predicate` with the wrapped value and returns:",71,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"get_or_insert","","Inserts `v` into the option if it is [`None`], then returns a mutable reference to the contained value.",71,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is [`None`], then returns a mutable reference to the contained value.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"take","","Takes the value out of the option, leaving a [`None`] in its place.",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&mut T>` to an `Option<T>` by cloning the contents of the option.",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",71,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"transpose","","Transposes an `Option` of a `Result` into a `Result` of an `Option`.",71,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"new","std::boxed","Allocates memory on the heap and then places `x` into it.",119,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",119,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",119,null],[11,"into_raw_non_null","","Consumes the `Box`, returning the wrapped pointer as `NonNull<T>`.",119,{"inputs":[{"name":"box"}],"output":{"name":"nonnull"}}],[11,"into_unique","","",119,{"inputs":[{"name":"box"}],"output":{"name":"unique"}}],[11,"leak","","Consumes and leaks the `Box`, returning a mutable reference, `&'a mut T`. Here, the lifetime `'a` may be chosen to be `'static`.",119,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",119,{"inputs":[{"name":"self"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",119,{"inputs":[{"name":"self"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"new","std::rc","Constructs a new `Rc<T>`.",138,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Returns the contained value, if the `Rc` has exactly one strong reference.",138,{"inputs":[{"name":"rc"}],"output":{"generics":["rc"],"name":"result"}}],[11,"into_raw","","Consumes the `Rc`, returning the wrapped pointer.",138,null],[11,"from_raw","","Constructs an `Rc` from a raw pointer.",138,null],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this value.",138,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this value.",138,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Gets the number of strong (`Rc`) pointers to this value.",138,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"get_mut","","Returns a mutable reference to the inner value, if there are no other `Rc` or [`Weak`][weak] pointers to the same value.",138,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"ptr_eq","","Returns true if the two `Rc`s point to the same value (not just values that compare as equal).",138,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"make_mut","","Makes a mutable reference into the given `Rc`.",138,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"downcast","","Attempt to downcast the `Rc<Any>` to a concrete type.",138,{"inputs":[{"name":"self"}],"output":{"generics":["rc","rc"],"name":"result"}}],[11,"new","","Constructs a new `Weak<T>`, allocating memory for `T` without initializing it. Calling [`upgrade`] on the return value always gives [`None`].",451,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Attempts to upgrade the `Weak` pointer to an [`Rc`], extending the lifetime of the value if successful.",451,{"inputs":[{"name":"self"}],"output":{"generics":["rc"],"name":"option"}}],[11,"to_mut","std::borrow","Acquires a mutable reference to the owned form of the data.",74,null],[11,"into_owned","","Extracts the owned data.",74,null],[11,"field","std::fmt","Adds a new field to the generated tuple struct output.",472,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",472,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been emitted into a str. The str should not contain the sign for the integer, that will be added by this method.",412,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:",412,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this formatter.",412,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",412,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"flags","","Flags for formatting",412,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",412,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",412,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",412,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",412,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",412,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",412,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",412,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",412,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a [`DebugStruct`] builder designed to assist with creation of [`fmt::Debug`] implementations for structs.",412,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of `fmt::Debug` implementations for tuple structs.",412,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of `fmt::Debug` implementations for list-like structures.",412,{"inputs":[{"name":"self"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of `fmt::Debug` implementations for set-like structures.",412,{"inputs":[{"name":"self"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of `fmt::Debug` implementations for map-like structures.",412,{"inputs":[{"name":"self"}],"output":{"name":"debugmap"}}],[11,"entry","","Adds a new entry to the map output.",473,{"inputs":[{"name":"self"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",473,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",473,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",474,{"inputs":[{"name":"self"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",474,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",475,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",475,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",475,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"entry","","Adds a new entry to the set output.",476,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",476,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",476,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"into_slice","std::slice","View the underlying data as a subslice of the original data.",354,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",341,null],[11,"valid_up_to","std::str","Returns the index in the given string up to which valid UTF-8 was verified.",121,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"error_len","","Provide more information about the failure:",121,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",378,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",342,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","std::string","Creates a new empty `String`.",141,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",141,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",141,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"generics":["string","fromutf8error"],"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",141,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning [`Err`] if `v` contains any invalid data.",141,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice `v` into a `String`, replacing invalid data with the replacement character (U+FFFD).",141,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",141,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the string contains valid UTF-8.",141,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",141,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",141,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_mut_str","","Converts a `String` into a mutable string slice.",141,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",141,null],[11,"capacity","","Returns this `String`'s capacity, in bytes.",141,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes larger than its length.",141,null],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes larger than its length.",141,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",141,null],[11,"push","","Appends the given [`char`] to the end of this `String`.",141,null],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",141,null],[11,"truncate","","Shortens this `String` to the specified length.",141,null],[11,"pop","","Removes the last character from the string buffer and returns it.",141,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"remove","","Removes a [`char`] from this `String` at a byte position and returns it.",141,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"char"}}],[11,"retain","","Retains only the characters specified by the predicate.",141,null],[11,"insert","","Inserts a character into this `String` at a byte position.",141,null],[11,"insert_str","","Inserts a string slice into this `String` at a byte position.",141,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",141,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",141,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",141,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the string into two at the given index.",141,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[11,"clear","","Truncates this `String`, removing all contents.",141,null],[11,"drain","","Creates a draining iterator that removes the specified range in the string and yields the removed chars.",141,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"splice","","Creates a splicing iterator that removes the specified range in the string, and replaces it with the given string. The given string doesn't need to be the same length as the range.",141,null],[11,"into_boxed_str","","Converts this `String` into a [`Box`]`<`[`str`]`>`.",141,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"box"}}],[11,"as_bytes","","Returns a slice of [`u8`]s bytes that were attempted to convert to a `String`.",122,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",122,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",122,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"new","std::vec","Constructs a new, empty `Vec<T>`.",137,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",137,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",137,null],[11,"capacity","","Returns the number of elements the vector can hold without reallocating.",137,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",137,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Vec<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",137,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",137,null],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",137,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",137,null],[11,"as_slice","","Extracts a slice containing the entire vector.",137,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",137,null],[11,"set_len","","Sets the length of a vector.",137,null],[11,"swap_remove","","Removes an element from the vector and returns it.",137,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all elements after it to the right.",137,null],[11,"remove","","Removes and returns the element at position `index` within the vector, shifting all elements after it to the left.",137,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",137,null],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the vector that resolve to the same key.",137,null],[11,"dedup_by","","Removes all but the first of consecutive elements in the vector satisfying a given equality relation.",137,null],[11,"push","","Appends an element to the back of a collection.",137,null],[11,"place_back","","Returns a place for insertion at the back of the `Vec`.",137,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"pop","","Removes the last element from a vector and returns it, or [`None`] if it is empty.",137,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",137,null],[11,"drain","","Creates a draining iterator that removes the specified range in the vector and yields the removed items.",137,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",137,null],[11,"len","","Returns the number of elements in the vector, also referred to as its 'length'.",137,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",137,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",137,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",137,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",137,null],[11,"resize_default","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",137,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",137,null],[11,"remove_item","","Removes the first instance of `item` from the vector if the item exists.",137,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"splice","","Creates a splicing iterator that replaces the specified range in the vector with the given `replace_with` iterator and yields the removed items. `replace_with` does not need to be the same length as `range`.",137,{"inputs":[{"name":"self"},{"name":"r"},{"name":"i"}],"output":{"name":"splice"}}],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",137,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"drainfilter"}}],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",429,null],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable slice.",429,null],[11,"unpaired_surrogate","std::char","Returns the unpaired surrogate which caused this error.",125,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"is_nan","std","Returns `true` if this value is `NaN` and false otherwise.",319,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",319,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",319,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",319,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",319,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[11,"floor","","Returns the largest integer less than or equal to a number.",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"trunc","","Returns the integer part of a number.",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"fract","","Returns the fractional part of a number.",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"abs","","Computes the absolute value of `self`. Returns `NAN` if the number is `NAN`.",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"signum","","Returns a number that represents the sign of `self`.",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"is_sign_positive","","Returns `true` if and only if `self` has a positive sign, including `+0.0`, `NaN`s with positive sign bit and positive infinity.",319,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_sign_negative","","Returns `true` if and only if `self` has a negative sign, including `-0.0`, `NaN`s with negative sign bit and negative infinity.",319,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",319,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"recip","","Takes the reciprocal (inverse) of a number, `1/x`.",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"powi","","Raises a number to an integer power.",319,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"f32"}}],[11,"powf","","Raises a number to a floating point power.",319,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"sqrt","","Takes the square root of a number.",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"exp","","Returns `e^(self)`, (the exponential function).",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"exp2","","Returns `2^(self)`.",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"ln","","Returns the natural logarithm of the number.",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"log","","Returns the logarithm of the number with respect to an arbitrary base.",319,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"log2","","Returns the base 2 logarithm of the number.",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"log10","","Returns the base 10 logarithm of the number.",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"to_degrees","","Converts radians to degrees.",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"to_radians","","Converts degrees to radians.",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"max","","Returns the maximum of the two numbers.",319,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"min","","Returns the minimum of the two numbers.",319,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"abs_sub","","The positive difference of two numbers.",319,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"cbrt","","Takes the cubic root of a number.",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"hypot","","Calculates the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",319,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"sin","","Computes the sine of a number (in radians).",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"cos","","Computes the cosine of a number (in radians).",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"tan","","Computes the tangent of a number (in radians).",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",319,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",319,null],[11,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"sinh","","Hyperbolic sine function.",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"cosh","","Hyperbolic cosine function.",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"tanh","","Hyperbolic tangent function.",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"asinh","","Inverse hyperbolic sine function.",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"acosh","","Inverse hyperbolic cosine function.",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"atanh","","Inverse hyperbolic tangent function.",319,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"to_bits","","Raw transmutation to `u32`.",319,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Raw transmutation from `u32`.",319,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",320,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",320,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",320,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",320,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",320,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[11,"floor","","Returns the largest integer less than or equal to a number.",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"trunc","","Returns the integer part of a number.",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fract","","Returns the fractional part of a number.",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"abs","","Computes the absolute value of `self`. Returns `NAN` if the number is `NAN`.",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"signum","","Returns a number that represents the sign of `self`.",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"is_sign_positive","","Returns `true` if and only if `self` has a positive sign, including `+0.0`, `NaN`s with positive sign bit and positive infinity.",320,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_positive","","",320,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_sign_negative","","Returns `true` if and only if `self` has a negative sign, including `-0.0`, `NaN`s with negative sign bit and negative infinity.",320,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",320,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",320,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"recip","","Takes the reciprocal (inverse) of a number, `1/x`.",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"powi","","Raises a number to an integer power.",320,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"f64"}}],[11,"powf","","Raises a number to a floating point power.",320,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"sqrt","","Takes the square root of a number.",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"exp","","Returns `e^(self)`, (the exponential function).",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"exp2","","Returns `2^(self)`.",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"ln","","Returns the natural logarithm of the number.",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"log","","Returns the logarithm of the number with respect to an arbitrary base.",320,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"log2","","Returns the base 2 logarithm of the number.",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"log10","","Returns the base 10 logarithm of the number.",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"to_degrees","","Converts radians to degrees.",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"to_radians","","Converts degrees to radians.",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"max","","Returns the maximum of the two numbers.",320,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"min","","Returns the minimum of the two numbers.",320,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"abs_sub","","The positive difference of two numbers.",320,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"cbrt","","Takes the cubic root of a number.",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"hypot","","Calculates the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",320,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"sin","","Computes the sine of a number (in radians).",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"cos","","Computes the cosine of a number (in radians).",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"tan","","Computes the tangent of a number (in radians).",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",320,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",320,null],[11,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"sinh","","Hyperbolic sine function.",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"cosh","","Hyperbolic cosine function.",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"tanh","","Hyperbolic tangent function.",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"asinh","","Inverse hyperbolic sine function.",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"acosh","","Inverse hyperbolic cosine function.",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"atanh","","Inverse hyperbolic tangent function.",320,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"to_bits","","Raw transmutation to `u64`.",320,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_bits","","Raw transmutation from `u64`.",320,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"is_ascii","","",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",300,null],[11,"to_ascii_lowercase","","",300,null],[11,"eq_ignore_ascii_case","","",300,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",300,{"inputs":[{"name":"self"}],"output":null}],[11,"make_ascii_lowercase","","",300,{"inputs":[{"name":"self"}],"output":null}],[11,"is_ascii_alphabetic","","",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_uppercase","","",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_lowercase","","",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_alphanumeric","","",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_digit","","",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_hexdigit","","",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_punctuation","","",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_graphic","","",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_whitespace","","",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_control","","",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii","","",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",288,null],[11,"to_ascii_lowercase","","",288,null],[11,"eq_ignore_ascii_case","","",288,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",288,{"inputs":[{"name":"self"}],"output":null}],[11,"make_ascii_lowercase","","",288,{"inputs":[{"name":"self"}],"output":null}],[11,"is_ascii_alphabetic","","",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_uppercase","","",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_lowercase","","",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_alphanumeric","","",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_digit","","",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_hexdigit","","",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_punctuation","","",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_graphic","","",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_whitespace","","",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_control","","",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii","","",290,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",290,null],[11,"to_ascii_lowercase","","",290,null],[11,"eq_ignore_ascii_case","","",290,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",290,{"inputs":[{"name":"self"}],"output":null}],[11,"make_ascii_lowercase","","",290,{"inputs":[{"name":"self"}],"output":null}],[11,"is_ascii_alphabetic","","",290,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_uppercase","","",290,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_lowercase","","",290,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_alphanumeric","","",290,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_digit","","",290,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_hexdigit","","",290,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_punctuation","","",290,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_graphic","","",290,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_whitespace","","",290,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_control","","",290,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii","","",289,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",289,null],[11,"to_ascii_lowercase","","",289,null],[11,"eq_ignore_ascii_case","","",289,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",289,{"inputs":[{"name":"self"}],"output":null}],[11,"make_ascii_lowercase","","",289,{"inputs":[{"name":"self"}],"output":null}],[11,"is_ascii_alphabetic","","",289,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_uppercase","","",289,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_lowercase","","",289,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_alphanumeric","","",289,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_digit","","",289,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_hexdigit","","",289,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_punctuation","","",289,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_graphic","","",289,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_whitespace","","",289,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_control","","",289,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","std::collections::binary_heap","Creates an empty `BinaryHeap` as a max-heap.",416,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity. This preallocates enough memory for `capacity` elements, so that the `BinaryHeap` does not have to be reallocated until it contains at least that many values.",416,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in arbitrary order.",416,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",416,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or `None` if it is empty.",416,{"inputs":[{"name":"self"}],"output":{"generics":["peekmut"],"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",416,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `BinaryHeap`. Does nothing if the capacity is already sufficient.",416,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",416,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",416,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it is empty.",416,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",416,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector in arbitrary order.",416,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted (ascending) order.",416,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",416,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",416,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",416,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",416,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",416,null],[11,"new","std::collections::btree_map","Makes a new empty BTreeMap with a reasonable choice for B.",414,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",414,null],[11,"get","","Returns a reference to the value corresponding to the key.",414,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns `true` if the map contains a value for the specified key.",414,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",414,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",414,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",414,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",414,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",414,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",414,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",414,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",414,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"btreemap"}}],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",414,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",414,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",414,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",414,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",414,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"len","","Returns the number of elements in the map.",414,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the map contains no elements.",414,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","std::collections::btree_set","Makes a new `BTreeSet` with a reasonable choice of B.",413,{"inputs":[],"output":{"name":"btreeset"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",413,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, i.e. the values that are in `self` but not in `other`, in ascending order.",413,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, i.e. the values that are in `self` or in `other` but not in both, in ascending order.",413,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, i.e. the values that are both in `self` and `other`, in ascending order.",413,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, i.e. all the values in `self` or `other`, without duplicates, in ascending order.",413,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"clear","","Clears the set, removing all values.",413,null],[11,"contains","","Returns `true` if the set contains a value.",413,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",413,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.",413,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e. `other` contains at least all the values in `self`.",413,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e. `self` contains at least all the values in `other`.",413,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",413,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",413,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",413,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",413,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",413,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",413,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator that visits the values in the `BTreeSet` in ascending order.",413,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"len","","Returns the number of elements in the set.",413,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no elements.",413,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","std::collections::linked_list","Creates an empty `LinkedList`.",415,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",415,null],[11,"iter","","Provides a forward iterator.",415,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",415,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",415,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",415,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",415,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the given value.",415,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the list is empty.",415,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list is empty.",415,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is empty.",415,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list is empty.",415,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",415,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is empty.",415,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",415,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if it is empty.",415,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index, including the index.",415,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",415,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"drainfilter"}}],[11,"front_place","","Returns a place for insertion at the front of the list.",415,{"inputs":[{"name":"self"}],"output":{"name":"frontplace"}}],[11,"back_place","","Returns a place for insertion at the back of the list.",415,{"inputs":[{"name":"self"}],"output":{"name":"backplace"}}],[11,"new","std::collections::vec_deque","Creates an empty `VecDeque`.",417,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",417,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",417,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",417,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",417,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without reallocating.",417,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `VecDeque`. Does nothing if the capacity is already sufficient.",417,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `VecDeque`. The collection may reserve more space to avoid frequent reallocations.",417,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",417,null],[11,"truncate","","Shortens the `VecDeque`, dropping excess elements from the back.",417,null],[11,"iter","","Returns a front-to-back iterator.",417,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",417,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",417,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",417,null],[11,"len","","Returns the number of elements in the `VecDeque`.",417,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the `VecDeque` is empty.",417,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the `VecDeque` and yields the removed items.",417,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the `VecDeque`, removing all values.",417,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the given value.",417,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the `VecDeque` is empty.",417,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the `VecDeque` is empty.",417,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the `VecDeque` is empty.",417,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the `VecDeque` is empty.",417,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the `VecDeque` is empty.",417,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Prepends an element to the `VecDeque`.",417,null],[11,"push_back","","Appends an element to the back of the `VecDeque`.",417,null],[11,"pop_back","","Removes the last element from the `VecDeque` and returns it, or `None` if it is empty.",417,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the last element.",417,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the first element.",417,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`, shifting all elements with indices greater than or equal to `index` towards the back.",417,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`. Whichever end is closer to the removal point will be moved to make room, and all the affected elements will be moved to new positions. Returns `None` if `index` is out of bounds.",417,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the `VecDeque` into two at the given index.",417,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",417,null],[11,"retain","","Retains only the elements specified by the predicate.",417,null],[11,"place_back","","Returns a place for insertion at the back of the `VecDeque`.",417,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"place_front","","Returns a place for insertion at the front of the `VecDeque`.",417,{"inputs":[{"name":"self"}],"output":{"name":"placefront"}}],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len, either by removing excess elements from the back or by appending clones of `value` to the back.",417,null],[11,"pop","std::collections::binary_heap","Removes the peeked value from the heap and returns it.",452,{"inputs":[{"name":"peekmut"}],"output":{"name":"t"}}],[11,"key","std::collections::btree_map","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",455,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"into_key","","Take ownership of the key.",455,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the `VacantEntry`'s key, and returns a mutable reference to it.",455,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the key in the entry.",448,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"remove_entry","","Take ownership of the key and value from the map.",448,null],[11,"get","","Gets a reference to the value in the entry.",448,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",448,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",448,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",448,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",448,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",106,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Returns a reference to this entry's key.",106,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"and_modify","","Provides in-place mutable access to an occupied entry before any potential inserts into the map.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"entry"}}],[11,"or_default","","Ensures a value is in the entry by inserting the default value if empty, and returns a mutable reference to the value in the entry.",106,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert_next","std::collections::linked_list","Inserts the given element just after the element most recently returned by `.next()`. The inserted element does not appear in the iteration.",443,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",443,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","std::collections::hash_map","",477,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"fmt","","",477,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",478,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"fmt","","",478,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",479,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"fmt","","",479,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",480,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",481,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",477,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",477,null],[11,"len","","",477,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",482,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",482,null],[11,"len","","",482,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",482,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",483,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",483,null],[11,"len","","",483,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",483,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",478,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",478,null],[11,"len","","",478,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",479,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",479,null],[11,"len","","",479,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",484,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",484,null],[11,"len","","",484,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",484,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",485,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",485,null],[11,"len","","",485,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",485,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",486,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",486,{"inputs":[{"name":"self"}],"output":null}],[11,"make_place","","",110,{"inputs":[{"name":"self"}],"output":{"name":"entryplace"}}],[11,"pointer","","",486,null],[11,"finalize","","",486,{"inputs":[{"name":"self"}],"output":null}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",110,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",110,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Returns a reference to this entry's key.",110,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"and_modify","","Provides in-place mutable access to an occupied entry before any potential inserts into the map.",110,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"or_default","","Ensures a value is in the entry by inserting the default value if empty, and returns a mutable reference to the value in the entry.",110,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the key in the entry.",480,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"remove_entry","","Take the ownership of the key and value from the map.",480,null],[11,"get","","Gets a reference to the value in the entry.",480,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",480,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry with a lifetime bound to the map itself.",480,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value.",480,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it.",480,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"replace_entry","","Replaces the entry, returning the old key and value. The new key in the hash map will be the key used to create this entry.",480,null],[11,"replace_key","","Replaces the key in the hash map with the key used to create this entry.",480,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value through the `VacantEntry`.",481,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"into_key","","Take ownership of the key.",481,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",481,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"clone","","",487,{"inputs":[{"name":"self"}],"output":{"name":"randomstate"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",487,{"inputs":[],"output":{"name":"randomstate"}}],[11,"build_hasher","","",487,{"inputs":[{"name":"self"}],"output":{"name":"defaulthasher"}}],[11,"clone","","",488,{"inputs":[{"name":"self"}],"output":{"name":"defaulthasher"}}],[11,"fmt","","",488,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `DefaultHasher`.",488,{"inputs":[],"output":{"name":"defaulthasher"}}],[11,"default","","Creates a new `DefaultHasher` using [`new`]. See its documentation for more.",488,{"inputs":[],"output":{"name":"defaulthasher"}}],[11,"write","","",488,null],[11,"finish","","",488,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"default","","Constructs a new `RandomState`.",487,{"inputs":[],"output":{"name":"randomstate"}}],[11,"fmt","","",487,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","std::collections::hash_set","",489,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",489,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",489,null],[11,"len","","",489,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",489,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",490,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",490,null],[11,"len","","",490,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",490,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",491,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",491,null],[11,"len","","",491,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",491,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",492,{"inputs":[{"name":"self"}],"output":{"name":"intersection"}}],[11,"next","","",492,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",492,null],[11,"fmt","","",492,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",493,{"inputs":[{"name":"self"}],"output":{"name":"difference"}}],[11,"next","","",493,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",493,null],[11,"fmt","","",493,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",494,{"inputs":[{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",494,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",494,null],[11,"fmt","","",494,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",495,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"fmt","","",495,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",495,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",495,null],[11,"description","std","",311,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","std::heap","",277,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",418,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","std::num","",327,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",371,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",326,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","std::sync","",420,{"inputs":[{"name":"cstring"}],"output":{"generics":["cstr"],"name":"arc"}}],[11,"from","","",420,{"inputs":[{"name":"cstr"}],"output":{"generics":["cstr"],"name":"arc"}}],[11,"from","std::io","",156,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"eq","std","",289,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"from","std::sync","",420,{"inputs":[{"name":"osstring"}],"output":{"generics":["osstr"],"name":"arc"}}],[11,"from","","",420,{"inputs":[{"name":"osstr"}],"output":{"generics":["osstr"],"name":"arc"}}],[11,"eq","std","",289,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"as_ref","","",289,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"read","","",291,null],[11,"initializer","","",291,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_to_end","","",291,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_to_string","","",291,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_exact","","",291,null],[11,"write","","",291,null],[11,"flush","","",291,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","",291,null],[11,"write_fmt","","",291,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"seek","","",291,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64"],"name":"result"}}],[11,"fill_buf","","",291,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",291,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"read_until","","",291,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_line","","",291,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read","","",290,null],[11,"initializer","","",290,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_exact","","",290,null],[11,"read_to_end","","",290,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"fill_buf","","",290,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",290,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write","","",290,null],[11,"write_all","","",290,null],[11,"flush","","",290,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","It performs the conversion in network order (big-endian).",305,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"u32"}}],[11,"from","","",315,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"u128"}}],[11,"to_socket_addrs","","",295,{"inputs":[{"name":"self"}],"output":{"generics":["intoiter"],"name":"result"}}],[11,"to_socket_addrs","","",295,{"inputs":[{"name":"self"}],"output":{"generics":["intoiter"],"name":"result"}}],[11,"to_socket_addrs","","",295,{"inputs":[{"name":"self"}],"output":{"generics":["intoiter"],"name":"result"}}],[11,"to_socket_addrs","","",295,{"inputs":[{"name":"self"}],"output":{"generics":["intoiter"],"name":"result"}}],[11,"to_socket_addrs","","",289,{"inputs":[{"name":"self"}],"output":{"generics":["intoiter"],"name":"result"}}],[11,"to_socket_addrs","","",290,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",291,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","std::sync","",420,{"inputs":[{"name":"pathbuf"}],"output":{"generics":["path"],"name":"arc"}}],[11,"from","","",420,{"inputs":[{"name":"path"}],"output":{"generics":["path"],"name":"arc"}}],[11,"as_ref","std","",289,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"new","std::sync","Constructs a new `Arc<T>`.",420,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Returns the contained value, if the `Arc` has exactly one strong reference.",420,{"inputs":[{"name":"arc"}],"output":{"generics":["arc"],"name":"result"}}],[11,"into_raw","","Consumes the `Arc`, returning the wrapped pointer.",420,null],[11,"from_raw","","Constructs an `Arc` from a raw pointer.",420,null],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this value.",420,{"inputs":[{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this value.",420,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Gets the number of strong (`Arc`) pointers to this value.",420,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"ptr_eq","","Returns true if the two `Arc`s point to the same value (not just values that compare as equal).",420,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"make_mut","","Makes a mutable reference into the given `Arc`.",420,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the inner value, if there are no other `Arc` or [`Weak`][weak] pointers to the same value.",420,{"inputs":[{"name":"arc"}],"output":{"name":"option"}}],[11,"new","","Constructs a new `Weak<T>`, allocating memory for `T` without initializing it. Calling [`upgrade`] on the return value always gives [`None`].",430,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Attempts to upgrade the `Weak` pointer to an [`Arc`], extending the lifetime of the value if successful.",430,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"new","std::sync::atomic","Creates a new `AtomicBool`.",366,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"get_mut","","Returns a mutable reference to the underlying [`bool`].",366,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",366,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"load","","Loads a value from the bool.",366,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",366,null],[11,"swap","","Stores a value into the bool, returning the previous value.",366,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the [`bool`] if the current value is the same as the `current` value.",366,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the [`bool`] if the current value is the same as the `current` value.",366,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["bool","bool"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the [`bool`] if the current value is the same as the `current` value.",366,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["bool","bool"],"name":"result"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",366,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",366,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",366,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",366,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicPtr`.",322,null],[11,"get_mut","","Returns a mutable reference to the underlying pointer.",322,null],[11,"into_inner","","Consumes the atomic and returns the contained value.",322,null],[11,"load","","Loads a value from the pointer.",322,null],[11,"store","","Stores a value into the pointer.",322,null],[11,"swap","","Stores a value into the pointer, returning the previous value.",322,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",322,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",322,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",322,null],[11,"new","","Creates a new atomic integer.",385,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",385,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",385,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"load","","Loads a value from the atomic integer.",385,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"store","","Stores a value into the atomic integer.",385,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",385,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",385,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",385,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["i8","i8"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",385,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"i8"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["i8","i8"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",385,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",385,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",385,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",385,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",385,{"inputs":[{"name":"self"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"new","","Creates a new atomic integer.",381,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",381,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",381,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"load","","Loads a value from the atomic integer.",381,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"store","","Stores a value into the atomic integer.",381,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",381,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",381,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",381,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["u8","u8"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",381,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["u8","u8"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",381,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",381,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",381,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",381,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",381,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"new","","Creates a new atomic integer.",343,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",343,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",343,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"load","","Loads a value from the atomic integer.",343,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"store","","Stores a value into the atomic integer.",343,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",343,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",343,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",343,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["i16","i16"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",343,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["i16","i16"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",343,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",343,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",343,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",343,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",343,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"new","","Creates a new atomic integer.",355,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",355,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",355,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"load","","Loads a value from the atomic integer.",355,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"store","","Stores a value into the atomic integer.",355,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",355,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",355,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",355,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["u16","u16"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",355,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["u16","u16"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",355,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",355,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",355,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",355,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",355,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"new","","Creates a new atomic integer.",334,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",334,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",334,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"load","","Loads a value from the atomic integer.",334,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"store","","Stores a value into the atomic integer.",334,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",334,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",334,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",334,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["i32","i32"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",334,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["i32","i32"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",334,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",334,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",334,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",334,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",334,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"new","","Creates a new atomic integer.",396,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",396,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",396,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"load","","Loads a value from the atomic integer.",396,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"store","","Stores a value into the atomic integer.",396,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",396,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",396,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",396,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["u32","u32"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",396,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["u32","u32"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",396,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",396,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",396,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",396,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",396,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"new","","Creates a new atomic integer.",375,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",375,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",375,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"load","","Loads a value from the atomic integer.",375,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"store","","Stores a value into the atomic integer.",375,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",375,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",375,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",375,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["i64","i64"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",375,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["i64","i64"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",375,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",375,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",375,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",375,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",375,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"new","","Creates a new atomic integer.",407,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",407,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",407,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"load","","Loads a value from the atomic integer.",407,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"store","","Stores a value into the atomic integer.",407,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",407,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",407,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",407,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["u64","u64"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",407,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["u64","u64"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",407,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",407,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",407,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",407,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",407,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"new","","Creates a new atomic integer.",367,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",367,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",367,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"load","","Loads a value from the atomic integer.",367,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the atomic integer.",367,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",367,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",367,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",367,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["isize","isize"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",367,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["isize","isize"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",367,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",367,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",367,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",367,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",367,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new atomic integer.",335,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"get_mut","","Returns a mutable reference to the underlying integer.",335,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_inner","","Consumes the atomic and returns the contained value.",335,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"load","","Loads a value from the atomic integer.",335,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the atomic integer.",335,null],[11,"swap","","Stores a value into the atomic integer, returning the previous value.",335,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the `current` value.",335,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the `current` value.",335,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["usize","usize"],"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the `current` value.",335,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"generics":["usize","usize"],"name":"result"}}],[11,"fetch_add","","Adds to the current value, returning the previous value.",335,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtracts from the current value, returning the previous value.",335,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise \"and\" with the current value.",335,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise \"or\" with the current value.",335,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",335,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"from_size_align","std::heap","Constructs a `Layout` from a given `size` and `align`, or returns `None` if any of the following conditions are not met:",419,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["layout"],"name":"option"}}],[11,"from_size_align_unchecked","","Creates a layout, bypassing all checks.",419,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"layout"}}],[11,"size","","The minimum size in bytes for a memory block of this layout.",419,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"align","","The minimum byte alignment for a memory block of this layout.",419,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Constructs a `Layout` suitable for holding a value of type `T`.",419,{"inputs":[],"output":{"name":"layout"}}],[11,"for_value","","Produces layout describing a record that could be used to allocate backing structure for `T` (which could be a trait or other unsized type like a slice).",419,{"inputs":[{"name":"t"}],"output":{"name":"layout"}}],[11,"align_to","","Creates a layout describing the record that can hold a value of the same layout as `self`, but that also is aligned to alignment `align` (measured in bytes).",419,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"layout"}}],[11,"padding_needed_for","","Returns the amount of padding we must insert after `self` to ensure that the following address will satisfy `align` (measured in bytes).",419,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"repeat","","Creates a layout describing the record for `n` instances of `self`, with a suitable amount of padding between each to ensure that each instance is given its requested size and alignment. On success, returns `(k, offs)` where `k` is the layout of the array and `offs` is the distance between the start of each element in the array.",419,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"extend","","Creates a layout describing the record for `self` followed by `next`, including any necessary padding to ensure that `next` will be properly aligned. Note that the result layout will satisfy the alignment properties of both `self` and `next`.",419,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"option"}}],[11,"repeat_packed","","Creates a layout describing the record for `n` instances of `self`, with no padding between each instance.",419,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["layout"],"name":"option"}}],[11,"extend_packed","","Creates a layout describing the record for `self` followed by `next` with no additional padding between the two. Since no padding is inserted, the alignment of `next` is irrelevant, and is not incorporated at all into the resulting layout.",419,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"option"}}],[11,"array","","Creates a layout describing the record for a `[T; n]`.",419,{"inputs":[{"name":"usize"}],"output":{"generics":["layout"],"name":"option"}}],[11,"description","","",418,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"invalid_input","","",277,{"inputs":[{"name":"str"}],"output":{"name":"allocerr"}}],[11,"is_memory_exhausted","","",277,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_request_unsupported","","",277,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"description","","",277,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"report","std","",310,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"report","","",311,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"report","","",302,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"report","","",307,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}]],"paths":[[8,"Any"],[8,"Clone"],[8,"PartialEq"],[4,"Ordering"],[3,"Reverse"],[8,"Ord"],[8,"PartialOrd"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"TryInto"],[8,"TryFrom"],[8,"Default"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[8,"FromIterator"],[8,"IntoIterator"],[8,"DoubleEndedIterator"],[8,"Step"],[8,"Extend"],[8,"Product"],[8,"ExactSizeIterator"],[8,"Iterator"],[8,"Sum"],[8,"Not"],[8,"Div"],[3,"RangeFrom"],[8,"Sub"],[8,"BitXor"],[8,"Deref"],[8,"Boxed"],[8,"Mul"],[8,"Add"],[8,"BitOr"],[8,"RemAssign"],[8,"BitAnd"],[8,"InPlace"],[3,"Range"],[8,"Neg"],[8,"FnMut"],[4,"GeneratorState"],[3,"RangeToInclusive"],[8,"IndexMut"],[8,"Placer"],[8,"ShlAssign"],[8,"Shl"],[8,"FnOnce"],[3,"RangeTo"],[8,"DivAssign"],[8,"ShrAssign"],[8,"DerefMut"],[3,"RangeInclusive"],[8,"MulAssign"],[8,"Index"],[8,"Fn"],[8,"BitXorAssign"],[8,"Generator"],[8,"Try"],[8,"Drop"],[8,"Place"],[8,"BoxPlace"],[8,"BitOrAssign"],[8,"BitAndAssign"],[8,"AddAssign"],[8,"SubAssign"],[8,"Rem"],[8,"Shr"],[3,"TraitObject"],[4,"Result"],[4,"Option"],[8,"FnBox"],[8,"ToOwned"],[4,"Cow"],[8,"Borrow"],[8,"BorrowMut"],[8,"LowerExp"],[8,"LowerHex"],[8,"Write"],[8,"Binary"],[8,"Debug"],[8,"UpperHex"],[8,"Octal"],[8,"Display"],[8,"Pointer"],[8,"UpperExp"],[8,"SliceConcatExt"],[8,"SliceIndex"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"FromStr"],[8,"ToString"],[3,"UnicodeVersion"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"AccessError"],[3,"Builder"],[3,"ThreadId"],[3,"Thread"],[3,"JoinHandle"],[8,"AsciiExt"],[3,"EscapeDefault"],[4,"Bound"],[4,"Entry"],[8,"RangeArgument"],[3,"HashMap"],[3,"HashSet"],[4,"Entry"],[4,"VarError"],[3,"Vars"],[3,"VarsOs"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[8,"Error"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"DecodeUtf16Error"],[3,"Error"],[3,"BorrowError"],[3,"BorrowMutError"],[3,"CharTryFromError"],[3,"ParseCharError"],[4,"Infallible"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"FromBytesWithNulError"],[3,"IntoStringError"],[3,"Vec"],[3,"Rc"],[3,"OsString"],[3,"OsStr"],[3,"String"],[3,"Metadata"],[3,"ReadDir"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"DirBuilder"],[3,"File"],[3,"DirEntry"],[4,"ErrorKind"],[4,"SeekFrom"],[4,"CharsError"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"Error"],[3,"LineWriter"],[3,"Cursor"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[8,"Read"],[8,"Write"],[8,"Seek"],[8,"BufRead"],[3,"Initializer"],[3,"Chain"],[3,"Take"],[3,"Bytes"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[4,"SocketAddr"],[4,"Shutdown"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"Incoming"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"AddrParseError"],[8,"ToSocketAddrs"],[3,"LookupHost"],[4,"FpCategory"],[3,"Wrapping"],[8,"AsRawFd"],[8,"FromRawFd"],[8,"IntoRawFd"],[8,"OsStringExt"],[8,"OsStrExt"],[8,"FileExt"],[8,"PermissionsExt"],[8,"OpenOptionsExt"],[8,"MetadataExt"],[8,"FileTypeExt"],[8,"DirEntryExt"],[8,"DirBuilderExt"],[8,"CommandExt"],[8,"ExitStatusExt"],[8,"JoinHandleExt"],[8,"OsStringExt"],[8,"OsStrExt"],[8,"FileExt"],[8,"OpenOptionsExt"],[8,"MetadataExt"],[8,"AsRawHandle"],[8,"FromRawHandle"],[8,"IntoRawHandle"],[8,"AsRawSocket"],[8,"FromRawSocket"],[8,"IntoRawSocket"],[8,"ExitStatusExt"],[8,"CommandExt"],[3,"stat"],[8,"MetadataExt"],[4,"c_void"],[3,"AssertUnwindSafe"],[4,"Prefix"],[4,"Component"],[3,"PrefixComponent"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[3,"StripPrefixError"],[3,"Display"],[3,"Child"],[3,"Output"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"Command"],[3,"Stdio"],[3,"ExitStatus"],[4,"Ordering"],[4,"TryLockError"],[3,"SendError"],[4,"TryRecvError"],[4,"RecvTimeoutError"],[4,"TrySendError"],[3,"Select"],[3,"Handle"],[3,"Iter"],[3,"TryIter"],[3,"IntoIter"],[3,"RecvError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"Mutex"],[3,"MutexGuard"],[3,"OnceState"],[3,"Once"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[8,"Alloc"],[3,"Excess"],[4,"AllocErr"],[3,"PoisonError"],[3,"EncodeWide"],[3,"SocketAddr"],[3,"UnixStream"],[3,"UnixListener"],[3,"Incoming"],[3,"UnixDatagram"],[3,"PanicInfo"],[3,"Location"],[8,"Termination"],[15,"char"],[15,"str"],[15,"slice"],[15,"reference"],[3,"Ref"],[19,"ManuallyDrop"],[3,"RefMut"],[15,"tuple"],[15,"fn"],[15,"array"],[15,"i16"],[15,"u16"],[15,"u8"],[3,"PhantomData"],[15,"bool"],[15,"i128"],[3,"RefCell"],[15,"u32"],[15,"usize"],[15,"i32"],[15,"u64"],[15,"pointer"],[15,"unit"],[15,"never"],[3,"NoneError"],[15,"i64"],[3,"Cell"],[15,"u128"],[3,"TypeId"],[15,"isize"],[15,"i8"],[15,"f32"],[15,"f64"],[3,"RangeFull"],[3,"AtomicPtr"],[3,"NonNull"],[3,"Unique"],[3,"Discriminant"],[3,"ParseFloatError"],[3,"ParseIntError"],[3,"SplitMut"],[3,"Filter"],[3,"Once"],[3,"EscapeUnicode"],[3,"IterMut"],[3,"RSplit"],[3,"AtomicI32"],[3,"AtomicUsize"],[3,"Chain"],[3,"Lines"],[3,"Split"],[3,"Scan"],[3,"Fuse"],[3,"Iter"],[3,"Chars"],[3,"AtomicI16"],[3,"ExactChunksMut"],[3,"Cloned"],[3,"Skip"],[3,"Empty"],[3,"Chunks"],[3,"Enumerate"],[3,"ChunksMut"],[3,"Split"],[3,"BuildHasherDefault"],[3,"FlatMap"],[3,"IterMut"],[3,"AtomicU16"],[3,"Cycle"],[3,"StepBy"],[3,"Zip"],[3,"CharSearcher"],[3,"RSplitTerminator"],[3,"TakeWhile"],[3,"SplitN"],[3,"Map"],[3,"Bytes"],[3,"UnsafeCell"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"RMatches"],[3,"RSplit"],[3,"RSplitN"],[3,"TryFromIntError"],[3,"Iter"],[3,"Windows"],[3,"SplitTerminator"],[3,"AtomicI64"],[3,"Peekable"],[3,"SipHasher"],[3,"CharIndices"],[3,"CharSliceSearcher"],[3,"RMatchIndices"],[3,"AtomicU8"],[3,"MatchIndices"],[3,"SkipWhile"],[3,"ExactChunks"],[3,"AtomicI8"],[3,"EscapeDefault"],[3,"Rev"],[3,"IntoIter"],[3,"Repeat"],[3,"FilterMap"],[3,"StrSearcher"],[3,"EscapeDebug"],[3,"Iter"],[3,"IntoIter"],[3,"Inspect"],[3,"AtomicU32"],[3,"DecodeUtf8"],[3,"Take"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SplitNMut"],[3,"IterMut"],[3,"SplitN"],[3,"RSplitN"],[3,"RSplitNMut"],[3,"RSplitMut"],[3,"AtomicU64"],[3,"Arguments"],[3,"LinesAny"],[3,"Matches"],[3,"CharPredicateSearcher"],[3,"Formatter"],[3,"BTreeSet"],[3,"BTreeMap"],[3,"LinkedList"],[3,"BinaryHeap"],[3,"VecDeque"],[3,"CannotReallocInPlace"],[3,"Layout"],[3,"Arc"],[3,"Iter"],[3,"Range"],[3,"IntoIter"],[3,"IterMut"],[3,"IterMut"],[3,"PlaceFront"],[3,"IntoIter"],[3,"FrontPlace"],[3,"IntoIter"],[3,"Weak"],[3,"Heap"],[3,"IntoIter"],[3,"DrainFilter"],[3,"Drain"],[3,"Drain"],[3,"IntoIter"],[3,"PlaceBack"],[3,"Iter"],[3,"BinaryHeapPlace"],[3,"Values"],[3,"Iter"],[3,"PlaceBack"],[3,"IterMut"],[3,"Difference"],[3,"Iter"],[3,"Union"],[3,"BackPlace"],[3,"OccupiedEntry"],[3,"IntoIter"],[3,"Range"],[3,"Weak"],[3,"PeekMut"],[3,"Drain"],[3,"SymmetricDifference"],[3,"VacantEntry"],[3,"RangeMut"],[3,"ValuesMut"],[3,"Intersection"],[3,"DrainFilter"],[3,"Keys"],[3,"EncodeUtf16"],[3,"Drain"],[3,"Splice"],[3,"Iter"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"SplitWhitespace"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"System"],[3,"DebugTuple"],[3,"DebugMap"],[3,"DebugStruct"],[3,"DebugList"],[3,"DebugSet"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"IterMut"],[3,"IntoIter"],[3,"ValuesMut"],[3,"Drain"],[3,"EntryPlace"],[3,"RandomState"],[3,"DefaultHasher"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"]]};
searchIndex["std_unicode"] = {"doc":"The Unicode Library","items":[[0,"char","std_unicode","A character type.",null,null],[17,"MAX","std_unicode::char","The highest valid code point a `char` can have.",null,null],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"generics":["char"],"name":"option"}}],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"generics":["char"],"name":"option"}}],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[3,"EscapeDebug","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode escape of a character, as `char`s.",null,null],[3,"ParseCharError","","An error which can be returned when parsing a char.",null,null],[3,"CharTryFromError","","The error type returned when a conversion from u32 to char fails.",null,null],[3,"DecodeUtf8","","An iterator over an iterator of bytes of the characters the bytes represent as UTF-8",null,null],[5,"decode_utf8","","Decodes an `Iterator` of bytes as UTF-8.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf8"}}],[3,"UnicodeVersion","","Represents a Unicode Version.",null,null],[12,"major","","Major version.",0,null],[12,"minor","","Minor version.",0,null],[12,"micro","","Micro (or Update) version.",0,null],[3,"ToLowercase","","Returns an iterator that yields the lowercase equivalent of a `char`.",null,null],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent of a `char`.",null,null],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[3,"DecodeUtf16Error","","An error that can be returned when decoding UTF-16 code points.",null,null],[5,"decode_utf16","","Create an iterator over the UTF-16 encoded code points in `iter`, returning unpaired surrogates as `Err`s.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf16"}}],[17,"UNICODE_VERSION","","The version of Unicode that the Unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.",null,null],[17,"REPLACEMENT_CHARACTER","","`U+FFFD REPLACEMENT CHARACTER` (�) is used in Unicode to represent a decoding error.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf16"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf16error"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"decodeutf16error"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"decodeutf16error"}],"output":{"name":"bool"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"size_hint","","",3,null],[11,"unpaired_surrogate","","Returns the unpaired surrogate which caused this error.",4,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"lossy","std_unicode","",null,null],[3,"Utf8Lossy","std_unicode::lossy","Lossy UTF-8 string.",null,null],[3,"Utf8LossyChunksIter","","Iterator over lossy UTF-8 string",null,null],[3,"Utf8LossyChunk","","",null,null],[12,"valid","","Sequence of valid chars. Can be empty between broken UTF-8 chars.",5,null],[12,"broken","","Single broken char, empty if none. Empty iff iterator item is last.",5,null],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"utf8lossy"}}],[11,"from_bytes","","",6,null],[11,"chunks","","",6,{"inputs":[{"name":"self"}],"output":{"name":"utf8lossychunksiter"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"utf8lossychunk"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"utf8lossychunk"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["utf8lossychunk"],"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"str","std_unicode","",null,null],[3,"SplitWhitespace","std_unicode::str","An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.",null,null],[3,"Utf16Encoder","","Iterator adaptor for encoding `char`s to UTF-16.",null,null],[8,"UnicodeStr","","Methods for Unicode string slices",null,null],[10,"split_whitespace","","",8,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[10,"is_whitespace","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_alphanumeric","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"trim","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"trim_left","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"trim_right","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"derived_property","std_unicode","",null,null],[5,"Case_Ignorable","std_unicode::derived_property","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"Cased","","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[0,"property","std_unicode","",null,null],[5,"Pattern_White_Space","std_unicode::property","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"clone","std_unicode::str","",9,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"utf16encoder"}}],[11,"new","","Create a UTF-16 encoder from any `char` iterator.",10,{"inputs":[{"name":"i"}],"output":{"name":"utf16encoder"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"size_hint","","",10,null],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"clone","std_unicode::char","",0,{"inputs":[{"name":"self"}],"output":{"name":"unicodeversion"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"unicodeversion"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"chartryfromerror"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"chartryfromerror"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"size_hint","","",13,null],[11,"count","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["char"],"name":"option"}}],[11,"last","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"size_hint","","",15,null],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"size_hint","","",12,null],[11,"count","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"len","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"parsecharerror"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"chartryfromerror"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"escapedefault"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"escapedebug"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"decodeutf8"}}]],"paths":[[3,"UnicodeVersion"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"DecodeUtf16Error"],[3,"Utf8LossyChunk"],[3,"Utf8Lossy"],[3,"Utf8LossyChunksIter"],[8,"UnicodeStr"],[3,"SplitWhitespace"],[3,"Utf16Encoder"],[3,"CharTryFromError"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"ParseCharError"],[3,"EscapeDebug"],[3,"DecodeUtf8"]]};
initSearch(searchIndex);
